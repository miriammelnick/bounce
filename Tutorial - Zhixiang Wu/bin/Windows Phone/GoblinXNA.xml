<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GoblinXNA</name>
    </assembly>
    <members>
        <member name="T:GoblinXNA.Device.InputDevice">
            <summary>
            An interface that defines the properties and methods for any input device.
            </summary>
        </member>
        <member name="M:GoblinXNA.Device.InputDevice.Update(System.TimeSpan,System.Boolean)">
            <summary>
            Updates the state of this input device
            </summary>
            <param name="elapsedTime"></param>
            <param name="deviceActive"></param>
        </member>
        <member name="M:GoblinXNA.Device.InputDevice.TriggerDelegates(System.Byte[])">
            <summary>
            Triggers the callback functions specified in this InputDevice programatically.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:GoblinXNA.Device.InputDevice.Dispose">
            <summary>
            Disposes this input device.
            </summary>
        </member>
        <member name="P:GoblinXNA.Device.InputDevice.Identifier">
            <summary>
            Gets a unique identifier of this input device
            </summary>
        </member>
        <member name="P:GoblinXNA.Device.InputDevice.IsAvailable">
            <summary>
            Gets whether this input device is available to use
            </summary>
        </member>
        <member name="M:GoblinXNA.Device.Accelerometer.Accelerometer.Update(System.TimeSpan,System.Boolean)">
            <summary>
            Updates the state of this input device
            </summary>
            <param name="gameTime"></param>
            <param name="deviceActive"></param>
        </member>
        <member name="M:GoblinXNA.Device.Accelerometer.Accelerometer.TriggerDelegates(System.Byte[])">
            <summary>
            Triggers the callback functions specified in this InputDevice programatically.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:GoblinXNA.Device.Accelerometer.Accelerometer.Dispose">
            <summary>
            Disposes this input device.
            </summary>
        </member>
        <member name="P:GoblinXNA.Device.Accelerometer.Accelerometer.Identifier">
            <summary>
            Gets a unique identifier of this input device
            </summary>
        </member>
        <member name="P:GoblinXNA.Device.Accelerometer.Accelerometer.IsAvailable">
            <summary>
            Gets whether this input device is available to use
            </summary>
        </member>
        <member name="T:GoblinXNA.Device.Capture.HalfResizer">
            <summary>
            An implementation of IResizer that resizes the image to half width and half height.
            </summary>
        </member>
        <member name="T:GoblinXNA.Device.Capture.IResizer">
            <summary>
            An interface for resizing an image.
            </summary>
        </member>
        <member name="M:GoblinXNA.Device.Capture.IResizer.ResizeImage(System.Byte[],Microsoft.Xna.Framework.Vector2,System.Byte[]@,System.Int32)">
            <summary>
            Resizes the original image and store the resized image in the given memory address pointed by
            resizedImagePtr.
            </summary>
            <param name="origImage">The pixel byte array of the original image.</param>
            <param name="origSize">The size of the original image.</param>
            <param name="resizedImage">The pixel byte array of the resized image.</param>
            <param name="bpp">Bits per pixel</param>
        </member>
        <member name="P:GoblinXNA.Device.Capture.IResizer.ScalingFactor">
            <summary>
            Gets the scaling factor applied to the original image.
            </summary>
        </member>
        <member name="T:GoblinXNA.Device.Capture.Resolution">
            <summary>
            The resolution of the camera. In the format of _[width]x[height].
            </summary>
        </member>
        <member name="T:GoblinXNA.Device.Capture.FrameRate">
            <summary>
            The framerate of the camera
            </summary>
        </member>
        <member name="T:GoblinXNA.Device.Capture.ImageFormat">
            <summary>
            The format of the image that will be passed to the marker tracker.
            </summary>
        </member>
        <member name="F:GoblinXNA.Device.Capture.ImageFormat.GRAYSCALE_8">
            <summary>
            8-bit Grayscale format.
            </summary>
        </member>
        <member name="F:GoblinXNA.Device.Capture.ImageFormat.R5G6B5_16">
            <summary>
            16-bit RGB format. 5 bits for R, 6 bits for G, and 5 bits for B channel.
            </summary>
        </member>
        <member name="F:GoblinXNA.Device.Capture.ImageFormat.R8G8B8_24">
            <summary>
            24-bit RGB format. 8 bits for each R, G, and B channel.
            </summary>
        </member>
        <member name="F:GoblinXNA.Device.Capture.ImageFormat.B8G8R8_24">
            <summary>
            24-bit BGR format. 8 bits for each B, G, and R channel.
            </summary>
        </member>
        <member name="F:GoblinXNA.Device.Capture.ImageFormat.A8B8G8R8_32">
            <summary>
            32-bit ABGR format. 8 bits for each A (alpha), B, G, and R channel.
            </summary>
        </member>
        <member name="F:GoblinXNA.Device.Capture.ImageFormat.R8G8B8A8_32">
            <summary>
            32-bit RGBA format. 8 bits for each R, G, B, and A (alpha) channel.
            </summary>
        </member>
        <member name="F:GoblinXNA.Device.Capture.ImageFormat.B8G8R8A8_32">
            <summary>
            32-bit BGRA format. 8 bits for each B, G, R, and A (alpha) channel.
            </summary>
        </member>
        <member name="T:GoblinXNA.Device.Capture.IVideoCapture">
            <summary>
            A video capture interface for accessing cameras. Any video decoding class should implement this interface.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:GoblinXNA.Device.Capture.IVideoCapture.InitVideoCapture(System.Int32,GoblinXNA.Device.Capture.FrameRate,GoblinXNA.Device.Capture.Resolution,GoblinXNA.Device.Capture.ImageFormat,System.Boolean)" -->
        <member name="M:GoblinXNA.Device.Capture.IVideoCapture.GetImageTexture(System.Int32[],System.Byte[])">
            <summary>
            Gets an array of video image pixels in Microsoft.Xna.Framework.Graphics.SurfaceFormat.Bgr32 
            format. The size is CameraWidth * CameraHeight.
            </summary>
            <param name="imagePtr">A byte array where to copy the video image so that the
            marker tracker library can use it to process the image and detect marker transformations.
            Pass null if you don't need to get back the image.</param>
            <param name="returnImage">An array of int in which the video pixels are copied to. Pass null
            if you don't need the int[] image.</param>
            <returns></returns>
        </member>
        <member name="M:GoblinXNA.Device.Capture.IVideoCapture.Dispose">
            <summary>
            Disposes the video capture device.
            </summary>
        </member>
        <member name="P:GoblinXNA.Device.Capture.IVideoCapture.Width">
            <summary>
            Gets the camera width in pixels.
            </summary>
        </member>
        <member name="P:GoblinXNA.Device.Capture.IVideoCapture.Height">
            <summary>
            Gets the camera height in pixels.
            </summary>
        </member>
        <member name="P:GoblinXNA.Device.Capture.IVideoCapture.VideoDeviceID">
            <summary>
            Gets the video device ID.
            </summary>
        </member>
        <member name="P:GoblinXNA.Device.Capture.IVideoCapture.GrayScale">
            <summary>
            Gets whether to use grayscale.
            </summary>
        </member>
        <member name="P:GoblinXNA.Device.Capture.IVideoCapture.Format">
            <summary>
            Gets the image pointer format.
            </summary>
        </member>
        <member name="P:GoblinXNA.Device.Capture.IVideoCapture.MarkerTrackingImageResizer">
            <summary>
            Gets or sets the image resizer for the image pointer passed to the marker tracking. You can pass
            a different resolution to the marker tracking process from the resolution of the rendered video image
            by setting this resizer. If not set, which is by default, then the same resolution from the rendered image
            is used for the marker tracking. 
            </summary>
        </member>
        <member name="P:GoblinXNA.Device.Capture.IVideoCapture.CaptureCallback">
            <summary>
            Sets the callback function to be called when a new image becomes ready.
            </summary>
        </member>
        <member name="P:GoblinXNA.Device.Capture.IVideoCapture.RenderFormat">
            <summary>
            Gets the information whether certain image operation needs to be applied to the rendered
            video image on the background.
            </summary>
        </member>
        <member name="P:GoblinXNA.Device.Capture.IVideoCapture.Initialized">
            <summary>
            Gets whether the device is initialized.
            </summary>
        </member>
        <member name="T:GoblinXNA.Device.Capture.NullCapture">
            <summary>
            Creates a dummy capture device that streams a static image.
            </summary>
        </member>
        <member name="M:GoblinXNA.Device.Capture.NullCapture.#ctor">
            <summary>
            Creates a video capture using a series of static images.
            </summary>
        </member>
        <member name="P:GoblinXNA.Device.Capture.NullCapture.IsImageAlreadyProcessed">
            <summary>
            Gets or sets whether the static image is already processed by the marker tracker.
            </summary>
        </member>
        <member name="P:GoblinXNA.Device.Capture.NullCapture.StaticImageFile">
            <summary>
            Gets or sets the static image used for tracking. JPEG, GIF, and BMP formats are
            supported.
            </summary>
            <remarks>
            You need to set this value if you want to perform marker tracking using a
            static image instead of a live video stream. 
            </remarks>
            <exception cref="T:GoblinXNA.GoblinException">If the image format is not supported.</exception>
        </member>
        <member name="P:GoblinXNA.Device.Capture.NullCapture.ImageData">
            <summary>
            Sets the image data for tracking directly.
            </summary>
        </member>
        <member name="M:GoblinXNA.Device.Capture.PhoneCameraCapture.#ctor(System.Windows.Media.VideoBrush)">
            <summary>
            Creates a video capture using Mango's phone camera.
            </summary>
        </member>
        <member name="T:GoblinXNA.Device.DeviceEnumerator">
            <summary>
            An enumerator for all of the available input devices including 2D input devices
            (e.g., keyboard, mouse) and 6DOF input devices (e.g., InterSense tracker).
            </summary>
            <remarks>
            It's possible to access each device class directly, but this class provides 
            simple APIs to access the available devices
            </remarks>
        </member>
        <member name="M:GoblinXNA.Device.DeviceEnumerator.#ctor">
            <summary>
            Creates a device enumerator and enumerates all of the available input devices
            </summary>
            <remarks>
            This constructor calls Reenumerate method, so you don't need to call it in your
            code for initial enumeration.
            </remarks>
            <seealso cref="M:GoblinXNA.Device.DeviceEnumerator.Reenumerate"/>
        </member>
        <member name="M:GoblinXNA.Device.DeviceEnumerator.Reenumerate">
            <summary>
            Reenumerates all of the available input devices.
            </summary>
            <remarks>
            The constructor calls this method, so you should only call this method if you plugged/unplugged
            any input devices after calling the constructor
            </remarks>
        </member>
        <member name="M:GoblinXNA.Device.DeviceEnumerator.Update(System.TimeSpan,System.Boolean)">
            <summary>
            Updates all of the input devices' status
            </summary>
            <param name="elapsedTime"></param>
            <param name="deviceActive"></param>
        </member>
        <member name="P:GoblinXNA.Device.DeviceEnumerator.AvailableDevices">
            <summary>
            Gets all of the available non-6DOF input devices (e.g., mouse, keyboard)
            </summary>
        </member>
        <member name="P:GoblinXNA.Device.DeviceEnumerator.Available6DOFDevices">
            <summary>
            Gets all of the available 6DOF input devices (e.g., InterSense tracker)
            </summary>
        </member>
        <member name="T:GoblinXNA.Device.Generic.GenericInput">
            <summary>
            An implementation of 6DOF input device using mouse based manipulation (e.g., dragging).
            </summary>
        </member>
        <member name="T:GoblinXNA.Device.InputDevice_6DOF">
            <summary>
            An interface that defines the properties and methods for any input device that 
            can provide 6 degrees of freedom input.
            </summary>
        </member>
        <member name="M:GoblinXNA.Device.InputDevice_6DOF.Update(System.TimeSpan,System.Boolean)">
            <summary>
            Updates the state of this 6DOF input device.
            </summary>
            <param name="elapsedTime"></param>
            <param name="deviceActive"></param>
        </member>
        <member name="M:GoblinXNA.Device.InputDevice_6DOF.Dispose">
            <summary>
            Disposes this 6DOF input device.
            </summary>
        </member>
        <member name="P:GoblinXNA.Device.InputDevice_6DOF.Identifier">
            <summary>
            Gets a unique identifier of this 6DOF input device.
            </summary>
        </member>
        <member name="P:GoblinXNA.Device.InputDevice_6DOF.IsAvailable">
            <summary>
            Gets whether this 6DOF input device is available to use.
            </summary>
        </member>
        <member name="P:GoblinXNA.Device.InputDevice_6DOF.WorldTransformation">
            <summary>
            Gets the world transformation returned by the 6DOF input device.
            </summary>
        </member>
        <member name="M:GoblinXNA.Device.Generic.GenericInput.#ctor">
            <summary>
            A private constructor.
            </summary>
        </member>
        <member name="M:GoblinXNA.Device.Generic.GenericInput.Reset">
            <summary>
            Resets the translation and rotation to initial values.
            </summary>
        </member>
        <member name="P:GoblinXNA.Device.Generic.GenericInput.InitialTranslation">
            <summary>
            Sets the initial translation. Note that this will also set Translation property.
            </summary>
        </member>
        <member name="P:GoblinXNA.Device.Generic.GenericInput.InitialRotation">
            <summary>
            Sets the initial rotation. Note that this will also set Rotation property.
            </summary>
        </member>
        <member name="P:GoblinXNA.Device.Generic.GenericInput.BaseTransformation">
            <summary>
            Sets the base transform to use for panning.
            </summary>
        </member>
        <member name="P:GoblinXNA.Device.Generic.GenericInput.PanSpeed">
            <summary>
            Gets or sets the pan speed. The default value is 1.
            </summary>
        </member>
        <member name="P:GoblinXNA.Device.Generic.GenericInput.ZoomSpeed">
            <summary>
            Gets or sets the zoom speed. The default value is 1.
            </summary>
        </member>
        <member name="P:GoblinXNA.Device.Generic.GenericInput.RotateSpeed">
            <summary>
            Gets or sets the rotation speed. The default value is 1.
            </summary>
        </member>
        <member name="P:GoblinXNA.Device.Generic.GenericInput.Instance">
            <summary>
            Gets the instantiation of GenericInput class.
            </summary>
        </member>
        <member name="T:GoblinXNA.Device.Generic.HandleKeyPress">
            <summary>
            A delegate/callback function that defines what to do when a key is pressed.
            </summary>
            <param name="key">The key pressed</param>
            <param name="modifier">A struct that indicates whether any of the modifier keys 
            (e.g., Shift, Alt, or Ctrl) are pressed</param>
        </member>
        <member name="T:GoblinXNA.Device.Generic.HandleKeyRelease">
            <summary>
            A delegate/callback function that defines what to do when a key is released.
            </summary>
            <param name="key">The key released</param>
            <param name="modifier">A struct that indicates whether any of the modifier keys 
            (e.g., Shift, Alt, or Ctrl) are pressed</param>
        </member>
        <member name="T:GoblinXNA.Device.Generic.HandleKeyType">
            <summary>
            A delegate/callback function that defines what to do when a key is typed.
            </summary>
            <param name="key">The key typed</param>
            <param name="modifier">A struct that indicates whether any of the modifier keys 
            (e.g., Shift, Alt, or Ctrl) are pressed</param>
        </member>
        <member name="T:GoblinXNA.Device.Generic.KeyModifier">
            <summary>
            A struct that defines whether any of the modifier keys (e.g., Shift, Alt, or Ctrl) 
            are held down.
            </summary>
        </member>
        <member name="F:GoblinXNA.Device.Generic.KeyModifier.ShiftKeyPressed">
            <summary>
            Shift key is held down
            </summary>
        </member>
        <member name="F:GoblinXNA.Device.Generic.KeyModifier.AltKeyPressed">
            <summary>
            Alt key is held down
            </summary>
        </member>
        <member name="F:GoblinXNA.Device.Generic.KeyModifier.CtrlKeyPressed">
            <summary>
            Ctrl key is held down
            </summary>
        </member>
        <member name="T:GoblinXNA.Device.Generic.KeyboardEventType">
            <summary>
            An enum that defines the keyboard event type.
            </summary>
        </member>
        <member name="T:GoblinXNA.Device.Generic.KeyboardInput">
             <summary>
             A helper class for handling the keyboard input. This class wraps the functionalities provided
             by XNA's KeyboardState class. Keyboard events are handled based on interrupt method (callback
             functions), rather than the polling method (XNA's KeyboardState), so that the developer doesn't need to 
             poll the status of the keyboard state every frame by herself/himself.
             </summary>
             <example>
             An example of adding a keyboard type event handler:
             
             KeyboardInput.Instance.KeyTypeEvent += new HandleKeyType(KeyTypeHandler);
            
             private void KeyTypeHandler(Microsoft.Xna.Framework.Input.Keys key, KeyModifier modifier)
             {
                //Insert your key type handling code here
                if(key == Keys.A)
                {
                    ....
                }
             }
             </example>
             <remarks>
             KeyboardInput is a singleton class, so you should access this class through Instance property.
             </remarks>
        </member>
        <member name="F:GoblinXNA.Device.Generic.KeyboardInput.keyboardState">
            <summary>
            Keyboard state, set every frame in the Update method.
            </summary>
        </member>
        <member name="F:GoblinXNA.Device.Generic.KeyboardInput.keysPressedLastFrame">
            <summary>
            Keys pressed last frame, for comparison if a key was just pressed.
            </summary>
        </member>
        <member name="M:GoblinXNA.Device.Generic.KeyboardInput.#ctor">
            <summary>
            A private constructor.
            </summary>
            <remarks>
            Don't instantiate this constructor.
            </remarks>
        </member>
        <member name="M:GoblinXNA.Device.Generic.KeyboardInput.IsSpecialKey(Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            Checks whether 'key' is a special key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:GoblinXNA.Device.Generic.KeyboardInput.IsKeyModifier(Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            Checks whether 'key' is a modifier key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:GoblinXNA.Device.Generic.KeyboardInput.KeyToChar(Microsoft.Xna.Framework.Input.Keys,System.Boolean)">
            <summary>
            Convers a 'key' to a char.
            </summary>
            <remarks>
            If the keys are mapped other than on a default QWERTY keyboard, this method will not 
            work properly. Most keyboards will return the same for A-Z and 0-9, but the special 
            keys might be different. 
            </remarks>
            <param name="key"></param>
            <param name="shiftPressed"></param>
            <returns></returns>
        </member>
        <member name="M:GoblinXNA.Device.Generic.KeyboardInput.TriggerDelegates(System.Byte[])">
            <summary>
            Triggers the key event callback functions programatically with the given byte data
            array. Use the GetNetworkData(KeyboardEventType, Keys, KeyModifier) function to convert 
            each of the keyboard events and the necessary information (e.g., key) to a byte array.
            </summary>
            <see cref="M:GoblinXNA.Device.Generic.KeyboardInput.GetNetworkData(GoblinXNA.Device.Generic.KeyboardEventType,Microsoft.Xna.Framework.Input.Keys,GoblinXNA.Device.Generic.KeyModifier)"/>
            <param name="data">An array of bytes containing specific data used to trigger
            the key event callback functions</param>
        </member>
        <member name="M:GoblinXNA.Device.Generic.KeyboardInput.GetNetworkData(GoblinXNA.Device.Generic.KeyboardEventType,Microsoft.Xna.Framework.Input.Keys,GoblinXNA.Device.Generic.KeyModifier)">
            <summary>
            Converts the keyboard event type, the key, and the modifier keys' information 
            to an array of bytes so that it can be sent over the network.
            </summary>
            <param name="type">Press, Release, or Type</param>
            <param name="key">The key</param>
            <param name="modifier">A struct that indicates whether any of the modifier 
            keys are held down</param>
            <returns></returns>
        </member>
        <member name="E:GoblinXNA.Device.Generic.KeyboardInput.KeyPressEvent">
            <summary>
            An event to add or remove key press delegate/callback functions
            </summary>
        </member>
        <member name="E:GoblinXNA.Device.Generic.KeyboardInput.KeyReleaseEvent">
            <summary>
            An event to add or remove key release delegate/callback functions
            </summary>
        </member>
        <member name="E:GoblinXNA.Device.Generic.KeyboardInput.KeyTypeEvent">
            <summary>
            An event to add or remove key type delegate/callback functions
            </summary>
        </member>
        <member name="P:GoblinXNA.Device.Generic.KeyboardInput.OnlyHandleWhenFocused">
            <summary>
            Gets or sets whether to only handle keyboard events when the application window is focused.
            </summary>
            <remarks>Default value is true</remarks>
        </member>
        <member name="P:GoblinXNA.Device.Generic.KeyboardInput.InitialRepetitionWait">
            <summary>
            Gets or sets how long it should wait initially beforing repeating the same key type
            when a key is held down
            </summary>
            <remarks>The wait time is in milliseconds. Default value is 500 ms.</remarks>
        </member>
        <member name="P:GoblinXNA.Device.Generic.KeyboardInput.RepetitionWait">
            <summary>
            Gets or sets how long it should wait after the initial wait time before repeating 
            the same key type when a key is held down
            </summary>
            <remarks>The wait time is in milliseconds. Default value is 100 ms.</remarks>
        </member>
        <member name="P:GoblinXNA.Device.Generic.KeyboardInput.Instance">
            <summary>
            Gets the instantiation of KeyboardInput class.
            </summary>
        </member>
        <member name="T:GoblinXNA.Device.Generic.HandleMousePress">
            <summary>
            A delegate/callback function that defines what to do when the mouse is pressed.
            </summary>
            <param name="button">LeftButton, MiddleButton, or RightButton</param>
            <param name="mouseLocation">The location in screen coordinates where the mouse is pressed</param>
        </member>
        <member name="T:GoblinXNA.Device.Generic.HandleMouseRelease">
            <summary>
            A delegate/callback function that defines what to do when the mouse is released.
            </summary>
            <param name="button">LeftButton, MiddleButton, or RightButton</param>
            <param name="mouseLocation">The location in screen coordinates where the mouse is released</param>
        </member>
        <member name="T:GoblinXNA.Device.Generic.HandleMouseClick">
            <summary>
            A delegate/callback function that defines what to do when the mouse is clicked.
            </summary>
            <param name="button">LeftButton, MiddleButton, or RightButton</param>
            <param name="mouseLocation">The location in screen coordinates where the mouse is clicked</param>
        </member>
        <member name="T:GoblinXNA.Device.Generic.HandleMouseMove">
            <summary>
            A delegate/callback function that defines what to do when the mouse is moved.
            </summary>
            <param name="mouseLocation">The current location of the mouse in screen coordinates</param>
        </member>
        <member name="T:GoblinXNA.Device.Generic.HandleMouseDrag">
            <summary>
            A delegate/callback function that defines what to do when the mouse is dragged.
            </summary>
            <param name="button">LeftButton, MiddleButton, or RightButton</param>
            <param name="startLocation">The start location of the mouse drag in screen coordinates</param>
            <param name="currentLocation">The current location of the mouse drag in screen coordinates</param>
        </member>
        <member name="T:GoblinXNA.Device.Generic.HandleMouseWheelMove">
            <summary>
            A delegate/callback function that defines what to do when the mouse wheel is moved.
            </summary>
            <param name="delta">The difference of current mouse scroll wheel value from previous
            mouse scroll wheel value</param>
            <param name="value">The cumulative mouse scroll wheel value since the game/application
            was started</param>
        </member>
        <member name="T:GoblinXNA.Device.Generic.MouseEventType">
            <summary>
            An enum that defines the mouse event type.
            </summary>
        </member>
        <member name="T:GoblinXNA.Device.Generic.MouseInput">
             <summary>
             A helper class for handling the mouse input. This class wraps the functionalities provided
             by XNA's MouseState class, and mouse events are handled based on interrupt method (callback
             functions), rather than polling method (XNA's MouseState), so that the developer doesn't need to 
             poll the status of the mouse state every frame by herself/himself.
             </summary>
             <example>
             An example of adding a mouse press event handler:
             
             MouseInput mouseInput = MouseInput.Instance;
             mouseInput.MousePressEvent += new HandleMousePress(MousePressHandler);
            
             private void MousePressHandler(int button, Point mouseLocation)
             {
                //Insert your mouse press handling code here
                if(button == MouseInput.LeftButton)
                {
                    ....
                }
             }
             </example>
             <remarks>
             MouseInput is a singleton class, so you should access this class through Instance property.
             </remarks>
        </member>
        <member name="F:GoblinXNA.Device.Generic.MouseInput.LeftButton">
            <summary>
            Indicates the left mouse button of a 3-state mouse device.
            </summary>
        </member>
        <member name="F:GoblinXNA.Device.Generic.MouseInput.MiddleButton">
            <summary>
            Indicates the middle mouse button of a 3-state mouse device. A middle button is
            usually the mouse wheel.
            </summary>
        </member>
        <member name="F:GoblinXNA.Device.Generic.MouseInput.RightButton">
            <summary>
            Indicates the right mouse button  of a 3-state mouse device.
            </summary>
        </member>
        <member name="F:GoblinXNA.Device.Generic.MouseInput.mouseState">
            <summary>
            Mouse state, set every frame in the Update method.
            </summary>
        </member>
        <member name="F:GoblinXNA.Device.Generic.MouseInput.mouseWheelDelta">
            <summary>
            Mouse wheel delta this frame. We do not get the total scroll value, but we usually 
            need the current delta!
            </summary>
        </member>
        <member name="M:GoblinXNA.Device.Generic.MouseInput.#ctor">
            <summary>
            A private constructor.
            </summary>
            <remarks>
            Don't instatiate this constructor.
            </remarks>
        </member>
        <member name="M:GoblinXNA.Device.Generic.MouseInput.TriggerDelegates(System.Byte[])">
            <summary>
            Triggers the mouse event callback functions programatically with the given byte data
            array. The data format differs depending on the MouseEventType. Use GetNetworkData(...)
            functions to convert each of the mouse events and the necessary information (e.g., button)
            to a byte array.
            </summary>
            <see cref="M:GoblinXNA.Device.Generic.MouseInput.GetNetworkData(GoblinXNA.Device.Generic.MouseEventType,System.Int32,Microsoft.Xna.Framework.Point)"/>
            <seealso cref="M:GoblinXNA.Device.Generic.MouseInput.GetNetworkData(Microsoft.Xna.Framework.Point)"/>
            <seealso cref="M:GoblinXNA.Device.Generic.MouseInput.GetNetworkData(System.Int32,Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)"/>
            <seealso cref="M:GoblinXNA.Device.Generic.MouseInput.GetNetworkData(System.Int32,System.Int32)"/>
            <param name="data">An array of bytes containing specific data used to trigger
            the mouse event callback functions</param>
        </member>
        <member name="M:GoblinXNA.Device.Generic.MouseInput.GetNetworkData(GoblinXNA.Device.Generic.MouseEventType,System.Int32,Microsoft.Xna.Framework.Point)">
            <summary>
            Converts the mouse event type, mouse button, and mouse location to an array of bytes
            so that it can be sent over the network.
            </summary>
            <param name="type">Must be Press, Release, or Click</param>
            <param name="button">RightButton, MiddleButton, or LeftButton</param>
            <param name="mouseLocation"></param>
            <exception cref="T:GoblinXNA.GoblinException"></exception>
            <returns></returns>
        </member>
        <member name="M:GoblinXNA.Device.Generic.MouseInput.GetNetworkData(Microsoft.Xna.Framework.Point)">
            <summary>
            Converts mouse location to an array of bytes for the 'Move' mouse event type
            so that it can be sent over the network.
            </summary>
            <param name="mouseLocation"></param>
            <returns></returns>
        </member>
        <member name="M:GoblinXNA.Device.Generic.MouseInput.GetNetworkData(System.Int32,Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)">
            <summary>
            Converts the mouse button, mouse start location, and current mouse location to an 
            array of bytes for the 'Drag' mouse event type so that it can be sent over the network.
            </summary>
            <param name="button">RightButton, MiddleButton, or LeftButton</param>
            <param name="startLocation"></param>
            <param name="currentLocation"></param>
            <returns></returns>
        </member>
        <member name="M:GoblinXNA.Device.Generic.MouseInput.GetNetworkData(System.Int32,System.Int32)">
            <summary>
            Converts the delta and value for the 'WheelMove' mouse event type to an array of 
            bytes so that it can be sent over the network.
            </summary>
            <param name="delta"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="E:GoblinXNA.Device.Generic.MouseInput.MouseClickEvent">
            <summary>
            An event to add or remove mouse click delegate/callback functions
            </summary>
        </member>
        <member name="E:GoblinXNA.Device.Generic.MouseInput.MousePressEvent">
            <summary>
            An event to add or remove mouse press delegate/callback functions
            </summary>
        </member>
        <member name="E:GoblinXNA.Device.Generic.MouseInput.MouseReleaseEvent">
            <summary>
            An event to add or remove mouse release delegate/callback functions
            </summary>
        </member>
        <member name="E:GoblinXNA.Device.Generic.MouseInput.MouseMoveEvent">
            <summary>
            An event to add or remove mouse move delegate/callback functions
            </summary>
        </member>
        <member name="E:GoblinXNA.Device.Generic.MouseInput.MouseDragEvent">
            <summary>
            An event to add or remove mouse drag delegate/callback functions
            </summary>
        </member>
        <member name="E:GoblinXNA.Device.Generic.MouseInput.MouseWheelMoveEvent">
            <summary>
            An event to add or remove mouse wheel move delegate/callback functions
            </summary>
        </member>
        <member name="P:GoblinXNA.Device.Generic.MouseInput.MouseLeftButtonPressed">
            <summary>
            Gets whether the left mouse button is currently pressed.
            </summary>
        </member>
        <member name="P:GoblinXNA.Device.Generic.MouseInput.MouseRightButtonPressed">
            <summary>
            Gets whether the right mouse button is currently pressed.
            </summary>
        </member>
        <member name="P:GoblinXNA.Device.Generic.MouseInput.MouseMiddleButtonPressed">
            <summary>
            Gets whether the middle mouse button is currently pressed.
            </summary>
        </member>
        <member name="P:GoblinXNA.Device.Generic.MouseInput.MouseLeftButtonReleased">
            <summary>
            Gets whether the left mouse button is currently released.
            </summary>
        </member>
        <member name="P:GoblinXNA.Device.Generic.MouseInput.MouseRightButtonReleased">
            <summary>
            Gets whether the right mouse button is currently released.
            </summary>
        </member>
        <member name="P:GoblinXNA.Device.Generic.MouseInput.MouseMiddleButtonReleased">
            <summary>
            Gets whether the middle mouse button is currently released.
            </summary>
        </member>
        <member name="P:GoblinXNA.Device.Generic.MouseInput.MouseLocation">
            <summary>
            Gets the current mouse position in the screen coordinate.
            </summary>
        </member>
        <member name="P:GoblinXNA.Device.Generic.MouseInput.OnlyHandleInsideWindow">
            <summary>
            Gets or sets whether to handle mouse events only if the mouse cursor is inside
            the window. The default value is true.
            </summary>
        </member>
        <member name="P:GoblinXNA.Device.Generic.MouseInput.OnlyTrackWhenFocused">
            <summary>
            Gets or sets whether to handle mouse events only if the current window is
            focused. The default value is true.
            </summary>
        </member>
        <member name="P:GoblinXNA.Device.Generic.MouseInput.Instance">
            <summary>
            Gets the instantiation of MouseInput class.
            </summary>
        </member>
        <member name="M:GoblinXNA.Device.Generic.TouchInput.Update(System.TimeSpan,System.Boolean)">
            <summary>
            Updates the state of this input device
            </summary>
            <param name="gameTime"></param>
            <param name="deviceActive"></param>
        </member>
        <member name="M:GoblinXNA.Device.Generic.TouchInput.Dispose">
            <summary>
            Disposes this input device.
            </summary>
        </member>
        <member name="P:GoblinXNA.Device.Generic.TouchInput.Identifier">
            <summary>
            Gets a unique identifier of this input device
            </summary>
        </member>
        <member name="M:GoblinXNA.Device.Accelerometer.GPSMobile.Update(System.TimeSpan,System.Boolean)">
            <summary>
            Updates the state of this input device
            </summary>
            <param name="gameTime"></param>
            <param name="deviceActive"></param>
        </member>
        <member name="M:GoblinXNA.Device.Accelerometer.GPSMobile.TriggerDelegates(System.Byte[])">
            <summary>
            Triggers the callback functions specified in this InputDevice programatically.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:GoblinXNA.Device.Accelerometer.GPSMobile.Dispose">
            <summary>
            Disposes this input device.
            </summary>
        </member>
        <member name="P:GoblinXNA.Device.Accelerometer.GPSMobile.Identifier">
            <summary>
            Gets a unique identifier of this input device
            </summary>
        </member>
        <member name="P:GoblinXNA.Device.Accelerometer.GPSMobile.IsAvailable">
            <summary>
            Gets whether this input device is available to use
            </summary>
        </member>
        <member name="T:GoblinXNA.Device.InputMapper">
            <summary>
            A class that maps all of the available input devices to a set of unified functions.
            </summary>
            <remarks>
            InputMapper is a singleton class, so you should access this class through Instance property.
            </remarks>
        </member>
        <member name="M:GoblinXNA.Device.InputMapper.#ctor">
            <summary>
            A private constructor.
            </summary>
            <remarks>
            Don't instantiate this.
            </remarks>
        </member>
        <member name="M:GoblinXNA.Device.InputMapper.GetWorldTransformation(System.String)">
            <summary>
            Gets the world transformation of a 6DOF input device with the given string identifier.
            </summary>
            <param name="identifier">A string identifier for a 6DOF input device</param>
            <returns></returns>
        </member>
        <member name="M:GoblinXNA.Device.InputMapper.TriggerInputDeviceDelegates(System.String,System.Byte[])">
            <summary>
            Triggers a delegate/callback function defined in a non-6DOF input device with the given
            string identifier by passing an array of bytes that contains data in certain format.
            For the specific data format, please see each of the TriggerDelegates(byte[]) 
            functions implemented in each class that implements InputDevice interface
            (e.g., MouseInput).
            </summary>
            <param name="identifier">A string identifier for a non-6DOF input device</param>
            <param name="data"></param>
        </member>
        <member name="M:GoblinXNA.Device.InputMapper.ContainsInputDevice(System.String)">
            <summary>
            Indicates whether a non-6DOF input device with the given string identifier is available.
            </summary>
            <param name="identifier">A string identifier for a non-6DOF input device</param>
            <returns></returns>
        </member>
        <member name="M:GoblinXNA.Device.InputMapper.Contains6DOFInputDevice(System.String)">
            <summary>
            Indicates whether a 6DOF input device with the given string identifier is available.
            </summary>
            <param name="identifier">A string identifier for a 6DOF input device</param>
            <returns></returns>
        </member>
        <member name="M:GoblinXNA.Device.InputMapper.AddInputDevice(GoblinXNA.Device.InputDevice)">
            <summary>
            Adds an input device to be enumerated.
            </summary>
            <param name="device">An input device to be added</param>
            <exception cref="T:GoblinXNA.GoblinException">If duplicate device identifier exists</exception>
        </member>
        <member name="M:GoblinXNA.Device.InputMapper.Add6DOFInputDevice(GoblinXNA.Device.InputDevice_6DOF)">
            <summary>
            Adds a 6DOF input device to be enumerated.
            </summary>
            <param name="device">A 6DOF input device to be added</param>
            <exception cref="T:GoblinXNA.GoblinException">If duplicate device identifier exists</exception>
        </member>
        <member name="M:GoblinXNA.Device.InputMapper.Reenumerate">
            <summary>
            Reenumerates all of the available input devices. You should call this function after you
            add your own input devices.
            </summary>
        </member>
        <member name="M:GoblinXNA.Device.InputMapper.Update(System.TimeSpan,System.Boolean)">
            <summary>
            Updates all of the status of the available 6DOF and non-6DOF input devices.
            </summary>
            <param name="elapsedTime"></param>
            <param name="deviceActive"></param>
        </member>
        <member name="M:GoblinXNA.Device.InputMapper.Dispose">
            <summary>
            Disposes all of the enumerated 6DOF and non-6DOF input devices.
            </summary>
        </member>
        <member name="P:GoblinXNA.Device.InputMapper.Instance">
            <summary>
            Gets the instantiation of InputMapper class.
            </summary>
        </member>
        <member name="T:GoblinXNA.Device.Util.DESPredictor">
            <summary>
            A predictor that implements La Viola's Double Exponentional Smoothing Prediction
            algorithm.
            </summary>
        </member>
        <member name="T:GoblinXNA.Device.Util.IPredictor">
            <summary>
            An interface class for matrix prediction classes.
            </summary>
        </member>
        <member name="M:GoblinXNA.Device.Util.IPredictor.UpdatePredictor(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Quaternion@)">
            <summary>
            
            </summary>
            <param name="p">The position to use for updating the prediction</param>
            <param name="q">The orientation to use for updating the prediction</param>
        </member>
        <member name="M:GoblinXNA.Device.Util.IPredictor.GetPrediction(System.Single,Microsoft.Xna.Framework.Matrix@)">
            <summary>
            Gets the predicted transformation into the future time 't' from the history.
            </summary>
            <param name="t">The amount of time from now into the future in milliseconds</param>
            <param name="result">The predicted transformation</param>
        </member>
        <member name="M:GoblinXNA.Device.Util.DESPredictor.#ctor(System.Single,System.Single,System.Int32,System.Single,System.Single)">
            <summary>
            Creates a double-exponential-smoothing predictor with the specified alpha values,
            delta time increment, and thresholds.
            </summary>
            <param name="transAlpha">An alpha value used for translational smoothing.</param>
            <param name="rotAlpha">An alpha value used for rotational smoothing.</param>
            <param name="delta">The time delta between each prediction time</param>
            <param name="transThreshold">A translational threshold. If set to larger than 0, then
            if the distance between the previous transformation and the current transformation is larger
            than this threshold, then the current transformation will be dropped from the smoothing
            calculation.</param>
            <param name="rotThreshold">A rotational threshold. If set to largen than 0, then
            if the angle (in radians) between the previous transformation and the current transformation
            is larger than this threshold, then the current transformation will be dropped from the
            smoothing calculation.</param>
        </member>
        <member name="M:GoblinXNA.Device.Util.DESPredictor.#ctor(System.Single,System.Single,System.Int32)">
            <summary>
            Creates a double-exponential-smoothing predictor with the specified alpha values,
            and delta time increment with no thresholds.
            </summary>
            <param name="transAlpha">An alpha value used for translational smoothing.</param>
            <param name="rotAlpha">An alpha value used for rotational smoothing.</param>
            <param name="delta">The time delta between each prediction time.</param>
        </member>
        <member name="M:GoblinXNA.Device.Util.DESPredictor.#ctor(System.Single,System.Int32)">
            <summary>
            Creates a double-exponential-smoothing predictor with the specified alpha value,
            and delta time increment with no thresholds.
            </summary>
            <param name="alpha">An alpha value used for both translational and rotational 
            smoothing.</param>
            <param name="delta">The time delta between each prediction time.</param>
        </member>
        <member name="T:GoblinXNA.Device.Util.DESSmoother">
            <summary>
            A helper class for smoothing out the incoming matrix values based on double 
            exponential smoothing (DES) algorithm (The equations can be found at
            http://www.itl.nist.gov/div898/handbook/pmc/section4/pmc433.htm). We use
            'b1 = y2 - y1' equation to set the initial value of b1.
            </summary>
        </member>
        <member name="T:GoblinXNA.Device.Util.ISmoother">
            <summary>
            An interface for matrix smoothing/filtering classes.
            </summary>
        </member>
        <member name="M:GoblinXNA.Device.Util.ISmoother.FilterMatrix(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Matrix@)">
            <summary>
            Gets a filtered matrix based on the given position and orientation.
            </summary>
            <param name="p">The original position</param>
            <param name="q">The original rotation</param>
            <param name="result">A smoothed/filterd matrix</param>
        </member>
        <member name="M:GoblinXNA.Device.Util.ISmoother.ResetHistory">
            <summary>
            Resets the smoothing history.
            </summary>
        </member>
        <member name="M:GoblinXNA.Device.Util.DESSmoother.#ctor(System.Single,System.Single)">
            <summary>
            Creates a DES smoother with alpha and gamma values ([0.0f - 1.0f] excluding 0) 
            without translation or rotational threhold. Both translation and rotation alpha 
            and gamma values will be set to 'alpha' and 'gamma' respectively.
            </summary>
            <param name="alpha">The alpha value used in the first equation (see the website
            mentioned in the summary of this class). The larger the alpha value, the heavier 
            the weight of the incoming matrix. If alpha is 0.3f, then the smoothed matrix will 
            be roughly incoming * 0.3f + previous * 0.7f.</param>
            <param name="gamma">The gamma value used in the second equation.</param>
            <exception cref="T:System.ArgumentException">If alpha or gamma values are outside of the range</exception>
        </member>
        <member name="M:GoblinXNA.Device.Util.DESSmoother.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a DES smoother with alpha and gamma values ([0.0f - 1.0f] excluding 0)  
            separately for translational and rotational smoothing without translation or rotational 
            threhold.
            </summary>
            <param name="transAlpha">An alpha value for translational smoothing</param>
            <param name="transGamma">A gamma value for translational smoothing</param>
            <param name="rotAlpha">An alpha value for rotational smoothing</param>
            <param name="rotGamma">A gamma value for rotational smoothing</param>
            <exception cref="T:System.ArgumentException">If alpha or gamma values are outside of the range</exception>
        </member>
        <member name="M:GoblinXNA.Device.Util.DESSmoother.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a smoother with alpha and gamma values ([0.0f - 1.0f] excluding 0) separately for 
            translational and rotational smoothing with translation or rotational threhold.
            </summary>
            <param name="transAlpha">An alpha value for translational smoothing</param>
            <param name="transGamma">A gamma value for translational smoothing</param>
            <param name="rotAlpha">An alpha value for rotational smoothing</param>
            <param name="rotGamma">A gamma value for rotational smoothing</param>
            <param name="transThreshold">A translational threshold. If set to larger than 0, then
            if the distance between the previous transformation and the current transformation is larger
            than this threshold, then the current transformation will be dropped from the smoothing
            calculation.</param>
            <param name="rotThreshold">A rotational threshold. If set to largen than 0, then
            if the angle (in radians) between the previous transformation and the current transformation
            is larger than this threshold, then the current transformation will be dropped from the
            smoothing calculation.</param>
            <exception cref="T:System.ArgumentException">If alpha or gamma values are outside of the range</exception>
        </member>
        <member name="M:GoblinXNA.Device.Util.DESSmoother.FilterMatrix(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Matrix@)">
            <summary>
            Gets a filtered matrix using double exponential smoothing algorithm.
            </summary>
            <param name="p">The original position</param>
            <param name="q">The original rotation</param>
            <param name="result">A smoothed matrix</param>
        </member>
        <member name="M:GoblinXNA.Device.Util.DESSmoother.ComputeDESMatrix(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Matrix@)">
            <summary>
            Performs the DES algorithm.
            </summary>
        </member>
        <member name="T:GoblinXNA.Device.Vision.Marker.IMarkerTracker">
            <summary>
            A marker tracker interface. Any marker tracker class should implement this interface.
            </summary>
        </member>
        <member name="M:GoblinXNA.Device.Vision.Marker.IMarkerTracker.InitTracker(System.Object[])">
            <summary>
            Initilizes the marker tracker with a set of configuration parameters.
            </summary>
            <param name="configs">A set of configuration parameters</param>
        </member>
        <member name="M:GoblinXNA.Device.Vision.Marker.IMarkerTracker.AssociateMarker(System.Object[])">
            <summary>
            Associates a marker with an identifier so that the identifier can be used to find this
            marker after processing the image. 
            </summary>
            <param name="markerConfigs">A set of parameters that identifies a maker. (e.g., for
            ARTag, this parameter would be the marker array name or marker ID)</param>
            <returns>An identifier for this marker object</returns>
        </member>
        <member name="M:GoblinXNA.Device.Vision.Marker.IMarkerTracker.ProcessImage(GoblinXNA.Device.Capture.IVideoCapture,System.Byte[])">
            <summary>
            Processes the video image captured from an initialized video capture device. 
            </summary>
            <param name="captureDevice">An initialized video capture device</param>
            <param name="imagePtr"></param>
        </member>
        <member name="M:GoblinXNA.Device.Vision.Marker.IMarkerTracker.FindMarker(System.Object)">
            <summary>
            Checks whether a marker identified by 'markerID' is found in the processed image
            after calling ProcessImage(...) method.
            </summary>
            <param name="markerID">An ID associated with a marker returned from AssociateMarker(...)
            method.</param>
            <returns>A boolean value representing whether a marker was found</returns>
        </member>
        <member name="M:GoblinXNA.Device.Vision.Marker.IMarkerTracker.GetMarkerTransform">
            <summary>
            Gets the pose transformation of the found marker after calling the FindMarker(...) method.
            </summary>
            <remarks>
            This method should be called if and only if FindMarker(...) method returned true for
            the marker you're looking for. 
            </remarks>
            <returns>The pose transformation of a found marker</returns>
        </member>
        <member name="M:GoblinXNA.Device.Vision.Marker.IMarkerTracker.Dispose">
            <summary>
            Disposes this marker tracker.
            </summary>
        </member>
        <member name="P:GoblinXNA.Device.Vision.Marker.IMarkerTracker.Initialized">
            <summary>
            Gets whether the tracker has been initialized.
            </summary>
        </member>
        <member name="P:GoblinXNA.Device.Vision.Marker.IMarkerTracker.CameraProjection">
            <summary>
            Gets the camera projection matrix used for this marker tracker.
            </summary>
        </member>
        <member name="P:GoblinXNA.Device.Vision.Marker.IMarkerTracker.ZNearPlane">
            <summary>
            Gets or sets the near clipping plane used to compute CameraProjection.
            </summary>
        </member>
        <member name="P:GoblinXNA.Device.Vision.Marker.IMarkerTracker.ZFarPlane">
            <summary>
            Gets or sets the far clipping plane used to compute CameraProjection.
            </summary>
        </member>
        <member name="P:GoblinXNA.Device.Vision.Marker.IMarkerTracker.EnableTracking">
            <summary>
            Gets or sets whether to perform marker tracking. For optimization purpose, if you don't need
            marker tracking while in certain state, it's best to set this to false, and when you need it
            you can set back to true. The default value is true.
            </summary>
        </member>
        <member name="T:GoblinXNA.Device.Vision.Marker.MarkerDetector">
            <summary>
            A copy of NyARDetectMarker class from NyARToolkitCS library, but which changes for using optimized
            binary threshold class.
            </summary>
            <remarks>
            It's a full copy instead of extend since most of the members in NyARDetectMarker class is private.
            </remarks>
        </member>
        <member name="M:GoblinXNA.Device.Vision.Marker.MarkerDetector.#ctor(jp.nyatla.nyartoolkit.cs.core.NyARParam,jp.nyatla.nyartoolkit.cs.core.NyARCode[],System.Double[],System.Int32,System.Int32)">
            複数のマーカーを検出し、最も一致するARCodeをi_codeから検索するオブジェクトを作ります。
            
            @param i_param
            カメラパラメータを指定します。
            @param i_code
            検出するマーカーのARCode配列を指定します。
            配列要素のインデックス番号が、そのままgetARCodeIndex関数で得られるARCodeインデックスになります。 
            例えば、要素[1]のARCodeに一致したマーカーである場合は、getARCodeIndexは1を返します。
            @param i_marker_width
            i_codeのマーカーサイズをミリメートルで指定した配列を指定します。 先頭からi_number_of_code個の要素には、有効な値を指定する必要があります。
            @param i_number_of_code
            i_codeに含まれる、ARCodeの数を指定します。
            @param i_input_raster_type
            入力ラスタのピクセルタイプを指定します。この値は、INyARBufferReaderインタフェイスのgetBufferTypeの戻り値を指定します。
            @throws NyARException
        </member>
        <member name="M:GoblinXNA.Device.Vision.Marker.MarkerDetector.detectMarkerLite(jp.nyatla.nyartoolkit.cs.core.INyARRgbRaster,System.Int32)">
            i_imageにマーカー検出処理を実行し、結果を記録します。
            
            @param i_raster
            マーカーを検出するイメージを指定します。
            @param i_thresh
            検出閾値を指定します。0～255の範囲で指定してください。 通常は100～130くらいを指定します。
            @return 見つかったマーカーの数を返します。 マーカーが見つからない場合は0を返します。
            @throws NyARException
        </member>
        <member name="M:GoblinXNA.Device.Vision.Marker.MarkerDetector.getTransmationMatrix(System.Int32,jp.nyatla.nyartoolkit.cs.core.NyARTransMatResult)">
            i_indexのマーカーに対する変換行列を計算し、結果値をo_resultへ格納します。 直前に実行したdetectMarkerLiteが成功していないと使えません。
            
            @param i_index
            マーカーのインデックス番号を指定します。 直前に実行したdetectMarkerLiteの戻り値未満かつ0以上である必要があります。
            @param o_result
            結果値を受け取るオブジェクトを指定してください。
            @throws NyARException
        </member>
        <member name="M:GoblinXNA.Device.Vision.Marker.MarkerDetector.getConfidence(System.Int32)">
            i_indexのマーカーの一致度を返します。
            
            @param i_index
            マーカーのインデックス番号を指定します。 直前に実行したdetectMarkerLiteの戻り値未満かつ0以上である必要があります。
            @return マーカーの一致度を返します。0～1までの値をとります。 一致度が低い場合には、誤認識の可能性が高くなります。
            @throws NyARException
        </member>
        <member name="M:GoblinXNA.Device.Vision.Marker.MarkerDetector.getARCodeIndex(System.Int32)">
            i_indexのマーカーのARCodeインデックスを返します。
            
            @param i_index
            マーカーのインデックス番号を指定します。 直前に実行したdetectMarkerLiteの戻り値未満かつ0以上である必要があります。
            @return
        </member>
        <member name="M:GoblinXNA.Device.Vision.Marker.MarkerDetector.setContinueMode(System.Boolean)">
            getTransmationMatrixの計算モードを設定します。
            
            @param i_is_continue
            TRUEなら、transMatContinueを使用します。 FALSEなら、transMatを使用します。
        </member>
        <member name="M:GoblinXNA.Device.Vision.Marker.MarkerDetector.RleDetector.onSquareDetect(jp.nyatla.nyartoolkit.cs.core.NyARIntCoordinates,System.Int32[])">
            矩形が見付かるたびに呼び出されます。
            発見した矩形のパターンを検査して、方位を考慮した頂点データを確保します。
        </member>
        <member name="T:GoblinXNA.Device.Vision.Marker.MarkerException">
            <summary>
            An exception class specific to optical marker tracking functionalities.
            </summary>
        </member>
        <member name="T:GoblinXNA.Device.Vision.Marker.NyARToolkitIdTracker">
            <summary>
            A marker tracker implementation using NyARToolkit 4.0.1 for ID-based markers
            </summary>
        </member>
        <member name="T:GoblinXNA.Device.Vision.Marker.NyARToolkitIdTracker.ComputationMethod">
            <summary>
            An enum that defines how the resulting transform should be computed from all visible markers.
            </summary>
            <remarks>
            For Custom method, you must set the ComputeTransform delegate property.
            </remarks>
        </member>
        <member name="T:GoblinXNA.Device.Vision.Marker.NyARToolkitIdTracker.ComputeMultiMarkeTransform">
            <summary>
            Computes the resulting transform based on the visible markers' transforms and their confidence values.
            </summary>
            <param name="transforms">The list of visible markers' transforms</param>
            <param name="confidences">The list of visible markers' confidence values</param>
            <param name="result">The computed transform</param>
        </member>
        <member name="T:GoblinXNA.Device.Vision.Marker.NyARToolkitTracker">
            <summary>
            A marker tracker implementation using NyARToolkit 3.0.0
            </summary>
        </member>
        <member name="F:GoblinXNA.Device.Vision.Marker.NyARToolkitTracker.camProjMat">
            <summary>
            The object ID that we are working with
            </summary>
        </member>
        <member name="M:GoblinXNA.Device.Vision.Marker.NyARToolkitTracker.#ctor">
            <summary>
            Creates an ARTag marker tracker.
            </summary>
        </member>
        <member name="M:GoblinXNA.Device.Vision.Marker.NyARToolkitTracker.InitTracker(System.Object[])">
            <summary>
            Initilizes the marker tracker with a set of configuration parameters.
            Five parameters are expected: int imgWidth, int imgHeight, String cameraFilename, 
            int threshold, bool continuousMode
            </summary>
            <param name="configs">A set of configuration parameters</param>
        </member>
        <member name="M:GoblinXNA.Device.Vision.Marker.NyARToolkitTracker.AssociateMarker(System.Object[])">
            <summary>
            Associates a marker with an identifier so that the identifier can be used to find this
            marker after processing the image. 
            </summary>
            <param name="markerConfigs">A set of parameters that identifies a maker. (e.g., for
            ARTag, this parameter would be the marker array name or marker ID)</param>
            <returns>An identifier for this marker object</returns>
        </member>
        <member name="M:GoblinXNA.Device.Vision.Marker.NyARToolkitTracker.FindMarker(System.Object)">
            <summary>
            Checks whether a marker identified by 'markerID' is found in the processed image
            after calling ProcessImage(...) method.
            </summary>
            <param name="markerID">An ID associated with a marker returned from AssociateMarker(...)
            method.</param>
            <returns>A boolean value representing whether a marker was found</returns>
        </member>
        <member name="M:GoblinXNA.Device.Vision.Marker.NyARToolkitTracker.GetMarkerTransform">
            <summary>
            Gets the pose transformation of the found marker after calling the FindMarker(...) method.
            </summary>
            <remarks>
            This method should be called if and only if FindMarker(...) method returned true for
            the marker you're looking for. 
            </remarks>
            <returns>The pose transformation of a found marker</returns>
        </member>
        <member name="M:GoblinXNA.Device.Vision.Marker.NyARToolkitTracker.Dispose">
            <summary>
            Disposes this marker tracker.
            </summary>
        </member>
        <member name="P:GoblinXNA.Device.Vision.Marker.NyARToolkitTracker.ZNearPlane">
            <summary>
            Gets or sets the near clipping plane used to compute CameraProjection.
            The default value is 10.
            </summary>
            <remarks>
            This property should be set before calling InitTracker(...).
            </remarks>
        </member>
        <member name="P:GoblinXNA.Device.Vision.Marker.NyARToolkitTracker.ZFarPlane">
            <summary>
            Gets or sets the far clipping plane used to compute CameraProjection.
            The default value is 2000.
            </summary>
            <remarks>
            This property should be set before calling InitTracker(...).
            </remarks>
        </member>
        <member name="P:GoblinXNA.Device.Vision.Marker.NyARToolkitTracker.EnableTracking">
            <summary>
            Gets or sets whether to enable the tracking.
            </summary>
        </member>
        <member name="P:GoblinXNA.Device.Vision.Marker.NyARToolkitTracker.ComputeTransform">
            <summary>
            Gets or sets the function used to compute the transform of marker array using all visible markers.
            </summary>
        </member>
        <member name="T:GoblinXNA.Device.Vision.Marker.NyARToolkitTracker.ComputationMethod">
            <summary>
            An enum that defines how the resulting transform should be computed from all visible markers.
            </summary>
            <remarks>
            For Custom method, you must set the ComputeTransform delegate property.
            </remarks>
        </member>
        <member name="T:GoblinXNA.Device.Vision.Marker.NyARToolkitTracker.ComputeMultiMarkeTransform">
            <summary>
            Computes the resulting transform based on the visible markers' transforms and their confidence values.
            </summary>
            <param name="transforms">The list of visible markers' transforms</param>
            <param name="confidences">The list of visible markers' confidence values</param>
            <param name="result">The computed transform</param>
        </member>
        <member name="T:GoblinXNA.Device.Vision.Marker.Threshold">
            <summary>
            A full copy of NyARRasterFilter_ARToolkitThreshold from NyARToolkitCS library, but with modification
            for optimizing binarization of RGBA color routine.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:GoblinXNA.Device.Vision.Marker.Threshold.setThreshold(System.Int32)" -->
        <member name="T:GoblinXNA.GoblinEnums">
            <summary>
            A collection of enums used in the GoblinXNA framework
            </summary>
        </member>
        <member name="T:GoblinXNA.GoblinEnums.Orientation">
            <summary>
            An enum that describes the orientation of a component.
            </summary>
        </member>
        <member name="F:GoblinXNA.GoblinEnums.Orientation.Horizontal">
            <summary>
            Horizontal orientation
            </summary>
        </member>
        <member name="F:GoblinXNA.GoblinEnums.Orientation.Vertical">
            <summary>
            Vertical orientation
            </summary>
        </member>
        <member name="T:GoblinXNA.GoblinEnums.HorizontalAlignment">
            <summary>
            An enum that describes the horizontal alignment of, usually, a textual display.
            </summary>
        </member>
        <member name="F:GoblinXNA.GoblinEnums.HorizontalAlignment.Left">
            <summary>
            Aligned on the left edge of a certain bound
            </summary>
        </member>
        <member name="F:GoblinXNA.GoblinEnums.HorizontalAlignment.Center">
            <summary>
            Aligned on the center of a certain bound
            </summary>
        </member>
        <member name="F:GoblinXNA.GoblinEnums.HorizontalAlignment.Right">
            <summary>
            Aligned on the right edge of a certain bound
            </summary>
        </member>
        <member name="F:GoblinXNA.GoblinEnums.HorizontalAlignment.None">
            <summary>
            No alignment
            </summary>
        </member>
        <member name="T:GoblinXNA.GoblinEnums.VerticalAlignment">
            <summary>
            An enum that describes the vertical alignment of, usually, a textual display.
            </summary>
        </member>
        <member name="F:GoblinXNA.GoblinEnums.VerticalAlignment.Top">
            <summary>
            Aligned on the top edge of a certain bound
            </summary>
        </member>
        <member name="F:GoblinXNA.GoblinEnums.VerticalAlignment.Center">
            <summary>
            Aligned on the center of a certain bound
            </summary>
        </member>
        <member name="F:GoblinXNA.GoblinEnums.VerticalAlignment.Bottom">
            <summary>
            Aligned on the bottom edge of a certain bound
            </summary>
        </member>
        <member name="F:GoblinXNA.GoblinEnums.VerticalAlignment.None">
            <summary>
            No alignnment
            </summary>
        </member>
        <member name="T:GoblinXNA.GoblinEnums.BorderFactory">
            <summary>
            An enum that describes the border type.
            </summary>
            <remarks>
            This enum is only used for G2DPanel class
            </remarks>
        </member>
        <member name="F:GoblinXNA.GoblinEnums.BorderFactory.EmptyBorder">
            <summary>
            An empty boarder
            </summary>
        </member>
        <member name="F:GoblinXNA.GoblinEnums.BorderFactory.EtchedBorder">
            <summary>
            A border with etched line decoration
            </summary>
        </member>
        <member name="F:GoblinXNA.GoblinEnums.BorderFactory.LineBorder">
            <summary>
            A border with normal line decoration
            </summary>
        </member>
        <member name="T:GoblinXNA.GoblinEnums.DisplayConfig">
            <summary>
            Defines how 3D User Interface objects are placed in the world.
            </summary>
        </member>
        <member name="F:GoblinXNA.GoblinEnums.DisplayConfig.DisplayFixed">
            <summary>
            Fixed to the display
            </summary>
        </member>
        <member name="F:GoblinXNA.GoblinEnums.DisplayConfig.ObjectFixed">
            <summary>
            Fixed to an object
            </summary>
        </member>
        <member name="F:GoblinXNA.GoblinEnums.DisplayConfig.SurroundFixed">
            <summary>
            Fixed to the viewer's surrounding
            </summary>
        </member>
        <member name="F:GoblinXNA.GoblinEnums.DisplayConfig.WorldFixed">
            <summary>
            Fixed to the world
            </summary>
        </member>
        <member name="T:GoblinXNA.GoblinException">
            <summary>
            An Exception class thrown in the GoblinXNA framework
            </summary>
        </member>
        <member name="M:GoblinXNA.GoblinException.#ctor(System.String)">
            <summary>
            Creates an GoblinXNA exception with the specified error message
            </summary>
            <param name="errMsg">An error message</param>
        </member>
        <member name="T:GoblinXNA.Graphics.PrimitiveModel">
            <summary>
            An implementation of IModel interface for models created with CustomMesh.
            </summary>
        </member>
        <member name="T:GoblinXNA.Graphics.IModel">
            <summary>
            Model encapsulates all the model-related information needed for rendering.
            </summary>
        </member>
        <member name="M:GoblinXNA.Graphics.IModel.Dispose">
            <summary>
            Disposes of model contents.
            </summary>
        </member>
        <member name="M:GoblinXNA.Graphics.IModel.CopyGeometry(GoblinXNA.Graphics.IModel)">
            <summary>
            Copies only the geometry (Mesh, CustomMesh, AnimatedMesh, 
            MinimumBoundingBox, MinimumBoundingSphere, TriangleCount and Transforms)
            </summary>
            <param name="model">A source model from which to copy</param>
        </member>
        <member name="M:GoblinXNA.Graphics.IModel.Render(Microsoft.Xna.Framework.Matrix@,GoblinXNA.Graphics.Material)">
            <summary>
            Renders the model itself as well as the minimum bounding box if showBoundingBox
            is true. By default, SimpleEffectShader is used to render the model.
            </summary>
            <remarks>
            This function is called automatically to render the model, so do not call this method
            </remarks>
            <param name="material">Material properties of this model</param>
            <param name="renderMatrix">Transform of this model</param>
        </member>
        <member name="M:GoblinXNA.Graphics.IModel.PrepareShadows(Microsoft.Xna.Framework.Matrix@)">
            <summary>
            
            </summary>
            <param name="renderMatrix"></param>
        </member>
        <member name="P:GoblinXNA.Graphics.IModel.UseLighting">
            <summary>
            Gets or sets whether lighting should be used when rendering this model.
            </summary>
        </member>
        <member name="P:GoblinXNA.Graphics.IModel.ShadowAttribute">
            <summary>
            Gets or sets how this model will be used when shadow mapping is in use.
            </summary>
        </member>
        <member name="P:GoblinXNA.Graphics.IModel.Shader">
            <summary>
            Gets or sets the shader to use for rendering this model
            </summary>
        </member>
        <member name="P:GoblinXNA.Graphics.IModel.ShaderTechnique">
            <summary>
            Gets or sets the shader technique to use
            </summary>
        </member>
        <member name="P:GoblinXNA.Graphics.IModel.AfterEffectShaders">
            <summary>
            Gets or sets a list of after effect shaders to use for rendering this model
            </summary>
        </member>
        <member name="P:GoblinXNA.Graphics.IModel.MinimumBoundingBox">
            <summary>
            Gets the minimum bounding box used for display and by the physics engine
            </summary>
        </member>
        <member name="P:GoblinXNA.Graphics.IModel.MinimumBoundingSphere">
            <summary>
            Gets the minimum bounding sphere that bounds this model mesh
            </summary>
        </member>
        <member name="P:GoblinXNA.Graphics.IModel.ShowBoundingBox">
            <summary>
            Gets or sets whether to draw the minimum bounding box around the model
            </summary>
        </member>
        <member name="P:GoblinXNA.Graphics.IModel.ContainsTransparency">
            <summary>
            Gets or sets whether the texture applied to this model contains
            transparency. Make sure to set this to true if your model contains transparency,
            otherwise, everything will be drawn in opaque color by default for optimization
            purpose.
            </summary>
        </member>
        <member name="P:GoblinXNA.Graphics.IModel.OffsetTransform">
            <summary>
            Gets the offset transformation from the origin of the world coordinate
            </summary>
            <remarks>
            If not provided, this transform will be calculated based on the following equation:
            OffsetTranslation.Translation = (MinimumBoundingBox.Min + MinimumBoundingBox.Max) / 2.
            In this case, no rotation offset will be calculated.
            </remarks>
        </member>
        <member name="P:GoblinXNA.Graphics.IModel.OffsetToOrigin">
            <summary>
            Gets or sets whether to relocate the model to the origin. Each model has its 
            position stored in the model file, but if you want to relocate the model to the 
            origin instead of locating it based on the position stored in the file, you should
            set this to true.
            </summary>
        </member>
        <member name="P:GoblinXNA.Graphics.IModel.TriangleCount">
            <summary>
            Gets the triangle count of this model
            </summary>
        </member>
        <member name="T:GoblinXNA.Physics.IPhysicsMeshProvider">
            <summary>
            An interface for a mesh provider for physics simulation.
            </summary>
        </member>
        <member name="P:GoblinXNA.Physics.IPhysicsMeshProvider.Vertices">
            <summary>
            Gets all of the vertices in the mesh.
            </summary>
        </member>
        <member name="P:GoblinXNA.Physics.IPhysicsMeshProvider.Indices">
            <summary>
            Gets all of the indices that are used to construct the mesh.
            </summary>
        </member>
        <member name="P:GoblinXNA.Physics.IPhysicsMeshProvider.PrimitiveType">
            <summary>
            Gets the primitive type of all of the triangles in the mesh.
            NOTE: If the mesh contains multiple different primitive types, then this won't work.
            </summary>
        </member>
        <member name="M:GoblinXNA.Graphics.PrimitiveModel.#ctor(GoblinXNA.Graphics.CustomMesh)">
            <summary>
            Creates a model with VertexBuffer and IndexBuffer.
            </summary>
            <param name="customMesh">A mesh defined with VertexBuffer and IndexBuffer</param>
        </member>
        <member name="M:GoblinXNA.Graphics.PrimitiveModel.CalculateMinimumBoundingBox">
            <summary>
            Calculates the minimum bounding box that fits this model.
            </summary>
        </member>
        <member name="M:GoblinXNA.Graphics.PrimitiveModel.CopyGeometry(GoblinXNA.Graphics.IModel)">
            <summary>
            Copies only the geometry (Mesh, customMesh, AnimatedMesh, 
            MinimumBoundingBox, MinimumBoundingSphere, TriangleCount and Transforms)
            </summary>
            <param name="model">A source model from which to copy</param>
        </member>
        <member name="M:GoblinXNA.Graphics.PrimitiveModel.Render(Microsoft.Xna.Framework.Matrix@,GoblinXNA.Graphics.Material)">
            <summary>
            Renders the model itself as well as the minimum bounding box if showBoundingBox
            is true. By default, SimpleEffectShader is used to render the model.
            </summary>
            <remarks>
            This function is called automatically to render the model, so do not call this method
            </remarks>
            <param name="material">Material properties of this model</param>
            <param name="renderMatrix">Transform of this model</param>
        </member>
        <member name="M:GoblinXNA.Graphics.PrimitiveModel.SubmitGeometry">
            <summary>
            Submits the vertex and index streams to the shader
            </summary>
        </member>
        <member name="M:GoblinXNA.Graphics.PrimitiveModel.ResubmitGeometry">
            <summary>
            Submits the vertex and index streams to the shader without setting the index stream assuming
            it's already been set to the device
            </summary>
        </member>
        <member name="M:GoblinXNA.Graphics.PrimitiveModel.Dispose">
            <summary>
            Disposes of model contents.
            </summary>
        </member>
        <member name="P:GoblinXNA.Graphics.PrimitiveModel.UseLighting">
            <summary>
            Flag reflecting whether lighting should be used when rendering this model. 
            The default value is true.
            </summary>
        </member>
        <member name="P:GoblinXNA.Graphics.PrimitiveModel.ShadowAttribute">
            <summary>
            Gets or sets how this model will be used when shadow mapping is in use. The default value
            is ShadowAttribute.None. 
            </summary>
        </member>
        <member name="P:GoblinXNA.Graphics.PrimitiveModel.UseVertexColor">
            <summary>
            Gets or sets whether to use the vertex color instead of material information to
            render this model.
            </summary>
        </member>
        <member name="P:GoblinXNA.Graphics.PrimitiveModel.CustomMesh">
            <summary>
            Gets the mesh defined with VertexBuffer and IndexBuffer .
            </summary>
        </member>
        <member name="P:GoblinXNA.Graphics.PrimitiveModel.MinimumBoundingBox">
            <summary>
            Gets the minimum bounding box used for display and by the physics engine.
            </summary>
        </member>
        <member name="P:GoblinXNA.Graphics.PrimitiveModel.MinimumBoundingSphere">
            <summary>
            Gets the minimum bounding sphere that bounds this model mesh
            </summary>
        </member>
        <member name="P:GoblinXNA.Graphics.PrimitiveModel.OffsetTransform">
            <summary>
            Gets the offset transformation from the origin of the world coordinate.
            </summary>
            <remarks>
            If not provided, this transform will be calculated based on the following equation:
            OffsetTranslation.Translation = (MinimumBoundingBox.Min + MinimumBoundingBox.Max) / 2.
            In this case, no rotation offset will be calculated.
            </remarks>
        </member>
        <member name="P:GoblinXNA.Graphics.PrimitiveModel.OffsetToOrigin">
            <summary>
            Gets or sets whether to relocate the model to the origin. Each model has its 
            position stored in the model file, but if you want to relocate the model to the 
            origin instead of locating it based on the position stored in the file, you should
            set this to true. The default value is false.
            </summary>
        </member>
        <member name="P:GoblinXNA.Graphics.PrimitiveModel.ShowBoundingBox">
            <summary>
            Gets or sets whether to draw the minimum bounding box around the model.
            The default value is false.
            </summary>
        </member>
        <member name="P:GoblinXNA.Graphics.PrimitiveModel.TriangleCount">
            <summary>
            Gets the triangle count of this model
            </summary>
        </member>
        <member name="P:GoblinXNA.Graphics.PrimitiveModel.ShaderName">
            <summary>
            Gets or sets the name of the shader used to illuminate this model. The default value 
            is SimpleEffectShader.
            </summary>
            <remarks>
            This information is necessary for saving and loading scene graph from an XML file.
            </remarks>
        </member>
        <member name="P:GoblinXNA.Graphics.PrimitiveModel.CustomShapeParameters">
            <summary>
            Gets or sets the parameters needed to be passed to a class that contructs a primitive
            shape. 
            </summary>
            <remarks>
            This information is necessary for saving and loading scene graph from an XML file.
            </remarks>
        </member>
        <member name="T:GoblinXNA.Graphics.CustomMesh">
            <summary>
            A mesh defined using XNA's geometry primitives
            </summary>
        </member>
        <member name="M:GoblinXNA.Graphics.CustomMesh.#ctor">
            <summary>
            Creates a mesh defined using XNA's geometry primitives
            </summary>
        </member>
        <member name="P:GoblinXNA.Graphics.CustomMesh.VertexBuffer">
            <summary>
            Gets or sets the VertexBuffer
            </summary>
        </member>
        <member name="P:GoblinXNA.Graphics.CustomMesh.IndexBuffer">
            <summary>
            Gets or sets the IndexBuffer 
            </summary>
        </member>
        <member name="P:GoblinXNA.Graphics.CustomMesh.PrimitiveType">
            <summary>
            Gets or sets primitive type used to render this mesh. 
            Default is PrimitiveType.TriangleList
            </summary>
        </member>
        <member name="P:GoblinXNA.Graphics.CustomMesh.VertexDeclaration">
            <summary>
            Gets or sets the vertex declaration
            </summary>
        </member>
        <member name="P:GoblinXNA.Graphics.CustomMesh.NumberOfVertices">
            <summary>
            Gets or sets the number of vertices set in VertexBuffer
            </summary>
        </member>
        <member name="P:GoblinXNA.Graphics.CustomMesh.NumberOfPrimitives">
            <summary>
            Gets or sets the number of primitive shapes defined with PrimitiveType
            </summary>
        </member>
        <member name="T:GoblinXNA.Graphics.DebugShapeRenderer">
            <summary>
            A system for handling rendering of various debug shapes.
            </summary>
            <remarks>
            The DebugShapeRenderer allows for rendering line-base shapes in a batched fashion. Games
            will call one of the many Add* methods to add a shape to the renderer and then a call to
            Draw will cause all shapes to be rendered. This mechanism was chosen because it allows
            game code to call the Add* methods wherever is most convenient, rather than having to
            add draw methods to all of the necessary objects.
            
            Additionally the renderer supports a lifetime for all shapes added. This allows for things
            like visualization of raycast bullets. The game would call the AddLine overload with the
            lifetime parameter and pass in a positive value. The renderer will then draw that shape
            for the given amount of time without any more calls to AddLine being required.
            
            The renderer's batching mechanism uses a cache system to avoid garbage and also draws as
            many lines in one call to DrawUserPrimitives as possible. If the renderer is trying to draw
            more lines than are allowed in the Reach profile, it will break them up into multiple draw
            calls to make sure the game continues to work for any game.</remarks>
        </member>
        <member name="M:GoblinXNA.Graphics.DebugShapeRenderer.Initialize">
            <summary>
            Initializes the renderer.
            </summary>
            <param name="graphicsDevice">The GraphicsDevice to use for rendering.</param>
        </member>
        <member name="M:GoblinXNA.Graphics.DebugShapeRenderer.AddLine(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Color)">
            <summary>
            Adds a line to be rendered for just one frame.
            </summary>
            <param name="a">The first point of the line.</param>
            <param name="b">The second point of the line.</param>
            <param name="color">The color in which to draw the line.</param>
        </member>
        <member name="M:GoblinXNA.Graphics.DebugShapeRenderer.AddLine(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Color,System.Single)">
            <summary>
            Adds a line to be rendered for a set amount of time.
            </summary>
            <param name="a">The first point of the line.</param>
            <param name="b">The second point of the line.</param>
            <param name="color">The color in which to draw the line.</param>
            <param name="life">The amount of time, in seconds, to keep rendering the line.</param>
        </member>
        <member name="M:GoblinXNA.Graphics.DebugShapeRenderer.AddTriangle(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Color)">
            <summary>
            Adds a triangle to be rendered for just one frame.
            </summary>
            <param name="a">The first vertex of the triangle.</param>
            <param name="b">The second vertex of the triangle.</param>
            <param name="c">The third vertex of the triangle.</param>
            <param name="color">The color in which to draw the triangle.</param>
        </member>
        <member name="M:GoblinXNA.Graphics.DebugShapeRenderer.AddTriangle(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Color,System.Single)">
            <summary>
            Adds a triangle to be rendered for a set amount of time.
            </summary>
            <param name="a">The first vertex of the triangle.</param>
            <param name="b">The second vertex of the triangle.</param>
            <param name="c">The third vertex of the triangle.</param>
            <param name="color">The color in which to draw the triangle.</param>
            <param name="life">The amount of time, in seconds, to keep rendering the triangle.</param>
        </member>
        <member name="M:GoblinXNA.Graphics.DebugShapeRenderer.AddBoundingFrustum(Microsoft.Xna.Framework.BoundingFrustum,Microsoft.Xna.Framework.Color)">
            <summary>
            Adds a frustum to be rendered for just one frame.
            </summary>
            <param name="frustum">The frustum to render.</param>
            <param name="color">The color in which to draw the frustum.</param>
        </member>
        <member name="M:GoblinXNA.Graphics.DebugShapeRenderer.AddBoundingFrustum(Microsoft.Xna.Framework.BoundingFrustum,Microsoft.Xna.Framework.Color,System.Single)">
            <summary>
            Adds a frustum to be rendered for a set amount of time.
            </summary>
            <param name="frustum">The frustum to render.</param>
            <param name="color">The color in which to draw the frustum.</param>
            <param name="life">The amount of time, in seconds, to keep rendering the frustum.</param>
        </member>
        <member name="M:GoblinXNA.Graphics.DebugShapeRenderer.AddBoundingBox(Microsoft.Xna.Framework.BoundingBox,Microsoft.Xna.Framework.Color)">
            <summary>
            Adds a bounding box to be rendered for just one frame.
            </summary>
            <param name="box">The bounding box to render.</param>
            <param name="color">The color in which to draw the bounding box.</param>
        </member>
        <member name="M:GoblinXNA.Graphics.DebugShapeRenderer.AddBoundingBox(Microsoft.Xna.Framework.BoundingBox,Microsoft.Xna.Framework.Color,System.Single)">
            <summary>
            Adds a bounding box to be rendered for a set amount of time.
            </summary>
            <param name="box">The bounding box to render.</param>
            <param name="color">The color in which to draw the bounding box.</param>
            <param name="life">The amount of time, in seconds, to keep rendering the bounding box.</param>
        </member>
        <member name="M:GoblinXNA.Graphics.DebugShapeRenderer.AddBoundingSphere(Microsoft.Xna.Framework.BoundingSphere,Microsoft.Xna.Framework.Color)">
            <summary>
            Adds a bounding sphere to be rendered for just one frame.
            </summary>
            <param name="sphere">The bounding sphere to render.</param>
            <param name="color">The color in which to draw the bounding sphere.</param>
        </member>
        <member name="M:GoblinXNA.Graphics.DebugShapeRenderer.AddBoundingSphere(Microsoft.Xna.Framework.BoundingSphere,Microsoft.Xna.Framework.Color,System.Single)">
            <summary>
            Adds a bounding sphere to be rendered for a set amount of time.
            </summary>
            <param name="sphere">The bounding sphere to render.</param>
            <param name="color">The color in which to draw the bounding sphere.</param>
            <param name="life">The amount of time, in seconds, to keep rendering the bounding sphere.</param>
        </member>
        <member name="M:GoblinXNA.Graphics.DebugShapeRenderer.Draw(System.Single)">
            <summary>
            Draws the shapes that were added to the renderer and are still alive.
            </summary>
            <param name="gameTime">The current game timestamp.</param>
        </member>
        <member name="M:GoblinXNA.Graphics.DebugShapeRenderer.InitializeSphere">
            <summary>
            Creates the unitSphere array of vertices.
            </summary>
        </member>
        <member name="M:GoblinXNA.Graphics.DebugShapeRenderer.CachedShapesSort(GoblinXNA.Graphics.DebugShapeRenderer.DebugShape,GoblinXNA.Graphics.DebugShapeRenderer.DebugShape)">
            <summary>
            A method used for sorting our cached shapes based on the size of their vertex arrays.
            </summary>
        </member>
        <member name="M:GoblinXNA.Graphics.DebugShapeRenderer.GetShapeForLines(System.Int32,System.Single)">
            <summary>
            Gets a DebugShape instance for a given line counta and lifespan.
            </summary>
        </member>
        <member name="F:GoblinXNA.Graphics.DebugShapeRenderer.DebugShape.Vertices">
            <summary>
            The array of vertices the shape can use.
            </summary>
        </member>
        <member name="F:GoblinXNA.Graphics.DebugShapeRenderer.DebugShape.LineCount">
            <summary>
            The number of lines to draw for this shape.
            </summary>
        </member>
        <member name="F:GoblinXNA.Graphics.DebugShapeRenderer.DebugShape.Lifetime">
            <summary>
            The length of time to keep this shape visible.
            </summary>
        </member>
        <member name="T:GoblinXNA.Graphics.Environment">
            <summary>
            Defines the properties of environmental effects such as fog. This class can be passed to 
            IShader.SetParameters(IEnvironment) for rendering environmental effects.
            </summary>
        </member>
        <member name="M:GoblinXNA.Graphics.Environment.#ctor">
            <summary>
            Creates an environment object.
            </summary>
        </member>
        <member name="M:GoblinXNA.Graphics.Environment.Render">
            <summary>
            Renders this environment
            </summary>
        </member>
        <member name="P:GoblinXNA.Graphics.Environment.FogStartDistance">
            <summary>
            Gets or sets the start distance of fog. The default value is -1.
            </summary>
        </member>
        <member name="P:GoblinXNA.Graphics.Environment.FogEndDistance">
            <summary>
            Gets or sets the ending distance of fog. The default value is -1.
            </summary>
        </member>
        <member name="P:GoblinXNA.Graphics.Environment.FogEnabled">
            <summary>
            Gets or sets whether the fog is enabled
            </summary>
        </member>
        <member name="P:GoblinXNA.Graphics.Environment.FogColor">
            <summary>
            Gets or sets the fog color in this environment. The default is (1, 1, 1, 1) which is opaque white.
            </summary>
        </member>
        <member name="P:GoblinXNA.Graphics.Environment.Shader">
            <summary>
            Gets or sets the shader to use for rendering this environment
            </summary>
        </member>
        <member name="T:GoblinXNA.Graphics.Geometry.Box">
            <summary>
            A box geometry primitive constructed with CustomMesh
            </summary>
        </member>
        <member name="M:GoblinXNA.Graphics.Geometry.Box.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Create a box with the given dimensions.
            </summary>
            <param name="xdim">X dimension</param>
            <param name="ydim">Y dimension</param>
            <param name="zdim">Z dimension</param>
        </member>
        <member name="M:GoblinXNA.Graphics.Geometry.Box.#ctor(System.Single)">
            <summary>
            Creates a box whose edges are the given length.
            </summary>
            <param name="length">Length of each side of the cube</param>
        </member>
        <member name="M:GoblinXNA.Graphics.Geometry.Box.#ctor(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Create a box with the given dimensions.
            </summary>
            <param name="dimension">Dimension of the box geometry</param>
        </member>
        <member name="M:GoblinXNA.Graphics.Geometry.Box.#ctor(System.String[])">
            <summary>
            Create a box from an XML input.
            </summary>
            <param name="xmlParams"></param>
        </member>
        <member name="T:GoblinXNA.Graphics.Geometry.Capsule">
            <summary>
            A capsule geometry primitive constructed with CustomMesh
            </summary>
        </member>
        <member name="M:GoblinXNA.Graphics.Geometry.Capsule.#ctor(System.Single,System.Single,System.Int32)">
            <summary>
            Creates a capsule (a cylinder with hemisphere caps) oriented along the Y axis. 
            If the height is less than radius * 2, then the height is clamped to radius * 2.
            </summary>
            <param name="radius">The radius of the hemisphere caps</param>
            <param name="height">The height of the capsule (including the hemisphere caps).
            If less than radius * 2, them clamped to radius * 2</param>
            <param name="slices">The number of subdivisions around the Y axis (similar to lines 
            of longitude). This has to be greater than 4 and less than 101.</param>
        </member>
        <member name="T:GoblinXNA.Graphics.Geometry.ChamferCylinder">
            <summary>
            A chamfer cylinder geometry primitive constructed with CustomMesh
            </summary>
        </member>
        <member name="M:GoblinXNA.Graphics.Geometry.ChamferCylinder.#ctor(System.Single,System.Single,System.Int32)">
            <summary>
            Creates a chamfer cylinder (a cylinder with spherical side) oriented along the Y axis. 
            </summary>
            <param name="radius">The radius of the cylinder at the base.</param>
            <param name="height">The height of the cylinder.</param>
            <param name="slices">The number of subdivisions around the Y axis (similar to lines 
            of longitude). This has to be greater than 4 and less than 101.</param>
        </member>
        <member name="T:GoblinXNA.Graphics.Geometry.Cylinder">
            <summary>
            A cylinder geometry primitive constructed with CustomMesh
            </summary>
        </member>
        <member name="M:GoblinXNA.Graphics.Geometry.Cylinder.#ctor(System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Creates a cylinder (actually a truncated cone) oriented along the Y axis. The base of the cylinder 
            is placed at Y = -height/2, and the top at height/2 = height. A cylinder is subdivided around 
            the Y axis into slices.
            </summary>
            <param name="bottom">Specifies the radius of the cylinder at y = -height/2.</param>
            <param name="top">Specifies the radius of the cylinder at y = height/2.</param>
            <param name="height">Specifies the height of the cylinder.</param>
            <param name="slices">
            Specifies the number of subdivisions around the Y axis. Should be greater than or equal to 3.
            </param>
        </member>
        <member name="T:GoblinXNA.Graphics.Geometry.Disk">
            <summary>
            A disk geometry primitive constructed with CustomMesh
            </summary>
        </member>
        <member name="M:GoblinXNA.Graphics.Geometry.Disk.#ctor(System.Single,System.Single,System.Int32,System.Boolean)">
            <summary>
            Creates a disk or annulus on the y = 0 plane. The disk has a radius of outer, and 
            contains a concentric circular hole with a radius of inner. If inner is 0, 
            then no hole is generated. The disk is subdivided around the Y axis into radial slices 
            (like pizza slices)
            </summary>
            <param name="inner">Specifies the inner radius of the disk (may be 0).</param>
            <param name="outer">Specifies the outer radius of the disk. Must be larger than
            the 'inner' radius</param>
            <param name="slices">Specifies the number of subdivisions around the Y axis. Must be
            larger than 2.</param>
            <param name="twoSided">Specifies whether to render both front and back side</param>
        </member>
        <member name="T:GoblinXNA.Graphics.Geometry.PartialDisk">
            <summary>
            A partial disk geometry primitive constructed with CustomMesh
            </summary>
        </member>
        <member name="M:GoblinXNA.Graphics.Geometry.PartialDisk.#ctor(System.Single,System.Single,System.Int32,System.Double,System.Double,System.Boolean)">
            <summary>
            Creates a partial disk on the Y = 0 plane. A partial disk is similar to a 
            full disk, except that only the subset of the disk from start through start + sweep is
            included (where 0 degrees is along the +Y axis, 90 degrees along the +X axis)
            </summary>
            <param name="inner">Specifies the inner radius of the partial disk (can be 0).</param>
            <param name="outer">Specifies the outer radius of the partial disk. Must be greater
            than the 'inner' radius.</param>
            <param name="slices">Specifies the number of subdivisions around the Z axis. Must be
            greater than 2.</param>
            <param name="start">Specifies the starting angle, in radians, of the disk portion.</param>
            <param name="sweep">Specifies the sweep angle, in radians, of the disk portion.</param>
            /// <param name="twoSided">Specifies whether to render both front and back side</param>
        </member>
        <member name="T:GoblinXNA.Graphics.Geometry.Sphere">
            <summary>
            A sphere geometry primitive constructed with CustomMesh
            </summary>
        </member>
        <member name="M:GoblinXNA.Graphics.Geometry.Sphere.#ctor(System.Single,System.Int32,System.Int32)">
            <summary>
            Creates a sphere of the given radius centered around the origin. The sphere 
            is subdivided around the Y axis into slices and along the Y axis into stacks 
            (similar to lines of longitude and latitude). 
            </summary>
            <param name="radius">Specifies the radius of the sphere.</param>
            <param name="slices">Specifies the number of subdivisions around the Y axis 
            (similar to lines of longitude). This has to be greater than 4 and less than 101.</param>
            <param name="stacks">Specifies the number of subdivisions along the Y axis 
            (similar to lines of latitude). This has to be greater than 4 and less than 101.</param>
        </member>
        <member name="T:GoblinXNA.Graphics.Geometry.TexturedBox">
            <summary>
            A box geometry primitive with texture coordinates constructed with CustomMesh
            </summary>
        </member>
        <member name="M:GoblinXNA.Graphics.Geometry.TexturedBox.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Create a box with the given dimensions. The texture coordinates are assigned
            using positional spherical mapping.
            </summary>
            <param name="xdim">X dimension</param>
            <param name="ydim">Y dimension</param>
            <param name="zdim">Z dimension</param>
        </member>
        <member name="M:GoblinXNA.Graphics.Geometry.TexturedBox.#ctor(System.Single)">
            <summary>
            Creates a box whose edges are the given length. The texture coordinates are assigned
            using positional spherical mapping.
            </summary>
            <param name="length">Length of each side of the cube</param>
        </member>
        <member name="M:GoblinXNA.Graphics.Geometry.TexturedBox.#ctor(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Create a box with the given dimensions. The texture coordinates are assigned
            using positional spherical mapping.
            </summary>
            <param name="dimension">Dimension of the box geometry</param>
        </member>
        <member name="M:GoblinXNA.Graphics.Geometry.TexturedBox.#ctor(System.String[])">
            <summary>
            Create a box from an XML input.
            </summary>
            <param name="xmlParams"></param>
        </member>
        <member name="T:GoblinXNA.Graphics.Geometry.TexturedPlane">
            <summary>
            A quad/plane geometry primitive with texture coordinates constructed with CustomMesh
            </summary>
        </member>
        <member name="M:GoblinXNA.Graphics.Geometry.TexturedPlane.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Create a plane with the given dimensions and texture coordinates.
            </summary>
            <param name="xdim">X dimension</param>
            <param name="ydim">Y dimension</param>
            <param name="texCoordX"></param>
            <param name="texCoordY"></param>
            <param name="texCoordWidth"></param>
            <param name="texCoordHeight"></param>
        </member>
        <member name="M:GoblinXNA.Graphics.Geometry.TexturedPlane.#ctor(System.Single,System.Single)">
            <summary>
            Create a plane with the given dimensions.
            </summary>
            <param name="xdim"></param>
            <param name="ydim"></param>
        </member>
        <member name="M:GoblinXNA.Graphics.Geometry.TexturedPlane.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Create a plane with the given dimensions and texture scale factor.
            </summary>
            <param name="xdim"></param>
            <param name="ydim"></param>
            <param name="texCoordScale"></param>
        </member>
        <member name="M:GoblinXNA.Graphics.Geometry.TexturedPlane.#ctor(System.String[])">
            <summary>
            Create a plane from an XML input.
            </summary>
            <param name="xmlParams"></param>
        </member>
        <member name="T:GoblinXNA.Graphics.Geometry.TexturedSphere">
            <summary>
            A sphere geometry primitive with texture coordinates constructed with CustomMesh
            </summary>
        </member>
        <member name="M:GoblinXNA.Graphics.Geometry.TexturedSphere.#ctor(System.Single,System.Int32,System.Int32)">
            <summary>
            Creates a sphere of the given radius centered around the origin. The sphere 
            is subdivided around the Y axis into slices and along the Y axis into stacks 
            (similar to lines of longitude and latitude). The texture coordinates are assigned
            using normal spherical mapping.
            </summary>
            <param name="radius">Specifies the radius of the sphere.</param>
            <param name="slices">Specifies the number of subdivisions around the Y axis 
            (similar to lines of longitude). This has to be greater than 4 and less than 101.</param>
            <param name="stacks">Specifies the number of subdivisions along the Y axis 
            (similar to lines of latitude). This has to be greater than 4 and less than 101.</param>
        </member>
        <member name="T:GoblinXNA.Graphics.Geometry.Torus">
            <summary>
            A torus geometry primitive constructed with CustomMesh
            </summary>
        </member>
        <member name="M:GoblinXNA.Graphics.Geometry.Torus.#ctor(System.Single,System.Single,System.Int32,System.Int32)">
            <summary>
            Creates a torus of the given inner and outer radius around the Y axis centered around 
            the origin. The torus is subdivided around the Y axis into slices and around the
            torus tubes into stacks.
            </summary>
            <param name="inner">The inner radius of the torus. This has to be greater than or
            equal to 0 and less than outer radius.</param>
            <param name="outer">The outer radius of the torus. This has to be greater than 0
            and larger than the inner radius</param>
            <param name="slices">Specifies the number of subdivisions around the Y axis.
            This has to be greater than 4 and greater than 101.</param>
            <param name="stacks">Specifies the number of subdivisions around the torus tube. 
            This has to be greater than 4 and greater than 101.</param>
        </member>
        <member name="T:GoblinXNA.Graphics.Geometry.VertexPositionNormal">
            <summary>
            Custom vertex format with position and normal information
            </summary>
        </member>
        <member name="P:GoblinXNA.Graphics.Geometry.VertexPositionNormal.Position">
            <summary>
            Gets or sets the position of this vertex.
            </summary>
        </member>
        <member name="P:GoblinXNA.Graphics.Geometry.VertexPositionNormal.Normal">
            <summary>
            Gets or sets the normal of this vertex.
            </summary>
        </member>
        <member name="P:GoblinXNA.Graphics.Geometry.VertexPositionNormal.SizeInBytes">
            <summary>
            Gets the size of this vertex structure in bytes.
            </summary>
        </member>
        <member name="T:GoblinXNA.Graphics.ShadowAttribute">
            <summary>
            An enum that indicates how the object will be used in a shadow mapping shader.
            </summary>
        </member>
        <member name="F:GoblinXNA.Graphics.ShadowAttribute.None">
            <summary>
            Indicates that this model does not cast or receive shadow when shadow mapping is in use.
            </summary>
        </member>
        <member name="F:GoblinXNA.Graphics.ShadowAttribute.ReceiveOnly">
            <summary>
            Indicates that this model receives shadows cast by other objects that can cast shadows, but
            does not cast shadows on other objects.
            </summary>
        </member>
        <member name="F:GoblinXNA.Graphics.ShadowAttribute.ReceiveCast">
            <summary>
            Indicates that this model receives shadows cast by other objects that can cast shadows, and
            also cast shadows on other objects that can receive shadows. This model receives self-casted
            shadows.
            </summary>
        </member>
        <member name="T:GoblinXNA.Graphics.IModelLoader">
            <summary>
            Utility class for loading models
            </summary>
        </member>
        <member name="M:GoblinXNA.Graphics.IModelLoader.Load(System.String,System.String)">
            <summary>
            Load model from file.
            </summary>
            <param name="path">The directory path where the model file is located</param>
            <param name="modelAssetName">The model's asset name, NOT the actual model file name</param>
            <returns></returns>
        </member>
        <member name="F:GoblinXNA.Graphics.LightType.Point">
            <summary>
            A point source is defined as a single point in space. The intensity of the light is
            attenuated with three attenuation coefficients. 
            </summary>
        </member>
        <member name="F:GoblinXNA.Graphics.LightType.Directional">
            <summary>
            A directional source is described by the direction in which it is pointing, and 
            is useful for modeling a light source that is effectively infinitely far away from 
            the objects it illuminates.
            </summary>
        </member>
        <member name="F:GoblinXNA.Graphics.LightType.SpotLight">
            <summary>
            A spotlight is useful for creating dramatic localized lighting effects. It is defined 
            by its position, the direction in which it is pointing, and the width of the beam of 
            light it produces.
            </summary>
        </member>
        <member name="T:GoblinXNA.Graphics.LightSource">
            <summary>
            Light sources are used to illuminate the world.
            </summary>
        </member>
        <member name="M:GoblinXNA.Graphics.LightSource.#ctor">
            <summary>
            Creates a light source with default configurations (see each field for the default values)
            </summary>
        </member>
        <member name="M:GoblinXNA.Graphics.LightSource.#ctor(GoblinXNA.Graphics.LightSource)">
            <summary>
            Copy constructor
            </summary>
            <param name="light"></param>
        </member>
        <member name="P:GoblinXNA.Graphics.LightSource.Type">
            <summary>
            Gets or sets the type of this light (Point, Directional, or SpotLight) 
            The default value is LightType.Directional.
            </summary>
        </member>
        <member name="P:GoblinXNA.Graphics.LightSource.Enabled">
            <summary>
            Gets or sets whether this light source is enabled. The default value is true.
            </summary>
        </member>
        <member name="P:GoblinXNA.Graphics.LightSource.Diffuse">
            <summary>
            Gets or sets the diffuse component of this light. The default value is Color.Black.
            </summary>
        </member>
        <member name="P:GoblinXNA.Graphics.LightSource.Specular">
            <summary>
            Gets or sets the specular component of this light. The default value is Color.Black.
            </summary>
        </member>
        <member name="P:GoblinXNA.Graphics.LightSource.Position">
            <summary>
            Gets or sets the position of this light source. This property is used only for Point
            and SpotLight types. The default value is vector (0, 0, 0).
            </summary>
        </member>
        <member name="P:GoblinXNA.Graphics.LightSource.TransformedPosition">
            <summary>
            Gets the transformed version of the Position property by the associated LightNode's
            WorldTransformation.
            </summary>
        </member>
        <member name="P:GoblinXNA.Graphics.LightSource.Direction">
            <summary>
            Gets or sets the direction of this light source. This property is used
            only for Directional and SpotLight types. The default value is vector (0, 0, 0).
            </summary>
        </member>
        <member name="P:GoblinXNA.Graphics.LightSource.TransformedDirection">
            <summary>
            Gets the transformed version of the Direction property by the associated LightNode's
            WorldTransformation.
            </summary>
        </member>
        <member name="P:GoblinXNA.Graphics.LightSource.Attenuation0">
            <summary>
            Gets or sets the zero-th degree attenuation coefficient for estimating light energy attenuation. 
            This property is used only for Point and SpotLight types. The default value is 0.01f.
            </summary>
        </member>
        <member name="P:GoblinXNA.Graphics.LightSource.Attenuation1">
            <summary>
            Gets or sets the first degree attenuation coefficient for estimating light energy attenuation. 
            This property is used only for Point and SpotLight types. The default value is 0.1f.
            </summary>
        </member>
        <member name="P:GoblinXNA.Graphics.LightSource.Attenuation2">
            <summary>
            Gets or sets the second degree attenuation coefficient for estimating light energy attenuation. 
            This property is used only for Point and SpotLight types. The default value is 0.0f.
            </summary>
        </member>
        <member name="P:GoblinXNA.Graphics.LightSource.InnerConeAngle">
            <summary>
            Gets or sets the inner radius of the spotlight where the light begins to be attenuated. 
            This property is used only for SpotLight type. The default value is 0.2f * PI (36 degrees).
            </summary>
        </member>
        <member name="P:GoblinXNA.Graphics.LightSource.OuterConeAngle">
            <summary>
            Gets or sets the outer radius of the spotlight where the light intensity (ambient) is zero. 
            The default value is 0.3f * PI (54 degrees).
            </summary>
        </member>
        <member name="P:GoblinXNA.Graphics.LightSource.Range">
            <summary>
            Gets or sets the effective range of this light source. This property is used only for
            Point and SpotLight types. The default value is 500.
            </summary>
        </member>
        <member name="T:GoblinXNA.Graphics.Material">
            <summary>
            Material defines the surface properties of the model geometry such as its color, transparency,
            and shininess.
            </summary>
        </member>
        <member name="M:GoblinXNA.Graphics.Material.#ctor">
            <summary>
            Creates a default material. See each properties for default values.
            </summary>
        </member>
        <member name="P:GoblinXNA.Graphics.Material.SpecularPower">
            <summary>
            Gets or sets the shininess of this material when highlighted with lights.
            The larger the specular power, the smaller the size of the specular highlight.
            The default value is 10.0f
            </summary>
        </member>
        <member name="P:GoblinXNA.Graphics.Material.Diffuse">
            <summary>
            Gets or sets the diffuse color of this material.
            The default value is Color.Black
            </summary>
        </member>
        <member name="P:GoblinXNA.Graphics.Material.Ambient">
            <summary>
            Gets or sets the ambient color of this material.
            The default value is Color.Black
            </summary>
        </member>
        <member name="P:GoblinXNA.Graphics.Material.Specular">
            <summary>
            Gets or sets the specular color of this material.
            The default value is Color.Black
            </summary>
        </member>
        <member name="P:GoblinXNA.Graphics.Material.Emissive">
            <summary>
            Gets or sets the color of the light this material emits. 
            The default value is Color.Black
            </summary>
        </member>
        <member name="P:GoblinXNA.Graphics.Material.HasTexture">
            <summary>
            Gets whether this material contains texture information.
            </summary>
        </member>
        <member name="P:GoblinXNA.Graphics.Material.Texture">
            <summary>
            Gets or sets the texture applied to this material.
            </summary>
        </member>
        <member name="P:GoblinXNA.Graphics.Material.HasChanged">
            <summary>
            Gets or sets whether there is a change in the material setting
            </summary>
            <remarks>
            Do not set this value in your application. It is set by the system.
            </remarks>
        </member>
        <member name="P:GoblinXNA.Graphics.Material.InternalEffect">
            <summary>
            Gets or sets the effect associated with model contents. Some model files include
            their own material information.
            </summary>
            <remarks>
            See XNA's reference manual for the details of an "Effect" class
            </remarks>
        </member>
        <member name="T:GoblinXNA.Graphics.Model">
            <summary>
            This implementation is suitable for DirectX models and primitive shapes.
            </summary>
        </member>
        <member name="M:GoblinXNA.Graphics.Model.#ctor(Microsoft.Xna.Framework.Matrix[],Microsoft.Xna.Framework.Graphics.ModelMeshCollection)">
            <summary>
            Creates a model with information loaded from a model file
            </summary>
            <param name="transforms">Transforms applied to each model meshes</param>
            <param name="mesh">A collection of model meshes</param>
        </member>
        <member name="M:GoblinXNA.Graphics.Model.CalculateMinimumBoundingSphere">
            <summary>
            Calculates the minimum bounding sphere used for visibility testing against view frustum.
            </summary>
        </member>
        <member name="M:GoblinXNA.Graphics.Model.CalculateTriangleCount">
            <summary>
            Calcuates the triangle count of this model.
            </summary>
        </member>
        <member name="M:GoblinXNA.Graphics.Model.CalculateMinimumBoundingBox">
            <summary>
            Calculates the minimum bounding box that fits this model.
            </summary>
        </member>
        <member name="M:GoblinXNA.Graphics.Model.CopyGeometry(GoblinXNA.Graphics.IModel)">
            <summary>
            Copies only the geometry (Mesh, AnimatedMesh, 
            MinimumBoundingBox, MinimumBoundingSphere, TriangleCount and Transforms)
            </summary>
            <param name="model">A source model from which to copy</param>
        </member>
        <member name="M:GoblinXNA.Graphics.Model.UpdateAnimationTransforms(System.String,Microsoft.Xna.Framework.Matrix)">
            <summary>
            Updates the transforms of any animated meshes.
            </summary>
            <param name="meshName"></param>
            <param name="animationTransform"></param>
        </member>
        <member name="M:GoblinXNA.Graphics.Model.Render(Microsoft.Xna.Framework.Matrix@,GoblinXNA.Graphics.Material)">
            <summary>
            Renders the model itself as well as the minimum bounding box if showBoundingBox
            is true. By default, SimpleEffectShader is used to render the model.
            </summary>
            <remarks>
            This function is called automatically to render the model, so do not call this method
            </remarks>
            <param name="material">Material properties of this model</param>
            <param name="renderMatrix">Transform of this model</param>
        </member>
        <member name="M:GoblinXNA.Graphics.Model.SubmitGeometry">
            <summary>
            Submits the vertex and index streams to the shader
            </summary>
        </member>
        <member name="M:GoblinXNA.Graphics.Model.ResubmitGeometry">
            <summary>
            Submits the vertex and index streams to the shader without setting the index stream assuming
            it's already been set to the device
            </summary>
        </member>
        <member name="M:GoblinXNA.Graphics.Model.Dispose">
            <summary>
            Disposes of model contents.
            </summary>
        </member>
        <member name="P:GoblinXNA.Graphics.Model.UseLighting">
            <summary>
            Flag reflecting whether lighting should be used when rendering this model. 
            The default value is true.
            </summary>
        </member>
        <member name="P:GoblinXNA.Graphics.Model.UseInternalMaterials">
            <summary>
            Gets or sets whether to use the material setting set inside the model file.
            The default value is false.
            </summary>
        </member>
        <member name="P:GoblinXNA.Graphics.Model.ContainsTransparency">
            <summary>
            Gets or sets whether the model's internal texture or material contains
            transparency. Make sure to set this to true if your model contains transparency,
            otherwise, everything will be drawn in opaque color by default for optimization
            purpose.
            </summary>
            <remarks>Effective only if UseInternalMaterials property is set to true</remarks>
            <see cref="P:GoblinXNA.Graphics.Model.UseInternalMaterials"/>
        </member>
        <member name="P:GoblinXNA.Graphics.Model.ShadowAttribute">
            <summary>
            Gets or sets how this model will be used when shadow mapping is in use. The default value
            is ShadowAttribute.None. 
            </summary>
        </member>
        <member name="P:GoblinXNA.Graphics.Model.MinimumBoundingBox">
            <summary>
            Gets the minimum bounding box used for display and by the physics engine.
            </summary>
        </member>
        <member name="P:GoblinXNA.Graphics.Model.MinimumBoundingSphere">
            <summary>
            Gets the minimum bounding sphere that bounds this model mesh
            </summary>
        </member>
        <member name="P:GoblinXNA.Graphics.Model.OffsetTransform">
            <summary>
            Gets the offset transformation from the origin of the world coordinate.
            </summary>
            <remarks>
            If not provided, this transform will be calculated based on the following equation:
            OffsetTranslation.Translation = (MinimumBoundingBox.Min + MinimumBoundingBox.Max) / 2.
            In this case, no rotation offset will be calculated.
            </remarks>
        </member>
        <member name="P:GoblinXNA.Graphics.Model.OffsetToOrigin">
            <summary>
            Gets or sets whether to relocate the model to the origin. Each model has its 
            position stored in the model file, but if you want to relocate the model to the 
            origin instead of locating it based on the position stored in the file, you should
            set this to true. The default value is false.
            </summary>
        </member>
        <member name="P:GoblinXNA.Graphics.Model.ShowBoundingBox">
            <summary>
            Gets or sets whether to draw the minimum bounding box around the model.
            The default value is false.
            </summary>
        </member>
        <member name="P:GoblinXNA.Graphics.Model.TriangleCount">
            <summary>
            Gets the triangle count of this model
            </summary>
        </member>
        <member name="P:GoblinXNA.Graphics.Model.ResourceName">
            <summary>
            Gets or sets the name of the resource (asset name) used to create this model. 
            This name should not contain any extensions.
            </summary>
            <remarks>
            This information is necessary for saving and loading scene graph from an XML file.
            </remarks>
            <see cref="P:GoblinXNA.Graphics.Model.ModelLoaderName"/>
        </member>
        <member name="P:GoblinXNA.Graphics.Model.ModelLoaderName">
            <summary>
            Gets or sets the name of the model loader if this model was loaded using a specific
            model loader.
            </summary>
            <remarks>
            This information is necessary for saving and loading scene graph from an XML file if
            the ResourceName is specified.
            </remarks>
        </member>
        <member name="P:GoblinXNA.Graphics.Model.ShaderName">
            <summary>
            Gets or sets the name of the shader used to illuminate this model. The default value 
            is SimpleEffectShader.
            </summary>
            <remarks>
            This information is necessary for saving and loading scene graph from an XML file.
            </remarks>
        </member>
        <member name="T:GoblinXNA.Graphics.ModelLoader">
            <summary>
            Default implementation of model loader that can load DirectX model files including .x and .fbx
            </summary>
        </member>
        <member name="T:GoblinXNA.Graphics.ParticleEffects2D.ExplosionParticleEffect">
            <summary>
            ExplosionParticleSystem is a specialization of ParticleSystem which creates a
            fiery explosion. It should be combined with ExplosionSmokeParticleSystem for
            best effect.
            </summary>
        </member>
        <member name="T:GoblinXNA.Graphics.ParticleEffects2D.ParticleEffect">
            <summary>
            ParticleSystem is an abstract class that provides the basic functionality to
            create a particle effect. Different subclasses will have different effects,
            such as fire, explosions, and plumes of smoke. To use these subclasses, 
            simply call AddParticles, and pass in where the particles should exist
            </summary>
        </member>
        <member name="F:GoblinXNA.Graphics.ParticleEffects2D.ParticleEffect.minNumParticles">
            <summary>
            minNumParticles and maxNumParticles control the number of particles that are
            added when AddParticles is called. The number of particles will be a random
            number between minNumParticles and maxNumParticles.
            </summary>
        </member>
        <member name="F:GoblinXNA.Graphics.ParticleEffects2D.ParticleEffect.textureFilename">
            <summary>
            this controls the texture that the particle system uses. It will be used as
            an argument to ContentManager.Load.
            </summary>
        </member>
        <member name="F:GoblinXNA.Graphics.ParticleEffects2D.ParticleEffect.minInitialSpeed">
            <summary>
            minInitialSpeed and maxInitialSpeed are used to control the initial velocity
            of the particles. The particle's initial speed will be a random number 
            between these two. The direction is determined by the function 
            PickRandomDirection, which can be overriden.
            </summary>
        </member>
        <member name="F:GoblinXNA.Graphics.ParticleEffects2D.ParticleEffect.minAcceleration">
            <summary>
            minAcceleration and maxAcceleration are used to control the acceleration of
            the particles. The particle's acceleration will be a random number between
            these two. By default, the direction of acceleration is the same as the
            direction of the initial velocity.
            </summary>
        </member>
        <member name="F:GoblinXNA.Graphics.ParticleEffects2D.ParticleEffect.minRotationSpeed">
            <summary>
            minRotationSpeed and maxRotationSpeed control the particles' angular
            velocity: the speed at which particles will rotate. Each particle's rotation
            speed will be a random number between minRotationSpeed and maxRotationSpeed.
            Use smaller numbers to make particle systems look calm and wispy, and large 
            numbers for more violent effects.
            </summary>
        </member>
        <member name="F:GoblinXNA.Graphics.ParticleEffects2D.ParticleEffect.minLifetime">
            <summary>
            minLifetime and maxLifetime are used to control the lifetime. Each
            particle's lifetime will be a random number between these two. Lifetime
            is used to determine how long a particle "lasts." Also, in the base
            implementation of Draw, lifetime is also used to calculate alpha and scale
            values to avoid particles suddenly "popping" into view
            </summary>
        </member>
        <member name="F:GoblinXNA.Graphics.ParticleEffects2D.ParticleEffect.minScale">
            <summary>
            to get some additional variance in the appearance of the particles, we give
            them all random scales. the scale is a value between minScale and maxScale,
            and is additionally affected by the particle's lifetime to avoid particles
            "popping" into view.
            </summary>
        </member>
        <member name="F:GoblinXNA.Graphics.ParticleEffects2D.ParticleEffect.blendState">
            <summary>
            different effects can use different blend states. fire and explosions work
            well with additive blending, for example.
            </summary>
        </member>
        <member name="M:GoblinXNA.Graphics.ParticleEffects2D.ParticleEffect.#ctor(System.Int32,System.Boolean)">
            <summary>
            Constructs a new ParticleSystem.
            </summary>
            <param name="howManyEffects">the maximum number of particle effects that
            are expected on screen at once.</param>
            <param name="spriteBatch">a sprite batch instance used to draw the particles</param>
            <param name="computeIn3D">whether to compute the particle positions in 3D space, and project
            to the screen space at the time of drawing. Setting this to true can be expensive
            if you add many particles, but if you want to make the particles appear at appropriate
            locations in AR space, it is necessary to set this to true</param>
            <remarks>it is tempting to set the value of howManyEffects very high.
            However, this value should be set to the minimum possible, because
            it has a large impact on the amount of memory required, and slows down the
            Update and Draw functions.</remarks>
        </member>
        <member name="M:GoblinXNA.Graphics.ParticleEffects2D.ParticleEffect.Initialize">
            <summary>
            override the base class's Initialize to do some additional work; we want to
            call InitializeConstants to let subclasses set the constants that we'll use.
            
            also, the particle array and freeParticles queue are set up here.
            </summary>
        </member>
        <member name="M:GoblinXNA.Graphics.ParticleEffects2D.ParticleEffect.InitializeConstants">
            <summary>
            this abstract function must be overriden by subclasses of ParticleSystem.
            It's here that they should set all the constants marked in the region
            "constants to be set by subclasses", which give each ParticleSystem its
            specific flavor.
            </summary>
        </member>
        <member name="M:GoblinXNA.Graphics.ParticleEffects2D.ParticleEffect.LoadContent">
            <summary>
            Override the base class LoadContent to load the texture. once it's
            loaded, calculate the origin.
            </summary>
        </member>
        <member name="M:GoblinXNA.Graphics.ParticleEffects2D.ParticleEffect.AddParticles(Microsoft.Xna.Framework.Vector2)">
            <summary>
            AddParticles's job is to add an effect somewhere on the screen. If there 
            aren't enough particles in the freeParticles queue, it will use as many as 
            it can. This means that if there not enough particles available, calling
            AddParticles will have no effect.
            </summary>
            <param name="where">where the particle effect should be created</param>
        </member>
        <member name="M:GoblinXNA.Graphics.ParticleEffects2D.ParticleEffect.AddParticles3D(Microsoft.Xna.Framework.Vector3)">
            <summary>
            AddParticles3D's job is to add an effect somewhere on the screen. If there 
            aren't enough particles in the freeParticles queue, it will use as many as 
            it can. This means that if there not enough particles available, calling
            AddParticles3D will have no effect.
            </summary>
            <param name="where"></param>
        </member>
        <member name="M:GoblinXNA.Graphics.ParticleEffects2D.ParticleEffect.InitializeParticle(GoblinXNA.Graphics.ParticleEffects2D.Particle,Microsoft.Xna.Framework.Vector2)">
            <summary>
            InitializeParticle randomizes some properties for a particle, then
            calls initialize on it. It can be overriden by subclasses if they 
            want to modify the way particles are created. For example, 
            SmokePlumeParticleSystem overrides this function make all particles
            accelerate to the right, simulating wind.
            </summary>
            <param name="p">the particle to initialize</param>
            <param name="where">the position on the screen that the particle should be
            </param>
        </member>
        <member name="M:GoblinXNA.Graphics.ParticleEffects2D.ParticleEffect.InitializeParticle3D(GoblinXNA.Graphics.ParticleEffects2D.Particle,Microsoft.Xna.Framework.Vector3)">
            <summary>
            InitializeParticle3D randomizes some properties for a particle, then
            calls initialize on it. It can be overriden by subclasses if they 
            want to modify the way particles are created. For example, 
            SmokePlumeParticleSystem overrides this function make all particles
            accelerate to the right, simulating wind.
            </summary>
            <param name="p">the particle to initialize</param>
            <param name="where">the position on the screen that the particle should be</param>
        </member>
        <member name="M:GoblinXNA.Graphics.ParticleEffects2D.ParticleEffect.PickRandomDirection">
            <summary>
            PickRandomDirection is used by InitializeParticles to decide which direction
            particles will move. The default implementation is a random vector in a
            circular pattern.
            </summary>
        </member>
        <member name="M:GoblinXNA.Graphics.ParticleEffects2D.ParticleEffect.PickRandomDirection3D">
            <summary>
            PickRandomDirection3D is used by InitializeParticles3D to decide which direction
            particles will move. The default implementation is a random vector in a
            circular pattern.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GoblinXNA.Graphics.ParticleEffects2D.ParticleEffect.Update(System.TimeSpan)">
            <summary>
            overriden from DrawableGameComponent, Update will update all of the active
            particles.
            </summary>
        </member>
        <member name="M:GoblinXNA.Graphics.ParticleEffects2D.ParticleEffect.Render(Microsoft.Xna.Framework.Matrix)">
            <summary>
            Draw will use ParticleSampleGame's 
            sprite batch to render all of the active particles.
            </summary>
        </member>
        <member name="P:GoblinXNA.Graphics.ParticleEffects2D.ParticleEffect.FreeParticleCount">
            <summary>
            returns the number of particles that are available for a new effect.
            </summary>
        </member>
        <member name="P:GoblinXNA.Graphics.ParticleEffects2D.ParticleEffect.MinNumParticles">
            <summary>
            Gets or sets the minimum number of particles that are added when AddParticles
            is called. The number of particles will be a random number between MinNumParticles 
            and MaxNumParticles.
            </summary>
            <see cref="P:GoblinXNA.Graphics.ParticleEffects2D.ParticleEffect.MaxNumParticles"/>
        </member>
        <member name="P:GoblinXNA.Graphics.ParticleEffects2D.ParticleEffect.MaxNumParticles">
            <summary>
            Gets or sets the maximum number of particles that are added when AddParticles
            is called. The number of particles will be a random number between MinNumParticles 
            and MaxNumParticles.
            </summary>
            <see cref="P:GoblinXNA.Graphics.ParticleEffects2D.ParticleEffect.MinNumParticles"/>
        </member>
        <member name="P:GoblinXNA.Graphics.ParticleEffects2D.ParticleEffect.TextureFilename">
            <summary>
            Gets or sets the texture that the particle system uses. 
            </summary>
        </member>
        <member name="P:GoblinXNA.Graphics.ParticleEffects2D.ParticleEffect.MinInitialSpeed">
            <summary>
            Gets or sets the minimum initial speed used to control the initial velocity
            of the particles. he particle's initial speed will be a random number 
            between MinInitialSpeed and MaxInitialSpeed. The direction is determined by the 
            function PickRandomDirection, which can be overriden.
            </summary>
            <see cref="P:GoblinXNA.Graphics.ParticleEffects2D.ParticleEffect.MaxInitialSpeed"/>
        </member>
        <member name="P:GoblinXNA.Graphics.ParticleEffects2D.ParticleEffect.MaxInitialSpeed">
            <summary>
            Gets or sets the maximum initial speed used to control the initial velocity
            of the particles. he particle's initial speed will be a random number 
            between MinInitialSpeed and MaxInitialSpeed. The direction is determined by the 
            function PickRandomDirection, which can be overriden.
            </summary>
            <see cref="P:GoblinXNA.Graphics.ParticleEffects2D.ParticleEffect.MinInitialSpeed"/>
        </member>
        <member name="P:GoblinXNA.Graphics.ParticleEffects2D.ParticleEffect.MinAcceleration">
            <summary>
            Gets or sets the minimum acceleration used to control the acceleration of
            the particles. The particle's acceleration will be a random number between
            MinAcceleration and MaxAcceleration. By default, the direction of acceleration 
            is the same as the direction of the initial velocity.
            </summary>
            <see cref="P:GoblinXNA.Graphics.ParticleEffects2D.ParticleEffect.MaxAcceleration"/>
        </member>
        <member name="P:GoblinXNA.Graphics.ParticleEffects2D.ParticleEffect.MaxAcceleration">
            <summary>
            Gets or sets the maximum acceleration used to control the acceleration of
            the particles. The particle's acceleration will be a random number between
            MinAcceleration and MaxAcceleration. By default, the direction of acceleration 
            is the same as the direction of the initial velocity.
            </summary>
            <see cref="P:GoblinXNA.Graphics.ParticleEffects2D.ParticleEffect.MinAcceleration"/>
        </member>
        <member name="P:GoblinXNA.Graphics.ParticleEffects2D.ParticleEffect.MinRotationSpeed">
            <summary>
            Gets or sets the minimum rotation speed that controls the particles' angular
            velocity: the speed at which particles will rotate. Each particle's rotation
            speed will be a random number between MinRotationSpeed and MaxRotationSpeed.
            Use smaller numbers to make particle systems look calm and wispy, and large 
            numbers for more violent effects.
            </summary>
            <see cref="P:GoblinXNA.Graphics.ParticleEffects2D.ParticleEffect.MaxRotationSpeed"/>
        </member>
        <member name="P:GoblinXNA.Graphics.ParticleEffects2D.ParticleEffect.MaxRotationSpeed">
            <summary>
            Gets or sets the maximum rotation speed that controls the particles' angular
            velocity: the speed at which particles will rotate. Each particle's rotation
            speed will be a random number between MinRotationSpeed and MaxRotationSpeed.
            Use smaller numbers to make particle systems look calm and wispy, and large 
            numbers for more violent effects.
            </summary>
            <see cref="P:GoblinXNA.Graphics.ParticleEffects2D.ParticleEffect.MinRotationSpeed"/>
        </member>
        <member name="P:GoblinXNA.Graphics.ParticleEffects2D.ParticleEffect.MinLifetime">
            <summary>
            Gets or sets the minimum lifetime used to control the lifetime. Each
            particle's lifetime will be a random number between MinLifetime and MaxLifetime. 
            Lifetime is used to determine how long a particle "lasts." Also, in the base
            implementation of Draw, lifetime is also used to calculate alpha and scale
            values to avoid particles suddenly "popping" into view
            </summary>
            <see cref="P:GoblinXNA.Graphics.ParticleEffects2D.ParticleEffect.MaxLifetime"/>
        </member>
        <member name="P:GoblinXNA.Graphics.ParticleEffects2D.ParticleEffect.MaxLifetime">
            <summary>
            Gets or sets the maximum lifetime used to control the lifetime. Each
            particle's lifetime will be a random number between MinLifetime and MaxLifetime. 
            Lifetime is used to determine how long a particle "lasts." Also, in the base
            implementation of Draw, lifetime is also used to calculate alpha and scale
            values to avoid particles suddenly "popping" into view
            </summary>
            <see cref="P:GoblinXNA.Graphics.ParticleEffects2D.ParticleEffect.MinLifetime"/>
        </member>
        <member name="P:GoblinXNA.Graphics.ParticleEffects2D.ParticleEffect.MinScale">
            <summary>
            Gets or sets the minimum scale. To get some additional variance in the appearance 
            of the particles, we give them all random scales. the scale is a value between 
            MinScale and MaxScale, and is additionally affected by the particle's lifetime to 
            avoid particles "popping" into view.
            </summary>
            <see cref="P:GoblinXNA.Graphics.ParticleEffects2D.ParticleEffect.MaxScale"/>
        </member>
        <member name="P:GoblinXNA.Graphics.ParticleEffects2D.ParticleEffect.MaxScale">
            <summary>
            Gets or sets the maximum scale. To get some additional variance in the appearance 
            of the particles, we give them all random scales. the scale is a value between 
            MinScale and MaxScale, and is additionally affected by the particle's lifetime to 
            avoid particles "popping" into view.
            </summary>
            <see cref="P:GoblinXNA.Graphics.ParticleEffects2D.ParticleEffect.MinScale"/>
        </member>
        <member name="P:GoblinXNA.Graphics.ParticleEffects2D.ParticleEffect.ComputeIn3D">
            <summary>
            Gets whether to compute the particle positions in 3D space, and project
            to the screen space at the time of drawing. Setting this to true can be expensive
            if you add many particles, but if you want to make the particles appear at appropriate
            locations in AR space, it is necessary to set this to true. Default value is false.
            </summary>
        </member>
        <member name="M:GoblinXNA.Graphics.ParticleEffects2D.ExplosionParticleEffect.InitializeConstants">
            <summary>
            Set up the constants that will give this particle system its behavior and
            properties.
            </summary>
        </member>
        <member name="T:GoblinXNA.Graphics.ParticleEffects2D.ExplosionSmokeParticleEffect">
            <summary>
            ExplosionSmokeParticleSystem is a specialization of ParticleSystem which
            creates a circular pattern of smoke. It should be combined with
            ExplosionParticleSystem for best effect.
            </summary>
        </member>
        <member name="M:GoblinXNA.Graphics.ParticleEffects2D.ExplosionSmokeParticleEffect.InitializeConstants">
            <summary>
            Set up the constants that will give this particle system its behavior and
            properties.
            </summary>
        </member>
        <member name="M:GoblinXNA.Graphics.ParticleEffects2D.FireParticleEffect.InitializeConstants">
            <summary>
            Set up the constants that will give this particle system its behavior and
            properties.
            </summary>
        </member>
        <member name="T:GoblinXNA.Graphics.ParticleEffects2D.Particle">
            <summary>
            particles are the little bits that will make up an effect. each effect will
            be comprised of many of these particles. They have basic physical properties,
            such as position, velocity, acceleration, and rotation. They'll be drawn as
            sprites, all layered on top of one another, and will be very pretty.
            </summary>
        </member>
        <member name="T:GoblinXNA.Graphics.ParticleEffects2D.SmokePlumeParticleEffect">
            <summary>
            SmokePlumeParticleSystem is a specialization of ParticleSystem which sends up a
            plume of smoke. The smoke is blown to the right by the wind.
            </summary>
        </member>
        <member name="M:GoblinXNA.Graphics.ParticleEffects2D.SmokePlumeParticleEffect.InitializeConstants">
            <summary>
            Set up the constants that will give this particle system its behavior and
            properties.
            </summary>
        </member>
        <member name="M:GoblinXNA.Graphics.ParticleEffects2D.SmokePlumeParticleEffect.PickRandomDirection">
            <summary>
            PickRandomDirection is overriden so that we can make the particles always 
            move have an initial velocity pointing up.
            </summary>
            <returns>a random direction which points basically up.</returns>
        </member>
        <member name="M:GoblinXNA.Graphics.ParticleEffects2D.SmokePlumeParticleEffect.InitializeParticle(GoblinXNA.Graphics.ParticleEffects2D.Particle,Microsoft.Xna.Framework.Vector2)">
            <summary>
            InitializeParticle is overridden to add the appearance of wind.
            </summary>
            <param name="p">the particle to set up</param>
            <param name="where">where the particle should be placed</param>
        </member>
        <member name="T:GoblinXNA.Graphics.Text3D">
            <summary>
            A 3D text primitive using Nuclex.Fonts library
            </summary>
        </member>
        <member name="M:GoblinXNA.Graphics.Text3D.#ctor(System.String,System.String)">
            <summary>
            Create a 3D text with the font name (the asset name of the spritefont file) and the text to render
            </summary>
            <param name="fontToUse">String of the font type to use (the asset name of the spritefont file)</param>
            <param name="textToRender">String of the text to render</param>
        </member>
        <member name="M:GoblinXNA.Graphics.Text3D.#ctor(System.String,System.String,GoblinXNA.UI.UI3D.UI3DRenderer.Text3DStyle)">
            <summary>
            Create a 3D text with the font name (the asset name of the spritefont file), the text to render,
            and the mesh style
            </summary>
            <param name="fontToUse">String of the font type to use (the asset name of the spritefont file)</param>
            <param name="textToRender">String of the text to render</param>
            <param name="styleToUse">Type of rendering to use in how we create the 3D mesh</param>
            
        </member>
        <member name="M:GoblinXNA.Graphics.Text3D.#ctor(Nuclex.Fonts.VectorFont,System.String,GoblinXNA.UI.UI3D.UI3DRenderer.Text3DStyle)">
            <summary>
            Create a 3D text with the font, the text to render, and the mesh style
            </summary>
            <param name="fontToUse">Font type to use</param>
            <param name="textToRender">String of the text to render</param>
            <param name="styleToUse">Type of rendering to use in how we create the 3D mesh</param>
        </member>
        <member name="M:GoblinXNA.Graphics.Text3D.CreateText">
            <summary>
            Actually builds the text
            </summary>
            <returns> The custom mesh that has all of the geometry information</returns>
        </member>
        <member name="T:GoblinXNA.Helpers.VariableToAnimate">
            <summary>
            An enum that is used to determine what type of variables we will be interpolating.
            </summary>
        </member>
        <member name="T:GoblinXNA.Helpers.TypeOfTransition">
            <summary>
            Another enum type that will determine what kind of transition to implement
            </summary>
        </member>
        <member name="T:GoblinXNA.Helpers.Easing">
            <summary>
            Yet another enum that declares how we will ease in and out in our interpolation
            </summary>
        </member>
        <member name="T:GoblinXNA.Helpers.AnimationHelper">
            <summary>
            This is a class that implements different interpolation functions for:
             
             - Single float values
             - Vector2 values
             - Vector3 values 
             
             
            </summary>
        </member>
        <member name="M:GoblinXNA.Helpers.AnimationHelper.InitializeTweener">
            <summary>
            Initializes the Tweener. Useful for whenever we create an animator, but don't set it to animate anything.
            </summary>
        </member>
        <member name="M:GoblinXNA.Helpers.AnimationHelper.GetTweeningFunction">
            <summary>
            How we determine which Tweening (another name for Interpolation) function we return. 
            </summary>
            <returns>A TweeningFunction, which is the type of interpolation we will carry out</returns>
        </member>
        <member name="M:GoblinXNA.Helpers.AnimationHelper.Animate(GoblinXNA.Helpers.TypeOfTransition,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Double)">
            <summary>
            Function used to set our animation parameters
            </summary>
            <param name="transition">Type of interpolation function to utilize</param>
            <param name="startPosition"> Our start position</param>
            <param name="endPosition">Our end position</param>
            <param name="durationInSeconds">How many seconds the animation should take</param>
        </member>
        <member name="M:GoblinXNA.Helpers.AnimationHelper.SetEndAction(GoblinXNA.Helpers.XNATweener.EndHandler)">
            <summary>
            Function used to set an action to take place once the animation has concluded.
            </summary>
            <param name="ToCallAtEndOfAnimation"> Any function or delegate.</param>
        </member>
        <member name="M:GoblinXNA.Helpers.AnimationHelper.SetLooping(System.Boolean,System.Int32)">
            <summary>
            Set whether or not to loop over the animation, and how many times
            </summary>
            <param name="forward"> Determines whether we will loop from start to end positions, or from end to start positions. True means from start to end positions.</param>
            <param name="howManyTimes">Instances to loop over. If less than zero, it will loop indefinitely. </param>
        </member>
        <member name="M:GoblinXNA.Helpers.AnimationHelper.Play">
            <summary>
            Plays the animation
            </summary>
        </member>
        <member name="M:GoblinXNA.Helpers.AnimationHelper.Pause">
            <summary>
            Pauses the animation
            </summary>
        </member>
        <member name="M:GoblinXNA.Helpers.AnimationHelper.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Updates the animation
            </summary>
            <param name="gameTime"></param>
        </member>
        <member name="P:GoblinXNA.Helpers.AnimationHelper.ReturnValue">
            <summary>
            Value to return. It'll always be a Vector3 but
            - For floats, only the first value is the output
            - For Vector2, the first two values are the output
            - For Vector3, all values are the output
            </summary>
        </member>
        <member name="P:GoblinXNA.Helpers.AnimationHelper.CurrentEasing">
            <summary>
            Sets or returns our current Easing
            </summary>
        </member>
        <member name="T:GoblinXNA.Helpers.ByteHelper">
            <summary>
            A helper class that implements various useful functions to convert between array of bytes
            and other types.
            </summary>
        </member>
        <member name="M:GoblinXNA.Helpers.ByteHelper.ConvertToByte(System.String)">
            <summary>
            Converts a string to an array of bytes.
            </summary>
            <param name="s">A string to be converted</param>
            <returns></returns>
        </member>
        <member name="M:GoblinXNA.Helpers.ByteHelper.ConvertToByte(System.String,System.Byte[])">
            <summary>
            Converts a string to an array of bytes.
            </summary>
            <param name="s">A string to be converted</param>
            <param name="bytes">The resulting byte array</param>
        </member>
        <member name="M:GoblinXNA.Helpers.ByteHelper.ConvertToString(System.Byte[])">
            <summary>
            Converts an array of bytes to a string.
            </summary>
            <param name="b">An array of bytes</param>
            <returns></returns>
        </member>
        <member name="M:GoblinXNA.Helpers.ByteHelper.ConvertToString(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Converts an array of bytes to a string.
            </summary>
            <param name="b">An array of bytes</param>
            <returns></returns>
        </member>
        <member name="M:GoblinXNA.Helpers.ByteHelper.ConvertToFloat(System.Byte[],System.Int32)">
            <summary>
            Converts 4 bytes to a single-precision floating number.
            </summary>
            <param name="b">An array of bytes with length of at least 4</param>
            <param name="startIndex">4 bytes are taken from this start index in the byte array</param>
            <returns></returns>
        </member>
        <member name="M:GoblinXNA.Helpers.ByteHelper.ConvertToInt(System.Byte[],System.Int32)">
            <summary>
            Converts 4 bytes to a 32-bit integer value.
            </summary>
            <param name="b">An array of bytes with length of at least 4</param>
            <param name="startIndex">4 bytes are taken from this start index in the byte array</param>
            <returns></returns>
        </member>
        <member name="M:GoblinXNA.Helpers.ByteHelper.ConvertToShort(System.Byte[],System.Int32)">
            <summary>
            Converts 2 bytes to a 16-bit integer value.
            </summary>
            <param name="b">An array of bytes with length of at least 2</param>
            <param name="startIndex">2 bytes are taken from this start index in the byte array</param>
            <returns></returns>
        </member>
        <member name="M:GoblinXNA.Helpers.ByteHelper.ConvertFloatArray(System.Collections.Generic.List{System.Single})">
            <summary>
            Converts a list of single-precision floating numbers to an array of bytes.
            </summary>
            <param name="floats">A list of single-precision floating numbers</param>
            <returns>An array of bytes with size of 4 * (number of floats)</returns>
        </member>
        <member name="M:GoblinXNA.Helpers.ByteHelper.ConvertFloatArray(System.Collections.Generic.List{System.Single},System.Byte[])">
            <summary>
            Converts a list of single-precision floating numbers to an array of bytes.
            </summary>
            <param name="floats">A list of single-precision floating numbers</param>
            <param name="bytes">The resulting byte array</param>
        </member>
        <member name="M:GoblinXNA.Helpers.ByteHelper.ConvertIntArray(System.Collections.Generic.List{System.Int32})">
            <summary>
            Converts a list of 32-bit integer numbers to an array of bytes.
            </summary>
            <param name="ints">A list of 32-bit integer numbers</param>
            <returns>An array of bytes with size of 4 * (number of ints)</returns>
        </member>
        <member name="M:GoblinXNA.Helpers.ByteHelper.ConvertIntArray(System.Collections.Generic.List{System.Int32},System.Byte[])">
            <summary>
            Converts a list of 32-bit integer numbers to an array of bytes.
            </summary>
            <param name="ints">A list of 32-bit integer numbers</param>
            <param name="bytes">The resulting byte array</param>
        </member>
        <member name="M:GoblinXNA.Helpers.ByteHelper.ConvertShortArray(System.Collections.Generic.List{System.Int16})">
            <summary>
            Converts a list of 16-bit integer numbers to an array of bytes.
            </summary>
            <param name="shorts">A list of 16-bit integer numbers</param>
            <returns>An array of bytes with size of 2 * (number of shorts)</returns>
        </member>
        <member name="M:GoblinXNA.Helpers.ByteHelper.ConvertShortArray(System.Collections.Generic.List{System.Int16},System.Byte[])">
            <summary>
            Converts a list of 16-bit integer numbers to an array of bytes.
            </summary>
            <param name="shorts">A list of 16-bit integer numbers</param>
            <param name="bytes">The resulting byte array</param>
        </member>
        <member name="M:GoblinXNA.Helpers.ByteHelper.FillByteArray(System.Byte[]@,System.Int32,System.Byte[])">
            <summary>
            Fills the given dest byte array from the destStartIndex with the entire src byte array
            </summary>
            <remarks>
            If the source contains more than (dest.Length - destStartIndex) bytes, then the overflowed 
            bytes are not copied into the destination array..
            </remarks>
            <param name="dest">The destination where the source array will be copied</param>
            <param name="destStartIndex">The index of the destination array where the copy starts</param>
            <param name="src">The source array where to copy from</param>
        </member>
        <member name="M:GoblinXNA.Helpers.ByteHelper.FillByteArray(System.Byte[]@,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Fills the given dest byte array from the destStartIndex with the src byte array starting at
            specific index with specific length
            </summary>
            <remarks>
            If the source contains more than (dest.Length - destStartIndex) bytes, then the overflowed 
            bytes are not copied into the destination array..
            </remarks>
            <param name="dest">The destination where the source array will be copied</param>
            <param name="destStartIndex">The index of the destination array where the copy starts</param>
            <param name="src">The source array where to copy from</param>
            <param name="srcStartIndex">The starting index to copy from</param>
            <param name="srcLength">The length to copy from the starting index</param>
        </member>
        <member name="M:GoblinXNA.Helpers.ByteHelper.ConcatenateBytes(System.Byte[],System.Byte[])">
            <summary>
            Concatenates two byte arrays.
            </summary>
            <param name="b1">The first byte array to be concatenated</param>
            <param name="b2">The second byte array to be concatenated</param>
            <returns>The concatenated byte array with size of b1 + b2</returns>
        </member>
        <member name="M:GoblinXNA.Helpers.ByteHelper.ConcatenateBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Concatenates two byte arrays from specific starting index and length.
            </summary>
            <param name="b1">The first byte array to be concatenated</param>
            <param name="b1StartIndex"></param>
            <param name="b1Length"></param>
            <param name="b2">The second byte array to be concatenated</param>
            <param name="b2StartIndex"></param>
            <param name="b2Length"></param>
            <returns>The concatenated byte array with size of b1 + b2</returns>
        </member>
        <member name="M:GoblinXNA.Helpers.ByteHelper.ConcatenateBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Byte[])">
            <summary>
            Concatenates two byte arrays from specific starting index and length.
            </summary>
            <param name="b1">The first byte array to be concatenated</param>
            <param name="b1StartIndex"></param>
            <param name="b1Length"></param>
            <param name="b2">The second byte array to be concatenated</param>
            <param name="b2StartIndex"></param>
            <param name="b2Length"></param>
            <param name="bytes">The resulting byte array</param>
        </member>
        <member name="M:GoblinXNA.Helpers.ByteHelper.ConcatenateBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Concatenates two byte arrays from specific starting index and length and copy to a resulting byte array 
            at specific starting index.
            </summary>
            <param name="b1">The first byte array to be concatenated</param>
            <param name="b1StartIndex"></param>
            <param name="b1Length"></param>
            <param name="b2">The second byte array to be concatenated</param>
            <param name="b2StartIndex"></param>
            <param name="b2Length"></param>
            <param name="bytes">The resulting byte array</param>
            <param name="bytesStartIndex"></param>
        </member>
        <member name="M:GoblinXNA.Helpers.ByteHelper.Truncate(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Truncates an array of bytes from the startIndex for the specified length.
            </summary>
            <param name="value">A byte array to be truncated</param>
            <param name="startIndex">The index in the 'value' array where truncation starts</param>
            <param name="length">The length of the new truncated array</param>
            <returns>The truncated byte array with size of 'length'</returns>
        </member>
        <member name="M:GoblinXNA.Helpers.ByteHelper.Truncate(System.Byte[],System.Int32,System.Int32,System.Byte[])">
            <summary>
            Truncates an array of bytes from the startIndex for the specified length.
            </summary>
            <param name="value">A byte array to be truncated</param>
            <param name="startIndex">The index in the 'value' array where truncation starts</param>
            <param name="length">The length of the new truncated array</param>
            <param name="bytes">The resulting byte array</param>
        </member>
        <member name="M:GoblinXNA.Helpers.ByteHelper.RoundToPowerOfTwo(System.Int32)">
            <summary>
            Rounds a given number to the nearst power of two number. The resulting number is
            always larger or equal to the given number.
            </summary>
            <param name="number"></param>
            <returns></returns>
        </member>
        <member name="M:GoblinXNA.Helpers.ByteHelper.ExpandArray(System.Byte[]@,System.Int32)">
            <summary>
            Expands an existing array to new size without losing the data.
            </summary>
            <param name="data"></param>
            <param name="newLength"></param>
        </member>
        <member name="M:GoblinXNA.Helpers.ByteHelper.Encode(Microsoft.Xna.Framework.Graphics.Texture2D,System.Int32,System.Int32)">
            <summary>
            Encode a texture2D into a Jpeg byte array.
            </summary>
            <param name="image">A texture2D to be encoded</param>
            <param name="width">The width of the returned encoded jpeg</param>
            <param name="height">The height of the returned encoded jpeg</param>
        </member>
        <member name="M:GoblinXNA.Helpers.ByteHelper.Decode(System.Byte[],Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Decode a Jpeg byte array in order to get a texture2D.
            </summary>
            <param name="jpegData">A Jpeg byte array to be decoded</param>
            <param name="graphicsDevice">GraphicsDevice from graphicsDeviceManager</param>
        </member>
        <member name="T:GoblinXNA.Helpers.ColorHelper">
            <summary>
            Color helper, just to convert colors to different formats and provide
            more helper methods missing in the Color class.
            </summary>
        </member>
        <member name="F:GoblinXNA.Helpers.ColorHelper.Empty">
            <summary>
            Empty color, used to mark unused color values.
            </summary>
        </member>
        <member name="F:GoblinXNA.Helpers.ColorHelper.HalfAlpha">
            <summary>
            Half alpha color helper. Just white with 50% alpha.
            </summary>
        </member>
        <member name="M:GoblinXNA.Helpers.ColorHelper.StayInRange(System.Single,System.Single,System.Single)">
            <summary>
            Stay in range, val will be set to min if less or to max when bigger.
            </summary>
        </member>
        <member name="M:GoblinXNA.Helpers.ColorHelper.MultiplyColors(Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color)">
            <summary>
            Multiply colors
            </summary>
            <param name="color1">Color 1</param>
            <param name="color2">Color 2</param>
            <returns>Return color</returns>
        </member>
        <member name="M:GoblinXNA.Helpers.ColorHelper.SameColor(Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color)">
            <summary>
            Same color. Helper method for LoadLevel because for some reason
            the color compare does not work and causes a lot of errors.
            </summary>
            <param name="color">Color</param>
            <param name="checkColor">Check color</param>
            <returns>Bool</returns>
        </member>
        <member name="M:GoblinXNA.Helpers.ColorHelper.InterpolateColor(Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color,System.Single)">
            <summary>
            Interpolate color. Used to fade the hud colors from green to red.
            </summary>
        </member>
        <member name="M:GoblinXNA.Helpers.ColorHelper.ApplyAlphaToColor(Microsoft.Xna.Framework.Color,System.Single)">
            <summary>
            Apply alpha to color
            </summary>
            <param name="col">Color</param>
            <param name="newAlpha">New alpha</param>
            <returns>Color</returns>
        </member>
        <member name="M:GoblinXNA.Helpers.ColorHelper.MixAlphaToColor(Microsoft.Xna.Framework.Color,System.Single)">
            <summary>
            Mix alpha to color
            </summary>
            <param name="col">Color</param>
            <param name="newAlpha">New alpha</param>
            <returns>Color</returns>
        </member>
        <member name="T:GoblinXNA.Helpers.DefaultTransparencyComparer">
            <summary>
            A default comparer for sorting the drawing order of transparent geometries.
            </summary>
        </member>
        <member name="T:GoblinXNA.Helpers.EffectHelper">
            <summary>
            A helper class for various Effect related operations.
            </summary>
        </member>
        <member name="M:GoblinXNA.Helpers.EffectHelper.ReplaceModelEffect(GoblinXNA.Graphics.Model,Microsoft.Xna.Framework.Graphics.Effect,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Alters a model so it will draw using a custom effect, while preserving
            whatever textures were set on it as part of the original effects.
            </summary>
        </member>
        <member name="M:GoblinXNA.Helpers.EffectHelper.ReplaceModelEffect(GoblinXNA.Graphics.Model,Microsoft.Xna.Framework.Graphics.Effect,System.String,System.String)">
            <summary>
            Replaces
            </summary>
            <param name="model"></param>
            <param name="replacementEffect"></param>
            <param name="texture"></param>
            <param name="textureEnabled"></param>
        </member>
        <member name="T:GoblinXNA.Helpers.FileHelper">
            <summary>
            File helper class to get text lines, number of text lines, etc.
            Update: Now also supports the XNA Storage classes :)
            </summary>
        </member>
        <member name="M:GoblinXNA.Helpers.FileHelper.CreateGameContentFile(System.String,System.Boolean)">
            <summary>
            Create game content file, will create file if it does not exist.
            Else the existing file is just loaded.
            </summary>
            <param name="relativeFilename">Relative filename</param>
            <returns>File stream</returns>
        </member>
        <member name="M:GoblinXNA.Helpers.FileHelper.LoadGameContentFile(System.String)">
            <summary>
            Load game content file, returns null if file was not found.
            </summary>
            <param name="relativeFilename">Relative filename</param>
            <returns>File stream</returns>
        </member>
        <member name="M:GoblinXNA.Helpers.FileHelper.GetLines(System.String)">
            <summary>
            Returns the number of text lines we got in a file.
            </summary>
        </member>
        <member name="M:GoblinXNA.Helpers.FileHelper.WriteVector3(System.IO.BinaryWriter,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Write vector3 to stream
            </summary>
            <param name="writer">Writer</param>
            <param name="vec">Vector3</param>
        </member>
        <member name="M:GoblinXNA.Helpers.FileHelper.WriteVector4(System.IO.BinaryWriter,Microsoft.Xna.Framework.Vector4)">
            <summary>
            Write vector4 to stream
            </summary>
            <param name="writer">Writer</param>
            <param name="vec">Vector4</param>
        </member>
        <member name="M:GoblinXNA.Helpers.FileHelper.WriteMatrix(System.IO.BinaryWriter,Microsoft.Xna.Framework.Matrix)">
            <summary>
            Write matrix to stream
            </summary>
            <param name="writer">Writer</param>
            <param name="matrix">Matrix</param>
        </member>
        <member name="M:GoblinXNA.Helpers.FileHelper.ReadVector3(System.IO.BinaryReader)">
            <summary>
            Read vector3 from stream
            </summary>
            <param name="reader">Reader</param>
            <returns>Vector3</returns>
        </member>
        <member name="M:GoblinXNA.Helpers.FileHelper.ReadVector4(System.IO.BinaryReader)">
            <summary>
            Read vector4 from stream
            </summary>
            <param name="reader">Reader</param>
            <returns>Vector4</returns>
        </member>
        <member name="M:GoblinXNA.Helpers.FileHelper.ReadMatrix(System.IO.BinaryReader)">
            <summary>
            Read matrix from stream
            </summary>
            <param name="reader">Reader</param>
            <returns>Matrix</returns>
        </member>
        <member name="T:GoblinXNA.Helpers.InterpolationMethod">
            <summary>
            An enum that defines the interpolation method.
            </summary>
        </member>
        <member name="F:GoblinXNA.Helpers.InterpolationMethod.Linear">
            <summary>
            Linear interpolation.
            </summary>
        </member>
        <member name="T:GoblinXNA.Helpers.Interpolator">
            <summary>
            A helper class for interpolating between two double precision numbers
            in a specified duration of time. 
            </summary>
            <remarks>
            Currently, only linear interpolation is implemented, but more interpolation methods
            will be added in the upcoming releases.
            </remarks>
        </member>
        <member name="M:GoblinXNA.Helpers.Interpolator.#ctor(System.Double,System.Double,System.Int64,GoblinXNA.Helpers.InterpolationMethod)">
            <summary>
            Creates an interpolator that interpolates from the specified 'startValue' to
            the 'endValue' in the specified duration of time using the specified interpolation 
            method.
            </summary>
            <param name="startValue">The start value</param>
            <param name="endValue">The end value</param>
            <param name="duration">The duration of time in milliseconds</param>
            <param name="method">The interpolation method</param>
        </member>
        <member name="M:GoblinXNA.Helpers.Interpolator.#ctor(System.Double,System.Double,System.Int64)">
            <summary>
            Creates an interpolator that interpolates from the specified 'startValue' to
            the 'endValue' in the specified duration of time using linear interpolation.
            </summary>
            <param name="startValue">The start value</param>
            <param name="endValue">The end value</param>
            <param name="duration">The duration of time in milliseconds</param>
        </member>
        <member name="M:GoblinXNA.Helpers.Interpolator.#ctor">
            <summary>
            Creates an interpolator that interpolates from 0.0 to 1.0 in 1000 milliseconds
            using linear interpolation.
            </summary>
        </member>
        <member name="M:GoblinXNA.Helpers.Interpolator.Start">
            <summary>
            Starts the interpolation.
            </summary>
            <exception cref="T:GoblinXNA.GoblinException">If you try to start again before your previous
            interpolation finishes.</exception>
        </member>
        <member name="E:GoblinXNA.Helpers.Interpolator.DoneEvent">
            <summary>
            An event to be called when the interpolation is done.
            </summary>
            <remarks>
            You need to keep accessing the Value property in order to have this event triggered
            when the interpolation finishes. If Value property is not accessed, then this event will 
            never be triggered. This is not a timer class, so do not use this as a timer.
            </remarks>
        </member>
        <member name="P:GoblinXNA.Helpers.Interpolator.StartValue">
            <summary>
            Gets or sets the start value.
            </summary>
            <exception cref="T:GoblinXNA.GoblinException">If you try to set this value after the 
            interpolation starts and before the interpolation finishes</exception>
        </member>
        <member name="P:GoblinXNA.Helpers.Interpolator.EndValue">
            <summary>
            Gets or sets the end value.
            </summary>
            <exception cref="T:GoblinXNA.GoblinException">If you try to set this value after the 
            interpolation starts and before the interpolation finishes</exception>
        </member>
        <member name="P:GoblinXNA.Helpers.Interpolator.LogBase">
            <summary>
            Gets or sets the log base to use for logarithmic interpolation.
            The default base is Math.E.
            </summary>
            <remarks>
            Logarithmic interpolation methods are not supported yet, so setting this value
            will not affect anything.
            </remarks>
        </member>
        <member name="P:GoblinXNA.Helpers.Interpolator.Value">
            <summary>
            Gets the current interpolated value.
            </summary>
        </member>
        <member name="P:GoblinXNA.Helpers.Interpolator.Duration">
            <summary>
            Gets or sets the duration of the time takes to complete the interpolation in milliseconds.
            </summary>
            <exception cref="T:GoblinXNA.GoblinException">If you try to set this value after the 
            interpolation starts and before the interpolation finishes</exception>
        </member>
        <member name="P:GoblinXNA.Helpers.Interpolator.Method">
            <summary>
            Gets or sets the interpolation method.
            </summary>
            <exception cref="T:GoblinXNA.GoblinException">If you try to set this value after the 
            interpolation starts and before the interpolation finishes</exception>
        </member>
        <member name="P:GoblinXNA.Helpers.Interpolator.Started">
            <summary>
            Gets whether the interpolation has started. Once the interpolation is done,
            this value is reset to false.
            </summary>
        </member>
        <member name="P:GoblinXNA.Helpers.Interpolator.Done">
            <summary>
            Gets whether the interpolation is done after it's started. If you start the interpolation
            again after an interpolation is finished, this value is reset to false until the interpolation
            finishes again.
            </summary>
        </member>
        <member name="T:GoblinXNA.Helpers.LatLonMapper">
            <summary>
            Maps latitude and longitude to a 3D point.
            </summary>
        </member>
        <member name="M:GoblinXNA.Helpers.LatLonMapper.lon2xECEF(System.Double,System.Double,System.Double)">
            <summary>
            Converts longitude to x value in meters but for ECEF which isn't a mercator projection
            </summary>
            <param name="lon"></param>
            <param name="lat"></param>
            <param name="alt"></param>
            <returns></returns>
        </member>
        <member name="T:GoblinXNA.Helpers.Log">
            <summary>
            Log will create automatically a log file and write log/warning/error info for simple
            runtime error checking, which is very useful for minor errors. The application can still 
            continue working, but this log provides an easy way to find errors. Also, you can
            enable WriteToNotifier to make the log message appear on the screen if State.ShowNotification
            is enabled.
            </summary>
        </member>
        <member name="F:GoblinXNA.Helpers.Log.writer">
            <summary>
            Writer
            </summary>
        </member>
        <member name="F:GoblinXNA.Helpers.Log.LogFilename">
            <summary>
            Log filename
            </summary>
        </member>
        <member name="M:GoblinXNA.Helpers.Log.#ctor">
            <summary>
            Private constructor to prevent instantiation.
            </summary>
        </member>
        <member name="M:GoblinXNA.Helpers.Log.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:GoblinXNA.Helpers.Log.Write(System.String)">
            <summary>
            Writes a LogLevel.Warning text message to the Log file, as well as the screen, if enabled
            </summary>
            <param name="message">The log message</param>
        </member>
        <member name="M:GoblinXNA.Helpers.Log.Write(System.String,GoblinXNA.Helpers.Log.LogLevel)">
            <summary>
            Writes a log/warning/error text message to the Log file, as well as the screen, if enabled
            </summary>
            <param name="message">The log message</param>
            <param name="level">The log level</param>
        </member>
        <member name="P:GoblinXNA.Helpers.Log.WriteToNotifier">
            <summary>
            Gets or sets whether to write to the screen notifier, as well. If this is set to true
            and State.ShowNotification is set to true, anything written to Log will be automatically
            shown in the screen as well.
            </summary>
        </member>
        <member name="T:GoblinXNA.Helpers.Log.LogLevel">
            <summary>
            An enum that defines the severity of the log message.
            </summary>
        </member>
        <member name="F:GoblinXNA.Helpers.Log.LogLevel.Log">
            <summary>
            Low level of severity. For minor debugging purposes.
            </summary>
        </member>
        <member name="F:GoblinXNA.Helpers.Log.LogLevel.Warning">
            <summary>
            Middle level of severity. Not critical for executing the application, but
            the user should pay attention.
            </summary>
        </member>
        <member name="F:GoblinXNA.Helpers.Log.LogLevel.Error">
            <summary>
            High level of severtiy. Critical for executing the application.
            </summary>
        </member>
        <member name="T:GoblinXNA.Helpers.MatrixHelper">
            <summary>
            A helper class that implements various useful static functions that the Matrix class
            does not support.
            </summary>
        </member>
        <member name="M:GoblinXNA.Helpers.MatrixHelper.CopyMatrix(Microsoft.Xna.Framework.Matrix)">
            <summary>
            Copies the contents from a 'src' matrix.
            </summary>
            <param name="src">The matrix to copy from</param>
            <returns>The matrix with copied contents</returns>
        </member>
        <member name="M:GoblinXNA.Helpers.MatrixHelper.FloatsToMatrix(System.Single[])">
            <summary>
            Converts an array of sixteen floats to Matrix.
            </summary>
            <param name="mat">An array of 16 floats</param>
            <returns></returns>
        </member>
        <member name="M:GoblinXNA.Helpers.MatrixHelper.GetRotationMatrix(Microsoft.Xna.Framework.Matrix)">
            <summary>
            Copies only the rotation part of the matrix (the upper-left 3x3 matrix, so it
            may actually contain the scaling factor as well).
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:GoblinXNA.Helpers.MatrixHelper.Multiply(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Matrix)">
            <summary>
            Multiplies a matrix with a vector. The calculation is Matrix.CreateTranslation('v') *
            'mat'.
            </summary>
            <param name="v"></param>
            <param name="mat"></param>
            <returns></returns>
        </member>
        <member name="M:GoblinXNA.Helpers.MatrixHelper.OrthonormalizeMatrix(Microsoft.Xna.Framework.Matrix)">
            <summary>
            Orthonormalizes a transformation matrix.
            </summary>
            <param name="mat"></param>
            <returns></returns>
        </member>
        <member name="M:GoblinXNA.Helpers.MatrixHelper.HasMovedSignificantly(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
            <summary>
            Checks whether a transformation has changed/moved significantly compared to the previous
            transformation with 0.01f translational threshold and 0.1f * Math.PI / 180 rotational
            threshold. This means that if either the transformation's translation component changed
            more than 0.1f in distance or rotation component changed more than 0.1f * Math.PI / 180
            radians in any of the three (x, y, z) directions, then it's judged as having moved significantly.
            </summary>
            <param name="matPrev">The previous transformation matrix</param>
            <param name="matCurr">The current transformation matrix</param>
            <returns></returns>
        </member>
        <member name="M:GoblinXNA.Helpers.MatrixHelper.HasMovedSignificantly(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix,System.Single,System.Single)">
            <summary>
            Checks whether a transformation has changed/moved significantly compared to the previous
            transformation with the specified translational threshold and rotational threshold. 
            </summary>
            <param name="matPrev">The previous transformation matrix</param>
            <param name="matCurr">The current transformation matrix</param>
            <param name="transThreshold">The translational threshold</param>
            <param name="rotThreshold">The rotational threshold</param>
            <returns></returns>
        </member>
        <member name="M:GoblinXNA.Helpers.MatrixHelper.ConvertToUnoptimizedBytes(Microsoft.Xna.Framework.Matrix)">
            <summary>
            Convert every elements of the matrix to bytes.
            </summary>
            <param name="mat"></param>
            <returns></returns>
        </member>
        <member name="M:GoblinXNA.Helpers.MatrixHelper.ConvertToOptimizedBytes(Microsoft.Xna.Framework.Matrix)">
            <summary>
            Decompose the matrix into rotation (Quaternion: 4 floats), scale (3 floats) if
            the scale is not Vector.One, and translation (3 floats), and pack these information
            into an array of bytes for efficiently transfering over the network.
            </summary>
            <param name="mat">A matrix to be converted</param>
            <returns>The resulting byte array</returns>
        </member>
        <member name="M:GoblinXNA.Helpers.MatrixHelper.ConvertToOptimizedBytes(Microsoft.Xna.Framework.Matrix,System.Byte[])">
            <summary>
            Decompose the matrix into rotation (Quaternion: 4 floats), scale (3 floats) if
            the scale is not Vector.One, and translation (3 floats), and pack these information
            into an array of bytes for efficiently transfering over the network.
            </summary>
            <param name="mat">A matrix to be converted</param>
            <param name="bytes">The resulting byte array</param>
            <returns>Number of resulting bytes</returns>
        </member>
        <member name="M:GoblinXNA.Helpers.MatrixHelper.ConvertFromOptimizedBytes(System.Byte[])">
            <summary>
            Converts an array of bytes containing transformation (rotation, scale, and
            translation) into a matrix. Use this method to convert back the information
            packed by ConvertToOptimizedBytes method.
            </summary>
            <param name="bytes"></param>
            <see cref="M:GoblinXNA.Helpers.MatrixHelper.ConvertToOptimizedBytes(Microsoft.Xna.Framework.Matrix)"/>
            <returns></returns>
        </member>
        <member name="M:GoblinXNA.Helpers.MatrixHelper.ConvertFromOptimizedBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Converts an array of bytes containing transformation (rotation, scale, and
            translation) into a matrix. Use this method to convert back the information
            packed by ConvertToOptimizedBytes method.
            </summary>
            <param name="bytes"></param>
            <param name="startIndex"></param>
            <param name="length"></param>
            <see cref="M:GoblinXNA.Helpers.MatrixHelper.ConvertToOptimizedBytes(Microsoft.Xna.Framework.Matrix)"/>
            <returns></returns>
        </member>
        <member name="M:GoblinXNA.Helpers.MatrixHelper.ConvertFromOptimizedBytes(System.Byte[],Microsoft.Xna.Framework.Matrix@)">
            <summary>
            Converts an array of bytes containing transformation (rotation, scale, and
            translation) into a matrix. Use this method to convert back the information
            packed by ConvertToOptimizedBytes method.
            </summary>
            <param name="bytes"></param>
            <param name="mat"></param>
            <see cref="M:GoblinXNA.Helpers.MatrixHelper.ConvertToOptimizedBytes(Microsoft.Xna.Framework.Matrix)"/>
        </member>
        <member name="M:GoblinXNA.Helpers.MatrixHelper.ConvertFromOptimizedBytes(System.Byte[],System.Int32,System.Int32,Microsoft.Xna.Framework.Matrix@)">
            <summary>
            Converts an array of bytes containing transformation (rotation, scale, and
            translation) into a matrix. Use this method to convert back the information
            packed by ConvertToOptimizedBytes method.
            </summary>
            <param name="bytes"></param>
            <param name="startIndex"></param>
            <param name="length"></param>
            <param name="mat"></param>
        </member>
        <member name="M:GoblinXNA.Helpers.MatrixHelper.ConvertFromUnoptimizedBytes(System.Byte[])">
            <summary>
            Converts an array of bytes containing transformation (rotation, scale, and
            translation) into a matrix. Use this method to convert back the information
            packed by ConvertToUnptimizedBytes method.
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:GoblinXNA.Helpers.MatrixHelper.ConvertFromUnoptimizedBytes(System.Byte[],Microsoft.Xna.Framework.Matrix@)">
            <summary>
            Converts an array of bytes containing transformation (rotation, scale, and
            translation) into a matrix. Use this method to convert back the information
            packed by ConvertToUnptimizedBytes method.
            </summary>
            <param name="bytes"></param>
            <param name="mat"></param>
        </member>
        <member name="M:GoblinXNA.Helpers.MatrixHelper.ConvertFromUnoptimizedBytes(System.Byte[],System.Int32,Microsoft.Xna.Framework.Matrix@)">
            <summary>
            Converts an array of bytes containing transformation (rotation, scale, and
            translation) into a matrix. Use this method to convert back the information
            packed by ConvertToUnptimizedBytes method.
            </summary>
            <param name="bytes"></param>
            <param name="startIndex"></param>
            <param name="mat"></param>
        </member>
        <member name="M:GoblinXNA.Helpers.MatrixHelper.ToFloats(Microsoft.Xna.Framework.Matrix)">
            <summary>
            Converts a matrix to an array of 16 floats.
            </summary>
            <param name="mat"></param>
            <returns></returns>
        </member>
        <member name="M:GoblinXNA.Helpers.MatrixHelper.PrintMatrix(Microsoft.Xna.Framework.Matrix)">
            <summary>
            Prints out a matrix to the console.
            </summary>
            <param name="mat"></param>
        </member>
        <member name="M:GoblinXNA.Helpers.MatrixHelper.Vector3ToMatrix(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Converts a rotation vector into a rotation matrix.
            </summary>
            <param name="Rotation"></param>
            <remarks>
            http://www.innovativegames.net/blog/blog/2009/03/18/matrices-quaternions-and-euler-angle-vectors/
            </remarks>
            <returns></returns>
        </member>
        <member name="M:GoblinXNA.Helpers.MatrixHelper.PrepareUnproject(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
            <summary>
            Prepares for the Unproject function (which is 30 times faster than Viewport.Unproject)
            </summary>
            <param name="viewportX"></param>
            <param name="viewportY"></param>
            <param name="viewportWidth"></param>
            <param name="viewportHeight"></param>
            <param name="maxDepth"></param>
            <param name="minDepth"></param>
            <param name="viewMat"></param>
            <param name="projMat"></param>
        </member>
        <member name="M:GoblinXNA.Helpers.MatrixHelper.Unproject(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Unproject method that is 30 times faster than the Viewport.Unproject function due to
            the usage of pre-computed values. Make sure to call PrepareUnproject method for the
            pre-computation to happen, and then call this Unproject method unless any of the variables
            passed in to PrepareUnproject changes (if they do change, make sure to call it again with
            update values to guarantee correct unprojection).
            </summary>
            <remarks>
            This code is from MSDN forum (http://forums.create.msdn.com/forums/p/57082/348602.aspx).
            Credit goes to nathanjervis. 
            </remarks>
            <see cref="M:GoblinXNA.Helpers.MatrixHelper.PrepareUnproject(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)"/>
            <param name="screenSpace"></param>
        </member>
        <member name="M:GoblinXNA.Helpers.MatrixHelper.PrepareProject(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
            <summary>
            
            </summary>
            <param name="world"></param>
            <param name="view"></param>
            <param name="projection"></param>
        </member>
        <member name="M:GoblinXNA.Helpers.MatrixHelper.Project(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Project method
            </summary>
            <remarks>
            This code is based on the HLSL code provided on 
            http://social.msdn.microsoft.com/Forums/en-US/xnaframework/thread/fa479f61-c31f-4b73-b7a4-29d101b79048/ .
            Credit goes to riemerg. 
            </remarks>
            <see cref="M:GoblinXNA.Helpers.MatrixHelper.PrepareProject(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)"/>
            <param name="worldPos"></param>
            <param name="screenSpace"></param>
        </member>
        <member name="P:GoblinXNA.Helpers.MatrixHelper.Empty">
            <summary>
            An empty (all zero) matrix.
            </summary>
        </member>
        <member name="T:GoblinXNA.Helpers.RandomHelper">
            <summary>
            A helper class that implements various functions for generating random numbers.
            </summary>
        </member>
        <member name="F:GoblinXNA.Helpers.RandomHelper.globalRandomGenerator">
            <summary>
            Global random generator
            </summary>
        </member>
        <member name="M:GoblinXNA.Helpers.RandomHelper.GenerateNewRandomGenerator">
            <summary>
            Generate a new random generator with help of WindowsHelper.GetPerformanceCounter.
            Also used for all GetRandom methods here.
            </summary>
            <returns>Random</returns>
        </member>
        <member name="M:GoblinXNA.Helpers.RandomHelper.GetRandomInt(System.Int32,System.Int32)">
            <summary>
            Get random int
            </summary>
            <param name="max">Maximum</param>
            <returns>Int</returns>
        </member>
        <member name="M:GoblinXNA.Helpers.RandomHelper.GetRandomFloat(System.Single,System.Single)">
            <summary>
            Get random float between min and max
            </summary>
            <param name="min">Min</param>
            <param name="max">Max</param>
            <returns>Float</returns>
        </member>
        <member name="M:GoblinXNA.Helpers.RandomHelper.GetRandomByte(System.Byte,System.Byte)">
            <summary>
            Get random byte between min and max
            </summary>
            <param name="min">Min</param>
            <param name="max">Max</param>
            <returns>Byte</returns>
        </member>
        <member name="M:GoblinXNA.Helpers.RandomHelper.GetRandomVector2(System.Single,System.Single)">
            <summary>
            Get random Vector2
            </summary>
            <param name="min">Minimum for each component</param>
            <param name="max">Maximum for each component</param>
            <returns>Vector2</returns>
        </member>
        <member name="M:GoblinXNA.Helpers.RandomHelper.GetRandomVector3(System.Single,System.Single)">
            <summary>
            Get random Vector3
            </summary>
            <param name="min">Minimum for each component</param>
            <param name="max">Maximum for each component</param>
            <returns>Vector3</returns>
        </member>
        <member name="P:GoblinXNA.Helpers.RandomHelper.RandomColor">
            <summary>
            Get random color
            </summary>
            <returns>Color</returns>
        </member>
        <member name="P:GoblinXNA.Helpers.RandomHelper.RandomNormalVector3">
            <summary>
            Get random normal Vector3
            </summary>
            <returns>Vector3</returns>
        </member>
        <member name="M:GoblinXNA.Helpers.RectangleHelper.XToRes(System.Int32)">
            <summary>
            XToRes helper method to convert 1024x640 to the current
            screen resolution. Used to position UI elements.
            </summary>
            <param name="xIn1024px">X in 1024px width resolution</param>
            <returns>Int</returns>
        </member>
        <member name="M:GoblinXNA.Helpers.RectangleHelper.YToRes(System.Int32)">
            <summary>
            YToRes helper method to convert 1024x640 to the current
            screen resolution. Used to position UI elements.
            </summary>
            <param name="yIn640px">Y in 640px height</param>
            <returns>Int</returns>
        </member>
        <member name="M:GoblinXNA.Helpers.RectangleHelper.YToRes768(System.Int32)">
            <summary>
            YTo res 768
            </summary>
            <param name="yIn768px">Y in 768px</param>
            <returns>Int</returns>
        </member>
        <member name="M:GoblinXNA.Helpers.RectangleHelper.XToRes1600(System.Int32)">
            <summary>
            XTo res 1600
            </summary>
            <param name="xIn1600px">X in 1600px</param>
            <returns>Int</returns>
        </member>
        <member name="M:GoblinXNA.Helpers.RectangleHelper.YToRes1200(System.Int32)">
            <summary>
            YTo res 1200
            </summary>
            <param name="yIn1200px">Y in 1200px</param>
            <returns>Int</returns>
        </member>
        <member name="M:GoblinXNA.Helpers.RectangleHelper.XToRes1400(System.Int32)">
            <summary>
            XTo res 1400
            </summary>
            <param name="xIn1400px">X in 1400px</param>
            <returns>Int</returns>
        </member>
        <member name="M:GoblinXNA.Helpers.RectangleHelper.YToRes1050(System.Int32)">
            <summary>
            YTo res 1200
            </summary>
            <param name="yIn1050px">Y in 1050px</param>
            <returns>Int</returns>
        </member>
        <member name="M:GoblinXNA.Helpers.RectangleHelper.CalcRectangle(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Calc rectangle, helper method to convert from our images (1024)
            to the current resolution. Everything will stay in the 16/9
            format of the textures.
            </summary>
            <param name="relX">X</param>
            <param name="relY">Y</param>
            <param name="relWidth">Width</param>
            <param name="relHeight">Height</param>
            <returns>Rectangle</returns>
        </member>
        <member name="M:GoblinXNA.Helpers.RectangleHelper.CalcRectangleWithBounce(System.Int32,System.Int32,System.Int32,System.Int32,System.Single)">
            <summary>
            Calc rectangle with bounce effect, same as CalcRectangle, but sizes
            the resulting rect up and down depending on the bounceEffect value.
            </summary>
            <param name="relX">Rel x</param>
            <param name="relY">Rel y</param>
            <param name="relWidth">Rel width</param>
            <param name="relHeight">Rel height</param>
            <param name="bounceEffect">Bounce effect</param>
            <returns>Rectangle</returns>
        </member>
        <member name="M:GoblinXNA.Helpers.RectangleHelper.CalcRectangleKeep4To3(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Calc rectangle, same method as CalcRectangle, but keep the 4 to 3
            ratio for the image. The Rect will take same screen space in
            16:9 and 4:3 modes. e.g., Buttons should be displayed this way.
            Should be used for 1024px width graphics.
            </summary>
            <param name="relX">Rel x</param>
            <param name="relY">Rel y</param>
            <param name="relWidth">Rel width</param>
            <param name="relHeight">Rel height</param>
            <returns>Rectangle</returns>
        </member>
        <member name="M:GoblinXNA.Helpers.RectangleHelper.CalcRectangleKeep4To3(Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Calc rectangle, same method as CalcRectangle, but keep the 4 to 3
            ratio for the image. The Rect will take same screen space in
            16:9 and 4:3 modes. e.g., Buttons should be displayed this way.
            Should be used for 1024px width graphics.
            </summary>
            <param name="gfxRect">Gfx rectangle</param>
            <returns>Rectangle</returns>
        </member>
        <member name="M:GoblinXNA.Helpers.RectangleHelper.CalcRectangle1600(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Calc rectangle for 1600px width graphics.
            </summary>
            <param name="relX">Rel x</param>
            <param name="relY">Rel y</param>
            <param name="relWidth">Rel width</param>
            <param name="relHeight">Rel height</param>
            <returns>Rectangle</returns>
        </member>
        <member name="M:GoblinXNA.Helpers.RectangleHelper.CalcRectangle2000(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Calc rectangle 2000px, just a helper to scale stuff down
            </summary>
            <param name="relX">Rel x</param>
            <param name="relY">Rel y</param>
            <param name="relWidth">Rel width</param>
            <param name="relHeight">Rel height</param>
            <returns>Rectangle</returns>
        </member>
        <member name="M:GoblinXNA.Helpers.RectangleHelper.CalcRectangleKeep4To3AlignBottom(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Calc rectangle keep 4 to 3 align bottom
            </summary>
            <param name="relX">Rel x</param>
            <param name="relY">Rel y</param>
            <param name="relWidth">Rel width</param>
            <param name="relHeight">Rel height</param>
            <returns>Rectangle</returns>
        </member>
        <member name="M:GoblinXNA.Helpers.RectangleHelper.CalcRectangleKeep4To3AlignBottomRight(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Calc rectangle keep 4 to 3 align bottom right
            </summary>
            <param name="relX">Rel x</param>
            <param name="relY">Rel y</param>
            <param name="relWidth">Rel width</param>
            <param name="relHeight">Rel height</param>
            <returns>Rectangle</returns>
        </member>
        <member name="M:GoblinXNA.Helpers.RectangleHelper.CalcRectangleCenteredWithGivenHeight(System.Int32,System.Int32,System.Int32,Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Calc rectangle centered with given height.
            This one uses relX and relY points as the center for our rect.
            The relHeight is then calculated and we align everything
            with help of gfxRect (determinating the width).
            Very useful for buttons, logos and other centered UI textures.
            </summary>
            <param name="relX">Rel x</param>
            <param name="relY">Rel y</param>
            <param name="relHeight">Rel height</param>
            <param name="gfxRect">Gfx rectangle</param>
            <returns>Rectangle</returns>
        </member>
        <member name="T:GoblinXNA.Helpers.Vector3Helper">
            <summary>
            A helper class that implements various useful static functions that the Vector3 class
            does not support. 
            </summary>
        </member>
        <member name="M:GoblinXNA.Helpers.Vector3Helper.GetDimensions(Microsoft.Xna.Framework.BoundingBox)">
            <summary>
            Gets the x, y, and z dimensions of a bounding box.
            </summary>
            <param name="box"></param>
            <returns>The x, y, and z dimension of a bounding box stored in Vector3 class</returns>
        </member>
        <member name="M:GoblinXNA.Helpers.Vector3Helper.GetVector3(Microsoft.Xna.Framework.Vector4)">
            <summary>
            Converts from Vector4 type to Vector3 type by dropping the w component.
            </summary>
            <param name="v4">A Vector4 object</param>
            <returns>A Vector3 object without the w component</returns>
        </member>
        <member name="M:GoblinXNA.Helpers.Vector3Helper.GetNormal(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Calculate the normal perpendicular to two vectors v0->v1 and v0->v2 using right hand rule.
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:GoblinXNA.Helpers.Vector3Helper.ToFloats(Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Converts a Vector3 object to an array of three floats in the order of x, y, and z.
            </summary>
            <param name="v3"></param>
            <returns></returns>
        </member>
        <member name="M:GoblinXNA.Helpers.Vector3Helper.ExtractAngles(Microsoft.Xna.Framework.Matrix)">
             <summary>
             http://www.codeguru.com/forum/archive/index.php/t-329530.html
             
             For a homogeneous geometrical transformation matrix, you can get the roll, pitch and yaw angles, 
             following the TRPY convention, using the following formulas:
            
              roll (rotation around z) : atan2(xy, xx)
              pitch (rotation around y) : -arcsin(xz)
              yaw (rotation around x) : atan2(yz,zz)
            
              where the matrix is defined in the form:
            
              [
               xx, yx, zx, px;
               xy, yy, zy, py;
               xz, yz, zz, pz;
               0, 0, 0, 1
              ]
             </summary>
             <param name="mat"></param>
             <returns>x=pitch, y=yaw, z=roll</returns>
        </member>
        <member name="M:GoblinXNA.Helpers.Vector3Helper.AngleTo(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Returns Euler angles that point from one point to another.
            </summary>
            <param name="from"></param>
            <param name="location"></param>
            <remarks>
            http://www.innovativegames.net/blog/blog/2009/03/18/matrices-quaternions-and-euler-angle-vectors/
            </remarks>
            <returns></returns>
        </member>
        <member name="M:GoblinXNA.Helpers.Vector3Helper.QuaternionToEulerAngleVector3(Microsoft.Xna.Framework.Quaternion)">
            <summary>
            Convert a quaternion (TrackingTools type) to euler angles (Y, Z, X)
            Y = Heading  (Yaw)
            Z = Attitude (Pitch)
            X = Bank     (Roll)
            </summary>
            <param name="rotation"></param>
            <remarks>
            From Martin Baker (http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToEuler/index.htm)
            conventions:
             - input and output units are both in radians
             - euler angles are about global axes
             - euler + angle is right-handed
            </remarks>
            <returns></returns>
        </member>
        <member name="M:GoblinXNA.Helpers.Vector3Helper.QuaternionToEuler(System.Double,System.Double,System.Double,System.Double,System.Single@,System.Single@,System.Single@)">
            <summary>
            Convert a quaternion (TrackingTools type) to euler angles (Y, Z, X)
            Y = Heading  (Yaw)
            Z = Attitude (Pitch)
            X = Bank     (Roll)
            </summary>
            <param name="rotation"></param>
            <remarks>
            From Martin Baker (http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToEuler/index.htm)
            conventions:
             - input and output units are both in radians
             - euler angles are about global axes
             - euler + angle is right-handed
            </remarks>
            <returns></returns>
        </member>
        <member name="M:GoblinXNA.Helpers.Vector3Helper.MatrixToEulerAngleVector3(Microsoft.Xna.Framework.Matrix)">
            <summary>
            Converts a Rotation Matrix to a quaternion, then into a Vector3 containing
            Euler angles (X: Pitch, Y: Yaw, Z: Roll)
            </summary>
            <param name="Rotation"></param>
            <remarks>
            http://www.innovativegames.net/blog/blog/2009/03/18/matrices-quaternions-and-euler-angle-vectors/
            </remarks>
            <returns></returns>
        </member>
        <member name="M:GoblinXNA.Helpers.Vector3Helper.RadiansToDegrees(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Converts Euler angles from radian format to degree format.
            </summary>
            <param name="Vector"></param>
            <remarks>
            http://www.innovativegames.net/blog/blog/2009/03/18/matrices-quaternions-and-euler-angle-vectors/
            </remarks>
            <returns></returns>
        </member>
        <member name="M:GoblinXNA.Helpers.Vector3Helper.DegreesToRadians(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Converts Euler angles from degree format to radian format.
            </summary>
            <param name="Vector"></param>
            <remarks>
            http://www.innovativegames.net/blog/blog/2009/03/18/matrices-quaternions-and-euler-angle-vectors/
            </remarks>
            <returns></returns>
        </member>
        <member name="T:GoblinXNA.Helpers.XNATweener.TweeningFunction">
            <summary>
            This is the delegate of the tweening functions.
            All functions must calculate the current position of the tweener based on how long has elapsed,
            where to start, the total amount to move and the total duration.
            See the library classes for several useful tweening functions.
            </summary>
            <param name="timeElapsed">The time that has elapsed since the beginning of the tweener.</param>
            <param name="start">Where did the tweener start</param>
            <param name="change">How much will the tweener move from start to end</param>
            <param name="duration">The total duration of tweening.</param>
            <returns></returns>
        </member>
        <member name="T:GoblinXNA.Helpers.XNATweener.BaseTweener`1">
            <summary>
            The BaseTweener class handles moving a Position from start to end in the specified time using a specific function.
            Whenever the Tweener is updated, which is done by a call to Update, it will move the Position further along 
            the path to completion. On each update an updated event is called so you can respond to the Position change.
            When the Tweener has reached the end it will stop and signal that is it finished using the Ended event.
            It is possible to stop the Tweener, pausing it until it is started again.
            You can also reset the Tweener to repeat the same movement, reset it with new parameters or even reverse the
            direction of the tweener.
            
            Note that this is an abstract class, refer to the concrete subclasses for tweening the value you want tweened.
            </summary>
        </member>
        <member name="M:GoblinXNA.Helpers.XNATweener.BaseTweener`1.#ctor(`0,`0,System.Single,GoblinXNA.Helpers.XNATweener.TweeningFunction)">
            <summary>
            Create a Tweener with info on where to move from and to, how long it should take and the function to use.
            </summary>
            <param name="from">The starting position</param>
            <param name="to">The position reached at the end</param>
            <param name="duration">How long befor we reach the end?</param>
            <param name="tweeningFunction">Which function to use for calculating the current position.</param>
        </member>
        <member name="M:GoblinXNA.Helpers.XNATweener.BaseTweener`1.#ctor(`0,`0,System.TimeSpan,GoblinXNA.Helpers.XNATweener.TweeningFunction)">
            <summary>
            Create a Tweener with info on where to move from and to, how long it should take and the function to use.
            </summary>
            <param name="from">The starting position</param>
            <param name="to">The position reached at the end</param>
            <param name="duration">How long befor we reach the end?</param>
            <param name="tweeningFunction">Which function to use for calculating the current position.</param>
        </member>
        <member name="M:GoblinXNA.Helpers.XNATweener.BaseTweener`1.#ctor(GoblinXNA.Helpers.XNATweener.TweeningFunction)">
            <summary>
            Create a stopped tweener with no information on where to move from and to.
            Useful in conjunction with the Reset(from, to) call to ready a tweener for later use or lazy
            instantiation of a tweener in a property.
            </summary>
            <param name="duration">The duration of tweening.</param>
            <param name="tweeningFunction">Which function to use for calculating the current position.</param>
        </member>
        <member name="M:GoblinXNA.Helpers.XNATweener.BaseTweener`1.#ctor(`0,`0,GoblinXNA.Helpers.XNATweener.TweeningFunction,System.Single)">
            <summary>
            Create a stopped tweener with no information on where to move from and to.
            Useful in conjunction with the Reset(from, to) call to ready a tweener for later use or lazy
            instantiation of a tweener in a property.
            </summary>
            <param name="duration">The duration of tweening.</param>
            <param name="tweeningFunction">Which function to use for calculating the current position.</param>
        </member>
        <member name="M:GoblinXNA.Helpers.XNATweener.BaseTweener`1.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Update the position of the tweener using the current game time.
            If the position is paused or has finished, no update to the position or the elapsed time will happen.
            </summary>
            <param name="gameTime">The current game time.</param>
        </member>
        <member name="M:GoblinXNA.Helpers.XNATweener.BaseTweener`1.UpdatePosition(System.Single,`0,`0,System.Single)">
            <summary>
            Do the actual update of the position.
            Usually we will use the tweening function here.
            </summary>
            <param name="timeElapsed">The time that has elapsed since the beginning of the tweener.</param>
            <param name="start">Where did the tweener start</param>
            <param name="change">How much will the tweener move from start to end</param>
            <param name="duration">The total duration of tweening.</param>
        </member>
        <member name="M:GoblinXNA.Helpers.XNATweener.BaseTweener`1.CalculateChange(`0,`0)">
            <summary>
            Calculate the change value. Usually this is to - from.
            </summary>
            <param name="to">Where do we want to end</param>
            <param name="from">Where we are now</param>
            <returns>Returns the new change value</returns>
        </member>
        <member name="M:GoblinXNA.Helpers.XNATweener.BaseTweener`1.CalculateEndPosition">
            <summary>
            Calculate the position we want to end up in. This is nessecary as to is not saved.
            Usually this is from + change
            </summary>
            <returns>Returns the end position when the tweener is finished.</returns>
        </member>
        <member name="M:GoblinXNA.Helpers.XNATweener.BaseTweener`1.CalculateDurationFromSpeed(System.Single)">
            <summary>
            Calculate the duration of the tween in seconds given the average speed of movement.
            Usually this is change / speed
            </summary>
            <param name="speed">The average movement speed</param>
            <returns>The duration of the tweener</returns>
        </member>
        <member name="M:GoblinXNA.Helpers.XNATweener.BaseTweener`1.Start">
            <summary>
            Start the tweener if it is paused. If it is already running, nothing happens.
            </summary>
        </member>
        <member name="M:GoblinXNA.Helpers.XNATweener.BaseTweener`1.Stop">
            <summary>
            Stop the tweener if it is running. If it is already stopped, nothing happens.
            </summary>
        </member>
        <member name="M:GoblinXNA.Helpers.XNATweener.BaseTweener`1.Play">
            <summary>
            Start the tweener from its current position if it is paused. If it is already playing, nothing happens.
            </summary>
        </member>
        <member name="M:GoblinXNA.Helpers.XNATweener.BaseTweener`1.Pause">
            <summary>
            <para>Pause the tweener if it is playing. If it is already paused, nothing happens.</para>
            <para>The tweener can be started again by calling Play</para>
            </summary>
        </member>
        <member name="M:GoblinXNA.Helpers.XNATweener.BaseTweener`1.Reset">
            <summary>
            <para>Reset the tweener to start again from the beginning.</para>
            <para>If the tweener is stopped it will not start, use Restart if that is what you want.</para>
            </summary>
        </member>
        <member name="M:GoblinXNA.Helpers.XNATweener.BaseTweener`1.Reset(`0)">
            <summary>
            Reset the tweener to move to a new position from the current position.
            Great for extending movement from the current position when something happens.
            </summary>
            <param name="to">The new position to move to</param>
        </member>
        <member name="M:GoblinXNA.Helpers.XNATweener.BaseTweener`1.Reset(`0,System.TimeSpan)">
            <summary>
            Reset the tweener with a new set of from and to positons.
            </summary>
            <param name="to">The new position to move to</param>
            <param name="duration">The new duration of the tweener</param>
        </member>
        <member name="M:GoblinXNA.Helpers.XNATweener.BaseTweener`1.Reset(`0,System.Single)">
            <summary>
            Reset the tweener with a new set of from and to positons.
            </summary>
            <param name="to">The new position to move to</param>
            <param name="duration">The new average speed of tweener movement</param>
        </member>
        <member name="M:GoblinXNA.Helpers.XNATweener.BaseTweener`1.Reset(`0,`0,System.TimeSpan)">
            <summary>
            Reset the tweener with a new set of from and to positons.
            </summary>
            <param name="to">The new position to move to</param>
            <param name="duration">The new duration of the tweener</param>
        </member>
        <member name="M:GoblinXNA.Helpers.XNATweener.BaseTweener`1.Reset(`0,`0,System.Single)">
            <summary>
            Reset the tweener with a new set of from and to positons.
            </summary>
            <param name="to">The new position to move to</param>
            <param name="duration">The new average speed of tweener movement</param>
        </member>
        <member name="M:GoblinXNA.Helpers.XNATweener.BaseTweener`1.Restart">
            <summary>
            Resets the tweener and starts it playing if it is paused.
            </summary>
        </member>
        <member name="M:GoblinXNA.Helpers.XNATweener.BaseTweener`1.Reverse">
            <summary>
            Reverses movement of the tweener from the current position back to where it came.
            This can reverse the tweener before it is done, but be aware that reversing the tweener again
            later will not return it to its original destination, but to the point where it was reversed
            for the first time.
            </summary>
        </member>
        <member name="M:GoblinXNA.Helpers.XNATweener.BaseTweener`1.ToString">
            <summary>
            Gives a textual representation of the tweener.
            </summary>
            <returns></returns>
        </member>
        <member name="P:GoblinXNA.Helpers.XNATweener.BaseTweener`1.Position">
            <summary>
            This is the current position of the tweener. It cannot be manipulted directly.
            Use the Reset method to alter the behaviour of the tweener.
            </summary>
        </member>
        <member name="P:GoblinXNA.Helpers.XNATweener.BaseTweener`1.from">
            <summary>
            This is the positon where the tweener started.
            </summary>
        </member>
        <member name="P:GoblinXNA.Helpers.XNATweener.BaseTweener`1.change">
            <summary>
            This is the change to the tweener over its lifetime.
            </summary>
        </member>
        <member name="P:GoblinXNA.Helpers.XNATweener.BaseTweener`1.duration">
            <summary>
            This is the duration of the tweener in seconds.
            </summary>
        </member>
        <member name="P:GoblinXNA.Helpers.XNATweener.BaseTweener`1.elapsed">
            <summary>
            This is the total time that has elapsed since the tweener last started.
            </summary>
        </member>
        <member name="P:GoblinXNA.Helpers.XNATweener.BaseTweener`1.Running">
            <summary>
            Is the tweener currently running. If the tweener is not running, calling Update will not move the
            tweener.
            </summary>
        </member>
        <member name="P:GoblinXNA.Helpers.XNATweener.BaseTweener`1.Playing">
            <summary>
            <para>Is the tweener currently playing.</para> 
            <para>If the tweener is not playing, calling Update will not move the tweener.</para>
            <para>The tweener can be controlled by calling the Play and Pause methods</para>
            </summary>
        </member>
        <member name="P:GoblinXNA.Helpers.XNATweener.BaseTweener`1.tweeningFunction">
            <summary>
            This is the function that determines the actual movement of the tweener.
            </summary>
        </member>
        <member name="E:GoblinXNA.Helpers.XNATweener.BaseTweener`1.PositionChanged">
            <summary>
            Event that is called whenever the position of the tweener has changed
            </summary>
        </member>
        <member name="E:GoblinXNA.Helpers.XNATweener.BaseTweener`1.Ended">
            <summary>
            Event that is called when the tweener reaches the end. At this point in time the tweener is guaranteed to
            to be at the ending position no matter how many times it was stopped and started.
            </summary>
        </member>
        <member name="M:GoblinXNA.Helpers.XNATweener.ColorTweener.#ctor(Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color,System.Single,GoblinXNA.Helpers.XNATweener.TweeningFunction)">
            <summary>
            Create a Tweener with info on where to move from and to, how long it should take and the function to use.
            </summary>
            <param name="from">The starting position</param>
            <param name="to">The position reached at the end</param>
            <param name="duration">How long befor we reach the end?</param>
            <param name="tweeningFunction">Which function to use for calculating the current position.</param>
        </member>
        <member name="M:GoblinXNA.Helpers.XNATweener.ColorTweener.#ctor(Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color,System.TimeSpan,GoblinXNA.Helpers.XNATweener.TweeningFunction)">
            <summary>
            Create a Tweener with info on where to move from and to, how long it should take and the function to use.
            </summary>
            <param name="from">The starting position</param>
            <param name="to">The position reached at the end</param>
            <param name="duration">How long befor we reach the end?</param>
            <param name="tweeningFunction">Which function to use for calculating the current position.</param>
        </member>
        <member name="M:GoblinXNA.Helpers.XNATweener.ColorTweener.#ctor(GoblinXNA.Helpers.XNATweener.TweeningFunction)">
            <summary>
            Create a stopped tweener with no information on where to move from and to.
            Useful in conjunction with the Reset(from, to) call to ready a tweener for later use or lazy
            instantiation of a tweener in a property.
            </summary>
            <param name="duration">The duration of tweening.</param>
            <param name="tweeningFunction">Which function to use for calculating the current position.</param>
        </member>
        <member name="M:GoblinXNA.Helpers.XNATweener.ColorTweener.#ctor(Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color,GoblinXNA.Helpers.XNATweener.TweeningFunction,System.Single)">
            <summary>
            Create a Tweener with info on where to move from and to, but set the duration using the movement
            speed instead of a set timespan.
            Note that the speed is used to calculate how fast the tweener should move if it moved in a linear
            fashion. This can be upset by the tweening function that can cause the actual movement speed to vary
            considerably. So the speed can be looked at as an average speed during the lifetime of the tweener.
            </summary>
            <param name="from">The starting position</param>
            <param name="to">The position reached at the end</param>
            <param name="duration">The average movement speed of the tweener</param>
            <param name="tweeningFunction">Which function to use for calculating the current position.</param>
        </member>
        <member name="M:GoblinXNA.Helpers.XNATweener.ColorTweener.UpdatePosition(System.Single,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color,System.Single)">
            <summary>
            Do the actual update of the position.
            Usually we will use the tweening function here.
            </summary>
            <param name="elapsed"></param>
            <param name="from"></param>
            <param name="change">How much will the tweener move from start to end</param>
            <param name="duration">The total duration of tweening.</param>
        </member>
        <member name="M:GoblinXNA.Helpers.XNATweener.ColorTweener.CalculateChange(Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color)">
            <summary>
            Calculate the change value. Usually this is to - from.
            </summary>
            <param name="to">Where do we want to end</param>
            <param name="from">Where we are now</param>
            <returns>Returns the new change value</returns>
        </member>
        <member name="M:GoblinXNA.Helpers.XNATweener.ColorTweener.CalculateEndPosition">
            <summary>
            Calculate the position we want to end up in. This is nessecary as to is not saved.
            Usually this is from + change
            </summary>
            <returns>
            Returns the end position when the tweener is finished.
            </returns>
        </member>
        <member name="M:GoblinXNA.Helpers.XNATweener.ColorTweener.CalculateDurationFromSpeed(System.Single)">
            <summary>
            Calculate the duration of the tween in seconds given the average speed of movement.
            Usually this is change / speed
            </summary>
            <param name="speed">The average movement speed</param>
            <returns>The duration of the tweener</returns>
        </member>
        <member name="T:GoblinXNA.Helpers.XNATweener.Loop">
            <summary>
            <para>The Loop class is a static class for easy loop control of the Tweener.</para>
            <para>You can loop continuousely FrontToBack or BackAndForth or for a specific number of times.</para>
            <para>It can be used either by the static methods on this class or by the corresponding methods on the Tweener classes.</para>
            </summary>
        </member>
        <member name="T:GoblinXNA.Helpers.XNATweener.Tweener">
            <summary>
            This is a Tweener for single float values.
            </summary>
        </member>
        <member name="M:GoblinXNA.Helpers.XNATweener.Tweener.#ctor(System.Single,System.Single,System.Single,GoblinXNA.Helpers.XNATweener.TweeningFunction)">
            <summary>
            Create a Tweener with info on where to move from and to, how long it should take and the function to use.
            </summary>
            <param name="from">The starting position</param>
            <param name="to">The position reached at the end</param>
            <param name="duration">How long befor we reach the end?</param>
            <param name="tweeningFunction">Which function to use for calculating the current position.</param>
        </member>
        <member name="M:GoblinXNA.Helpers.XNATweener.Tweener.#ctor(System.Single,System.Single,System.TimeSpan,GoblinXNA.Helpers.XNATweener.TweeningFunction)">
            <summary>
            Create a Tweener with info on where to move from and to, how long it should take and the function to use.
            </summary>
            <param name="from">The starting position</param>
            <param name="to">The position reached at the end</param>
            <param name="duration">How long befor we reach the end?</param>
            <param name="tweeningFunction">Which function to use for calculating the current position.</param>
        </member>
        <member name="M:GoblinXNA.Helpers.XNATweener.Tweener.#ctor(GoblinXNA.Helpers.XNATweener.TweeningFunction)">
            <summary>
            Create a stopped tweener with no information on where to move from and to.
            Useful in conjunction with the Reset(from, to) call to ready a tweener for later use or lazy
            instantiation of a tweener in a property.
            </summary>
            <param name="tweeningFunction">Which function to use for calculating the current position.</param>
        </member>
        <member name="M:GoblinXNA.Helpers.XNATweener.Tweener.#ctor(System.Single,System.Single,GoblinXNA.Helpers.XNATweener.TweeningFunction,System.Single)">
            <summary>
            Create a Tweener with info on where to move from and to, but set the duration using the movement
            speed instead of a set timespan.
            Note that the speed is used to calculate how fast the tweener should move if it moved in a linear
            fashion. This can be upset by the tweening function that can cause the actual movement speed to vary
            considerably. So the speed can be looked at as an average speed during the lifetime of the tweener.
            </summary>
            <param name="from">The starting position</param>
            <param name="to">The position reached at the end</param>
            <param name="duration">The average movement speed of the tweener</param>
            <param name="tweeningFunction">Which function to use for calculating the current position.</param>
        </member>
        <member name="M:GoblinXNA.Helpers.XNATweener.Tweener.UpdatePosition(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Do the actual update of the position.
            </summary>
            <param name="timeElapsed">The time that has elapsed since the beginning of the tweener.</param>
            <param name="start">Where did the tweener start</param>
            <param name="change">How much will the tweener move from start to end</param>
            <param name="duration">The total duration of tweening.</param>
        </member>
        <member name="M:GoblinXNA.Helpers.XNATweener.Tweener.CalculateChange(System.Single,System.Single)">
            <summary>
            Calculate the change value.
            </summary>
            <param name="to">Where do we want to end</param>
            <param name="from">Where we are now</param>
            <returns>Returns the new change value</returns>
        </member>
        <member name="M:GoblinXNA.Helpers.XNATweener.Tweener.CalculateEndPosition">
            <summary>
            Calculate the position we want to end up in. This is nessecary as to is not saved.
            </summary>
            <returns>Returns the end position when the tweener is finished.</returns>
        </member>
        <member name="M:GoblinXNA.Helpers.XNATweener.Tweener.CalculateDurationFromSpeed(System.Single)">
            <summary>
            Calculate the duration of the tween in seconds given the average speed of movement.
            </summary>
            <param name="speed">The average movement speed</param>
            <returns>The duration of the tweener</returns>
        </member>
        <member name="T:GoblinXNA.Helpers.XNATweener.Vector2Tweener">
            <summary>
            This is a tweener for Vector2 values
            </summary>
        </member>
        <member name="M:GoblinXNA.Helpers.XNATweener.Vector2Tweener.#ctor(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single,GoblinXNA.Helpers.XNATweener.TweeningFunction)">
            <summary>
            Create a Tweener with info on where to move from and to, how long it should take and the function to use.
            </summary>
            <param name="from">The starting position</param>
            <param name="to">The position reached at the end</param>
            <param name="duration">How long befor we reach the end?</param>
            <param name="tweeningFunction">Which function to use for calculating the current position.</param>
        </member>
        <member name="M:GoblinXNA.Helpers.XNATweener.Vector2Tweener.#ctor(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.TimeSpan,GoblinXNA.Helpers.XNATweener.TweeningFunction)">
            <summary>
            Create a Tweener with info on where to move from and to, how long it should take and the function to use.
            </summary>
            <param name="from">The starting position</param>
            <param name="to">The position reached at the end</param>
            <param name="duration">How long befor we reach the end?</param>
            <param name="tweeningFunction">Which function to use for calculating the current position.</param>
        </member>
        <member name="M:GoblinXNA.Helpers.XNATweener.Vector2Tweener.#ctor(GoblinXNA.Helpers.XNATweener.TweeningFunction)">
            <summary>
            Create a stopped tweener with no information on where to move from and to.
            Useful in conjunction with the Reset(from, to) call to ready a tweener for later use or lazy
            instantiation of a tweener in a property.
            </summary>
            <param name="duration">The duration of tweening.</param>
            <param name="tweeningFunction">Which function to use for calculating the current position.</param>
        </member>
        <member name="M:GoblinXNA.Helpers.XNATweener.Vector2Tweener.#ctor(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,GoblinXNA.Helpers.XNATweener.TweeningFunction,System.Single)">
            <summary>
            Create a Tweener with info on where to move from and to, but set the duration using the movement
            speed instead of a set timespan.
            Note that the speed is used to calculate how fast the tweener should move if it moved in a linear
            fashion. This can be upset by the tweening function that can cause the actual movement speed to vary
            considerably. So the speed can be looked at as an average speed during the lifetime of the tweener.
            </summary>
            <param name="from">The starting position</param>
            <param name="to">The position reached at the end</param>
            <param name="duration">The average movement speed of the tweener</param>
            <param name="tweeningFunction">Which function to use for calculating the current position.</param>
        </member>
        <member name="M:GoblinXNA.Helpers.XNATweener.Vector2Tweener.UpdatePosition(System.Single,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            Do the actual update of the position.
            Usually we will use the tweening function here.
            </summary>
            <param name="elapsed"></param>
            <param name="from"></param>
            <param name="change">How much will the tweener move from start to end</param>
            <param name="duration">The total duration of tweening.</param>
        </member>
        <member name="M:GoblinXNA.Helpers.XNATweener.Vector2Tweener.CalculateChange(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Calculate the change value. Usually this is to - from.
            </summary>
            <param name="to">Where do we want to end</param>
            <param name="from">Where we are now</param>
            <returns>Returns the new change value</returns>
        </member>
        <member name="M:GoblinXNA.Helpers.XNATweener.Vector2Tweener.CalculateEndPosition">
            <summary>
            Calculate the position we want to end up in. This is nessecary as to is not saved.
            Usually this is from + change
            </summary>
            <returns>
            Returns the end position when the tweener is finished.
            </returns>
        </member>
        <member name="M:GoblinXNA.Helpers.XNATweener.Vector2Tweener.CalculateDurationFromSpeed(System.Single)">
            <summary>
            Calculate the duration of the tween in seconds given the average speed of movement.
            Usually this is change / speed
            </summary>
            <param name="speed">The average movement speed</param>
            <returns>The duration of the tweener</returns>
        </member>
        <member name="T:GoblinXNA.Helpers.XNATweener.Vector3Tweener">
            <summary>
            This is a tweener for Vector3 values
            </summary>
        </member>
        <member name="M:GoblinXNA.Helpers.XNATweener.Vector3Tweener.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,GoblinXNA.Helpers.XNATweener.TweeningFunction)">
            <summary>
            Create a Tweener with info on where to move from and to, how long it should take and the function to use.
            </summary>
            <param name="from">The starting position</param>
            <param name="to">The position reached at the end</param>
            <param name="duration">How long befor we reach the end?</param>
            <param name="tweeningFunction">Which function to use for calculating the current position.</param>
        </member>
        <member name="M:GoblinXNA.Helpers.XNATweener.Vector3Tweener.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.TimeSpan,GoblinXNA.Helpers.XNATweener.TweeningFunction)">
            <summary>
            Create a Tweener with info on where to move from and to, how long it should take and the function to use.
            </summary>
            <param name="from">The starting position</param>
            <param name="to">The position reached at the end</param>
            <param name="duration">How long befor we reach the end?</param>
            <param name="tweeningFunction">Which function to use for calculating the current position.</param>
        </member>
        <member name="M:GoblinXNA.Helpers.XNATweener.Vector3Tweener.#ctor(GoblinXNA.Helpers.XNATweener.TweeningFunction)">
            <summary>
            Create a stopped tweener with no information on where to move from and to.
            Useful in conjunction with the Reset(from, to) call to ready a tweener for later use or lazy
            instantiation of a tweener in a property.
            </summary>
            <param name="duration">The duration of tweening.</param>
            <param name="tweeningFunction">Which function to use for calculating the current position.</param>
        </member>
        <member name="M:GoblinXNA.Helpers.XNATweener.Vector3Tweener.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,GoblinXNA.Helpers.XNATweener.TweeningFunction,System.Single)">
            <summary>
            Create a Tweener with info on where to move from and to, but set the duration using the movement
            speed instead of a set timespan.
            Note that the speed is used to calculate how fast the tweener should move if it moved in a linear
            fashion. This can be upset by the tweening function that can cause the actual movement speed to vary
            considerably. So the speed can be looked at as an average speed during the lifetime of the tweener.
            </summary>
            <param name="from">The starting position</param>
            <param name="to">The position reached at the end</param>
            <param name="duration">The average movement speed of the tweener</param>
            <param name="tweeningFunction">Which function to use for calculating the current position.</param>
        </member>
        <member name="M:GoblinXNA.Helpers.XNATweener.Vector3Tweener.UpdatePosition(System.Single,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)">
            <summary>
            Do the actual update of the position.
            Usually we will use the tweening function here.
            </summary>
            <param name="elapsed"></param>
            <param name="from"></param>
            <param name="change">How much will the tweener move from start to end</param>
            <param name="duration">The total duration of tweening.</param>
        </member>
        <member name="M:GoblinXNA.Helpers.XNATweener.Vector3Tweener.CalculateChange(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Calculate the change value. Usually this is to - from.
            </summary>
            <param name="to">Where do we want to end</param>
            <param name="from">Where we are now</param>
            <returns>Returns the new change value</returns>
        </member>
        <member name="M:GoblinXNA.Helpers.XNATweener.Vector3Tweener.CalculateEndPosition">
            <summary>
            Calculate the position we want to end up in. This is nessecary as to is not saved.
            Usually this is from + change
            </summary>
            <returns>
            Returns the end position when the tweener is finished.
            </returns>
        </member>
        <member name="M:GoblinXNA.Helpers.XNATweener.Vector3Tweener.CalculateDurationFromSpeed(System.Single)">
            <summary>
            Calculate the duration of the tween in seconds given the average speed of movement.
            Usually this is change / speed
            </summary>
            <param name="speed">The average movement speed</param>
            <returns>The duration of the tweener</returns>
        </member>
        <member name="T:GoblinXNA.Network.HandleServerConnection">
            <summary>
            A callback/delegate function for server connection event
            </summary>
        </member>
        <member name="T:GoblinXNA.Network.HandleServerDisconnection">
            <summary>
            A callback/delegate function for server disconnection event
            </summary>
        </member>
        <member name="T:GoblinXNA.Network.IClient">
            <summary>
            An interface that defines the properties and methods of a network client.
            </summary>
        </member>
        <member name="M:GoblinXNA.Network.IClient.Connect">
            <summary>
            Connects to the server specified by HostName.
            </summary>
        </member>
        <member name="M:GoblinXNA.Network.IClient.ReceiveMessage(System.Byte[]@)">
            <summary>
            Concatenates received messages from the server in byte arrays to the passed list.
            </summary>
            <param name="messages">Received messages in array of bytes</param>
            <returns>The number of received bytes</returns>
        </member>
        <member name="M:GoblinXNA.Network.IClient.SendMessage(System.Byte[],System.Boolean,System.Boolean)">
            <summary>
            Sends a message to the server.
            </summary>
            <param name="msg">The message to be sent</param>
            <param name="reliable">Whether the message is guaranteed to arrive at the
            receiver side</param>
            <param name="inOrder">Whether the message arrives in order at the receiver side</param>
        </member>
        <member name="M:GoblinXNA.Network.IClient.Shutdown">
            <summary>
            Shuts down the client.
            </summary>
        </member>
        <member name="P:GoblinXNA.Network.IClient.PortNumber">
            <summary>
            Gets the port number used to transfer messages.
            </summary>
        </member>
        <member name="P:GoblinXNA.Network.IClient.MyIPAddress">
            <summary>
            Gets the address of this client in 4 bytes.
            </summary>
            <remarks>
            It returns 4 bytes instead of String in order to optimize network transfer.
            (e.g., 192.168.0.1 will be byte[0] = (byte)192, byte[1] = (byte)168, byte[2] = (byte)0,
            byte[3] = (byte)1)
            </remarks>
        </member>
        <member name="P:GoblinXNA.Network.IClient.EnableEncryption">
            <summary>
            Gets or sets whether to enable encryption.
            </summary>
        </member>
        <member name="E:GoblinXNA.Network.IClient.ServerConnected">
            <summary>
            Adds or removes an event handler for client connection event.
            </summary>
        </member>
        <member name="E:GoblinXNA.Network.IClient.ServerDisconnected">
            <summary>
            Adds or removes an event handler for client disconnection event.
            </summary>
        </member>
        <member name="P:GoblinXNA.Network.IClient.IsConnected">
            <summary>
            Gets whether this client is connected to a server.
            </summary>
        </member>
        <member name="P:GoblinXNA.Network.IClient.WaitForServer">
            <summary>
            Gets or sets whether to wait for the server to start up in case the server is 
            not running when client tried to connect. To set the timeout for connection
            trial, set the ConnectionTrialTimeOut property. Default value is false.
            </summary>
            <see cref="P:GoblinXNA.Network.IClient.ConnectionTrialTimeOut"/>
        </member>
        <member name="P:GoblinXNA.Network.IClient.ConnectionTrialTimeOut">
            <summary>
            Gets or sets the timeout in milliseconds for connection trial when the server was
            not up when client was started. This property is only effective if WaitForServer
            is set to true. Default value is -1 which means the client waits for infinite time. 
            </summary>
            <see cref="P:GoblinXNA.Network.IClient.WaitForServer"/>
        </member>
        <member name="T:GoblinXNA.Network.INetworkHandler">
            <summary>
            An interface that defines how messages will be transferred over the network.
            </summary>
        </member>
        <member name="M:GoblinXNA.Network.INetworkHandler.AddNetworkObject(GoblinXNA.Network.INetworkObject)">
            <summary>
            Adds a network object to send or receive messages associated with the
            object over the network.
            </summary>
            <param name="networkObj">A network object to be transfered over the network</param>
        </member>
        <member name="M:GoblinXNA.Network.INetworkHandler.RemoveNetworkObject(GoblinXNA.Network.INetworkObject)">
            <summary>
            Removes a network object.
            </summary>
            <param name="networkObj">A network object to be transfered over the network</param>
        </member>
        <member name="M:GoblinXNA.Network.INetworkHandler.Dispose">
            <summary>
            Disposes the network objects.
            </summary>
        </member>
        <member name="M:GoblinXNA.Network.INetworkHandler.Update(System.Single)">
            <summary>
            Retrieves and broadcasts messages over the network.
            </summary>
            <param name="elapsedMsecs"></param>
        </member>
        <member name="P:GoblinXNA.Network.INetworkHandler.NetworkClient">
            <summary>
            Gets or sets the specific network client implementation.
            </summary>
        </member>
        <member name="P:GoblinXNA.Network.INetworkHandler.NetworkServer">
            <summary>
            Gets or sets the specific network server implementation.
            </summary>
        </member>
        <member name="P:GoblinXNA.Network.INetworkHandler.TransferSizePerNetworkObject">
            <summary>
            Gets or sets the size to use when transfering each INetworkObject. For example, if you
            are going to transfer INetworkObjects that will contain less than than 256 bytes including
            its Identifier length, then TransferSize.Byte would be good enough. The default size is
            TransferSize.Short.
            </summary>
        </member>
        <member name="T:GoblinXNA.Network.INetworkObject">
            <summary>
            An interface that defines the properties and methods of an object that can be sent 
            over the network.
            </summary>
        </member>
        <member name="M:GoblinXNA.Network.INetworkObject.GetMessage">
            <summary>
            Gets all of the information that needs to be sent over the network.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GoblinXNA.Network.INetworkObject.InterpretMessage(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Interprets the information associated with this object received over the network.
            </summary>
            <param name="msg">A byte array that contains the message associated with this network object</param>
            <param name="startIndex">The starting index in the byte array where associated information starts</param>
            <param name="length"></param>
        </member>
        <member name="P:GoblinXNA.Network.INetworkObject.Identifier">
            <summary>
            Gets an identifier of this network object (has to be unique).
            </summary>
        </member>
        <member name="P:GoblinXNA.Network.INetworkObject.ReadyToSend">
            <summary>
            Gets or sets whether this network object is ready to be sent. This variable
            can be used for optimization to not send any objects that did not change.
            </summary>
        </member>
        <member name="P:GoblinXNA.Network.INetworkObject.Hold">
            <summary>
            Gets or sets whether to hold the information to be transferred.
            </summary>
        </member>
        <member name="P:GoblinXNA.Network.INetworkObject.Reliable">
            <summary>
            Gets or sets whether the receiver is guaranteed to receive the information
            </summary>
        </member>
        <member name="P:GoblinXNA.Network.INetworkObject.Ordered">
            <summary>
            Gets or sets whether the receiver will receive the information in the order
            sent by the sender. 
            </summary>
        </member>
        <member name="P:GoblinXNA.Network.INetworkObject.SendFrequencyInHertz">
            <summary>
            Gets or sets the frequency to send information in terms of Hz. For example,
            2 Hz means send twice per second, and 60 Hz means send 60 times per second.
            </summary>
        </member>
        <member name="T:GoblinXNA.Network.HandleClientConnection">
            <summary>
            A callback/delegate function for client connection event
            </summary>
            <param name="clientIP">The IP address of the client that got connected</param>
            <param name="portNumber">The port number used for the connection</param>
        </member>
        <member name="T:GoblinXNA.Network.HandleClientDisconnection">
            <summary>
            A callback/delegate function for client disconnection event
            </summary>
            <param name="clientIP">The IP address of the client that got disconnected</param>
            <param name="portNumber">The port number used for the connection</param>
        </member>
        <member name="T:GoblinXNA.Network.IServer">
            <summary>
            An interface that defines the properties and methods of a network server.
            </summary>
        </member>
        <member name="M:GoblinXNA.Network.IServer.Initialize">
            <summary>
            Initializes this server for accepting connections.
            </summary>
        </member>
        <member name="M:GoblinXNA.Network.IServer.BroadcastMessage(System.Byte[],System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Broadcasts a message to all of the connected clients except the sender if 
            'excludeSender' is set to false. Otherwise, it broadcasts to all connected clients.
            </summary>
            <param name="msg">The message to broadcast</param>
            <param name="reliable">Whether the message is guaranteed to arrive at the
            receiver side</param>
            <param name="inOrder">Whether the message arrives in order at the receiver side</param>
            <param name="excludeSender">Whether to exclude the sender</param>
        </member>
        <member name="M:GoblinXNA.Network.IServer.SendMessage(System.Byte[],System.Collections.Generic.List{System.String},System.Boolean,System.Boolean)">
            <summary>
            Sends a message to a list of specific clients with the given IP addresses.
            </summary>
            <param name="msg">The message to send</param>
            <param name="ipAddresses">The IP addresses of the clients to send to</param>
            <param name="reliable">Whether the message is guaranteed to arrive at the
            receiver side</param>
            <param name="inOrder">Whether the message arrives in order at the receiver side</param>
        </member>
        <member name="M:GoblinXNA.Network.IServer.ReceiveMessage(System.Byte[]@)">
            <summary>
            Concatenates received messages in byte arrays to the passed list.
            </summary>
            <param name="messages">Received messages in array of bytes</param>
            <param name="inOrder">Whether the message arrives in order at the receiver side</param>
        </member>
        <member name="M:GoblinXNA.Network.IServer.Shutdown">
            <summary>
            Shuts down the server.
            </summary>
        </member>
        <member name="P:GoblinXNA.Network.IServer.PortNumber">
            <summary>
            Gets or sets the port number used to transfer messages.
            </summary>
        </member>
        <member name="P:GoblinXNA.Network.IServer.MyIPAddress">
            <summary>
            Gets the address of this server in 4 bytes.
            </summary>
            <remarks>
            It returns 4 bytes instead of String in order to optimize the network transfer.
            (e.g., 192.168.0.1 will be byte[0] = (byte)192, byte[1] = (byte)168, byte[2] = (byte)0,
            byte[3] = (byte)1)
            </remarks>
        </member>
        <member name="P:GoblinXNA.Network.IServer.NumConnectedClients">
            <summary>
            Gets the number of connected clients to this server.
            </summary>
        </member>
        <member name="P:GoblinXNA.Network.IServer.ClientIPAddresses">
            <summary>
            Gets the addresses of connected clients.
            </summary>
        </member>
        <member name="P:GoblinXNA.Network.IServer.EnableEncryption">
            <summary>
            Gets or sets whether to enable encryption.
            </summary>
        </member>
        <member name="E:GoblinXNA.Network.IServer.ClientConnected">
            <summary>
            Adds or removes an event handler for client connection event.
            </summary>
        </member>
        <member name="E:GoblinXNA.Network.IServer.ClientDisconnected">
            <summary>
            Adds or removes an event handler for client disconnection event.
            </summary>
        </member>
        <member name="M:GoblinXNA.Network.SocketClient.#ctor(System.String,System.Int32)">
            <summary>
            Creates a UDP client.
            </summary>
            <param name="hostName"></param>
            <param name="portNumber"></param>
        </member>
        <member name="P:GoblinXNA.Network.SocketClient.ShutdownWaitTimeout">
            <summary>
            Gets or sets the maximum wait timeout in milliseconds for shutting down each client socket.
            Default timeout is 5000 milliseconds.
            </summary>
        </member>
        <member name="M:GoblinXNA.Network.UDPClientServer.Shutdown">
            <summary>
            Shuts down the client.
            </summary>
        </member>
        <member name="F:GoblinXNA.Network.UdpAnySourceMulticastChannel.IsJoined">
            <summary>
            Gets or sets a value indicating whether this instance is joined.
            </summary>
            <value><c>true</c> if this instance is joined; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:GoblinXNA.Network.UdpAnySourceMulticastChannel.#ctor(System.Net.IPAddress,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="!:UdpAnySourceMulticastchannel"/> class.
            </summary>
            <param name="address">The address.</param>
            <param name="port">The port.</param>
        </member>
        <member name="M:GoblinXNA.Network.UdpAnySourceMulticastChannel.#ctor(System.Net.IPAddress,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="!:UdpAnySourceMulticastchannel"/> class.
            </summary>
            <param name="address">The address.</param>
            <param name="port">The port.</param>
            <param name="maxMessageSize">Size of the max message.</param>
        </member>
        <member name="M:GoblinXNA.Network.UdpAnySourceMulticastChannel.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:GoblinXNA.Network.UdpAnySourceMulticastChannel.Open">
            <summary>
            Opens this instance.
            </summary>
        </member>
        <member name="M:GoblinXNA.Network.UdpAnySourceMulticastChannel.Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="M:GoblinXNA.Network.UdpAnySourceMulticastChannel.Send(System.String,System.Object[])">
            <summary>
            Sends the specified format.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:GoblinXNA.Network.UdpAnySourceMulticastChannel.SendTo(System.Net.IPEndPoint,System.String,System.Object[])">
            <summary>
            Sends the specified format.
            </summary>
            /// <param name="format">The destination.</param>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:GoblinXNA.Network.UdpAnySourceMulticastChannel.Receive">
            <summary>
            Receives this instance.
            </summary>
        </member>
        <member name="M:GoblinXNA.Network.UdpAnySourceMulticastChannel.OnReceive(System.Net.IPEndPoint,System.Byte[])">
            <summary>
            Called when [receive].
            </summary>
            <param name="source">The source.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:GoblinXNA.Network.UdpAnySourceMulticastChannel.OnAfterOpen">
            <summary>
            Called when [after open].
            </summary>
        </member>
        <member name="M:GoblinXNA.Network.UdpAnySourceMulticastChannel.OnBeforeClose">
            <summary>
            Called when [before close].
            </summary>
        </member>
        <member name="E:GoblinXNA.Network.UdpAnySourceMulticastChannel.PacketReceived">
            <summary>
            Occurs when [packet received].
            </summary>
        </member>
        <member name="E:GoblinXNA.Network.UdpAnySourceMulticastChannel.AfterOpen">
            <summary>
            Occurs when [after open].
            </summary>
        </member>
        <member name="E:GoblinXNA.Network.UdpAnySourceMulticastChannel.BeforeClose">
            <summary>
            Occurs when [before close].
            </summary>
        </member>
        <member name="P:GoblinXNA.Network.UdpAnySourceMulticastChannel.IsDisposed">
            <summary>
            Gets or sets a value indicating whether this instance is disposed.
            </summary>
            <value>
            	<c>true</c> if this instance is disposed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:GoblinXNA.Network.UdpAnySourceMulticastChannel.ReceiveBuffer">
            <summary>
            Gets or sets the size of the max message.
            </summary>
            <value>The size of the max message.</value>
        </member>
        <member name="P:GoblinXNA.Network.UdpAnySourceMulticastChannel.Client">
            <summary>
            Gets or sets the client.
            </summary>
            <value>The client.</value>
        </member>
        <member name="T:GoblinXNA.PerformanceChecker">
            <summary>
            A helper class for checking performance of certain code blocks.
            
            A time performance measure will be either printed on the console or to a file for the
            code block enclosed between Start() and Stop(string) method.
            </summary>
        </member>
        <member name="F:GoblinXNA.PerformanceChecker.Print">
            <summary>
            Indicates whether to print on the console window or write to a log file
            </summary>
        </member>
        <member name="M:GoblinXNA.PerformanceChecker.Start">
            <summary>
            Starts the performance measurement.
            </summary>
        </member>
        <member name="M:GoblinXNA.PerformanceChecker.Stop(System.String)">
            <summary>
            Stops the performance measurement.
            </summary>
            <param name="identifier">A prefix id string added at the beginning of the printed message</param>
        </member>
        <member name="T:GoblinXNA.Physics.IPhysics">
            <summary>
            An interface class that defines the properties and methods required for a physics engine.
            </summary>
        </member>
        <member name="M:GoblinXNA.Physics.IPhysics.InitializePhysics">
            <summary>
            Initializes the physics engine for physical simulation.
            </summary>
        </member>
        <member name="M:GoblinXNA.Physics.IPhysics.RestartsSimulation">
            <summary>
            Restarts the simulation from its initial state.
            </summary>
        </member>
        <member name="M:GoblinXNA.Physics.IPhysics.AddPhysicsObject(GoblinXNA.Physics.IPhysicsObject)">
            <summary>
            Adds a physics object to this physics engine for simulation.
            </summary>
            <param name="physObj">A physics object to be added</param>
        </member>
        <member name="M:GoblinXNA.Physics.IPhysics.ModifyPhysicsObject(GoblinXNA.Physics.IPhysicsObject,Microsoft.Xna.Framework.Matrix)">
            <summary>
            Modifies an existing physics object's physical properties and transformation.
            </summary>
            <param name="physObj">A physics object to be modified</param>
            <param name="newTransform">A new transformation of this physics object
            (e.g. physObj.InitialWorldTransform)</param>
        </member>
        <member name="M:GoblinXNA.Physics.IPhysics.RemovePhysicsObject(GoblinXNA.Physics.IPhysicsObject)">
            <summary>
            Removes an existing physics object.
            </summary>
            <param name="physObj">A physics object to be removed</param>
        </member>
        <member name="M:GoblinXNA.Physics.IPhysics.GetAxisAlignedBoundingBox(GoblinXNA.Physics.IPhysicsObject)">
            <summary>
            Gets the axis-aligned bounding box of this physics object used in the engine.
            </summary>
            <param name="physObj">A physics object to get the axis aligned bounding box</param>
            <returns></returns>
        </member>
        <member name="M:GoblinXNA.Physics.IPhysics.GetCollisionMesh(GoblinXNA.Physics.IPhysicsObject)">
            <summary>
            Gets the actual mesh used for the collision detection in a list of polygon vertices.
            </summary>
            <param name="physObj">A physics object to get the collision mesh</param>
            <returns>A list of polygon vertices (the internal list consists polygon vertices)</returns>
        </member>
        <member name="M:GoblinXNA.Physics.IPhysics.Update(System.Single)">
            <summary>
            Updates the physical simulation.
            </summary>
            <param name="elapsedTime">The amount of time to proceed the simulation</param>
        </member>
        <member name="M:GoblinXNA.Physics.IPhysics.Dispose">
            <summary>
            Disposes of the physics engine.
            </summary>
        </member>
        <member name="P:GoblinXNA.Physics.IPhysics.Gravity">
            <summary>
            Gets or sets the gravity value used for this physics simulation.
            The default value is 9.8f
            </summary>
        </member>
        <member name="P:GoblinXNA.Physics.IPhysics.GravityDirection">
            <summary>
            Gets or sets the direction of gravity used for this physics simulation.
            The default value is (0, -1, 0).
            </summary>
        </member>
        <member name="T:GoblinXNA.Physics.ShapeType">
            <summary>
            An enum that describes the shape of the physics object. 
            </summary>
        </member>
        <member name="F:GoblinXNA.Physics.ShapeType.Compound">
            <summary>
            Compound of spherical shapes.
            </summary>
        </member>
        <member name="F:GoblinXNA.Physics.ShapeType.Extra">
            <summary>
            A shape that is none of the above
            </summary>
        </member>
        <member name="T:GoblinXNA.Physics.IPhysicsObject">
            <summary>
            An interface that defines the physical properties of an object that can be added to a physics engine.
            </summary>
        </member>
        <member name="P:GoblinXNA.Physics.IPhysicsObject.Container">
            <summary>
            Gets or sets the container that holds this IPhysicsObject.
            </summary>
        </member>
        <member name="P:GoblinXNA.Physics.IPhysicsObject.CollisionGroupID">
            <summary>
            Gets or sets the collision group ID.
            </summary>
        </member>
        <member name="P:GoblinXNA.Physics.IPhysicsObject.MaterialName">
            <summary>
            Gets or sets the material name that defines this physical object such as
            Wood, Metal, Plastic, etc.
            </summary>
        </member>
        <member name="P:GoblinXNA.Physics.IPhysicsObject.Mass">
            <summary>
            Gets or sets the mass of this object.
            </summary>
        </member>
        <member name="P:GoblinXNA.Physics.IPhysicsObject.CenterOfMass">
            <summary>
            Gers or sets the relative position of the default center of mass, which is at (0, 0, 0). 
            </summary>
            <remarks>
            This value can be used to set the relative offset of the center of mass of a rigid body. 
            When a rigid body is created the center of mass is set the the point (0, 0, 0), and normally 
            this is the best setting for a rigid body. However the are situations in which and object does 
            not have symmetry or simple some kind of special effect is desired, and this origin need to be 
            changed.
            </remarks>
        </member>
        <member name="P:GoblinXNA.Physics.IPhysicsObject.Shape">
            <summary>
            The shape of this object. This information is required for proper physical interaction.
            Note that not all physics engine will support all shape types listed, and each
            of them will probably have different restrictions.
            </summary>
        </member>
        <member name="P:GoblinXNA.Physics.IPhysicsObject.MomentOfInertia">
            <summary>
            Gets or sets the moment of inertia of this object. If not set, we will automatically 
            calculate it.
            </summary>
        </member>
        <member name="P:GoblinXNA.Physics.IPhysicsObject.ShapeData">
            <summary>
            Gets or sets the data associated with each shape type.
            Box: dimensionX, dimensionY, dimensionZ;
            Sphere: radiusX, radiusY, radiusZ, or simply one radius;
            Cone, Capsule, Cylinder, and ChamferCylinder: radius, height.
            If this shape data is not specified, then the minimum bounding box is used to
            estimate the shape information.
            </summary>
            <remarks>
            This shape data is not used for ConvexHull or Vehicle type.
            </remarks>
        </member>
        <member name="P:GoblinXNA.Physics.IPhysicsObject.Model">
            <summary>
            Gets or sets the actual geometry model associated with this physics object.
            </summary>
        </member>
        <member name="P:GoblinXNA.Physics.IPhysicsObject.MeshProvider">
            <summary>
            Gets or sets the mesh provider for physics simulation.
            </summary>
        </member>
        <member name="P:GoblinXNA.Physics.IPhysicsObject.Pickable">
            <summary>
            Gets or sets whether this object can be picked.
            </summary>
        </member>
        <member name="P:GoblinXNA.Physics.IPhysicsObject.Collidable">
            <summary>
            Gets or sets whether this object can collide with other collidable scene nodes.
            </summary>
        </member>
        <member name="P:GoblinXNA.Physics.IPhysicsObject.Interactable">
            <summary>
            Gets or sets whether this object reacts in response to physical simulation.
            </summary>
        </member>
        <member name="P:GoblinXNA.Physics.IPhysicsObject.ApplyGravity">
            <summary>
            Gets or sets whether gravity should be applied to this object.
            </summary>
        </member>
        <member name="P:GoblinXNA.Physics.IPhysicsObject.Manipulatable">
            <summary>
            Gets or sets whether this physics object's physics world transformation can be manipulated 
            directly instead of only using the physics world transformation calculated by the physics
            engine after simulation.
            </summary>
        </member>
        <member name="P:GoblinXNA.Physics.IPhysicsObject.NeverDeactivate">
            <summary>
            Some physics engines deactivate an object whose bounding volume does not intersect
            with any active objects, such that forces cannot be applied to the deactivated object.
            This property indicates that, we want to make the object never be deactivated.
            </summary>
        </member>
        <member name="P:GoblinXNA.Physics.IPhysicsObject.Modified">
            <summary>
            Indicates whether any of the physics properties have been modified.
            </summary>
        </member>
        <member name="P:GoblinXNA.Physics.IPhysicsObject.ShapeModified">
            <summary>
            Indicates whether the model shape has been changed.
            </summary>
        </member>
        <member name="P:GoblinXNA.Physics.IPhysicsObject.PhysicsWorldTransform">
            <summary>
            Gets or sets the world transform retrieved from the physics engine after simulation.
            </summary>
        </member>
        <member name="P:GoblinXNA.Physics.IPhysicsObject.CompoundInitialWorldTransform">
            <summary>
            Gets the compound initial world transform with the InitialWorldTransform
            and its parent world transform
            </summary>
        </member>
        <member name="P:GoblinXNA.Physics.IPhysicsObject.InitialLinearVelocity">
            <summary>
            Gets or sets the initial linear velocity of this physics object.
            </summary>
        </member>
        <member name="P:GoblinXNA.Physics.IPhysicsObject.InitialAngularVelocity">
            <summary>
            Gets or sets the initial angular velocity of this physics object.
            </summary>
        </member>
        <member name="P:GoblinXNA.Physics.IPhysicsObject.LinearDamping">
            <summary>
            Gets or sets the linear damping coefficient.
            </summary>
        </member>
        <member name="P:GoblinXNA.Physics.IPhysicsObject.AngularDamping">
            <summary>
            Gets or sets the angular damping coefficient.
            </summary>
        </member>
        <member name="T:GoblinXNA.Physics.PhysicsObject">
            <summary>
            A default implementation of the IPhysicsObject interface.
            </summary>
        </member>
        <member name="M:GoblinXNA.Physics.PhysicsObject.#ctor(System.Object)">
            <summary>
            Creates a physics object with a container that uses the physical properties specified
            in this class. The 'container' is usually an instance of GeometryNode.
            </summary>
            <param name="container">The container of this physics object.</param>
        </member>
        <member name="P:GoblinXNA.Physics.Matali.MataliObject.DynamicFriction">
            <summary>
            Gets or sets the dynamic friction of this physics object. The value should be between 0 and 1.
            The default value is 1.0f.
            </summary>
        </member>
        <member name="P:GoblinXNA.Physics.Matali.MataliObject.StaticFriction">
            <summary>
            Gets or sets the static friction of this physics object. The value should be between 0 and 1.
            The default value is 1.0f.
            </summary>
        </member>
        <member name="P:GoblinXNA.Physics.Matali.MataliObject.Restitution">
            <summary>
            Gets or sets the restitution of this physics object. The value should be between 0 and 10.
            The default value is 0.0f.
            </summary>
        </member>
        <member name="P:GoblinXNA.Physics.Matali.MataliObject.CollisionStartCallback">
            <summary>
            Gets or sets the callback function when there is a collision that just started.
            </summary>
        </member>
        <member name="P:GoblinXNA.Physics.Matali.MataliObject.CollisionContinueCallback">
            <summary>
            Gets or sets the callback function when there is a continuing collision.
            </summary>
        </member>
        <member name="P:GoblinXNA.Physics.Matali.MataliObject.CollisionEndCallback">
            <summary>
            Gets or sets the callback function when a collision between two objects end.
            </summary>
        </member>
        <member name="P:GoblinXNA.Physics.Matali.MataliObject.IsDynamic">
            <summary>
            Gets or sets whether this mesh may be updated dynamically. Only applies to HeightMap type.
            </summary>
        </member>
        <member name="P:GoblinXNA.Physics.Matali.MataliObject.MaxTrianglesForPartition">
            <summary>
            This only applies for Shape.TriangleMesh. Default value is 2.
            </summary>
        </member>
        <member name="M:GoblinXNA.Physics.Matali.MataliCloth.#ctor(System.Object,System.String,GoblinXNA.Physics.Matali.MataliObject)">
            <summary>
            Creates a cloth using physical methods with particles.
            </summary>
            <param name="container"></param>
            <param name="particleTemplate">A template to use for the cloth particles</param>
        </member>
        <member name="P:GoblinXNA.Physics.Matali.MataliCloth.Stiffness">
            <summary>
            The stiffness of the cloth. The larger the value, the stiffer.
            </summary>
        </member>
        <member name="M:GoblinXNA.Physics.Matali.MataliPhysics.#ctor">
            <summary>
            Creates a physics engine that uses Matali Physics from Komires.
            </summary>
            <remarks>
            For all of the shapes that has directions (e.g., Cylinder, Hemisphere), Y direction is
            used, so if you would like it to face other directions, use MataliObject.ShapeOriginalMatrix
            to orient them.
            
            For a cylinder with different bottom and top radius, IPhysicsObject.ShapeData are used.
            ShapeData[0] - bottom radius, ShapeData[1] - height, ShapeData[2] = top radius
            
            For Compound shape, an additional information can be set by using
            MataliObject.CompoundShape.
            
            For additional shape types such as Heightmap, Point, and so on, set Shape to ShapeType.Extra
            and define MataliObject.ExtraShape.
            </remarks>
        </member>
        <member name="M:GoblinXNA.Physics.Matali.MataliPhysics.GetMataliPhysicsObject(GoblinXNA.Physics.IPhysicsObject)">
            <summary>
            Gets the associated Matali's PhysicsObject instance from a physics object.
            </summary>
            <param name="physObj"></param>
            <returns></returns>
        </member>
        <member name="M:GoblinXNA.Physics.Matali.MataliPhysics.CreateConstraint(System.String,GoblinXNA.Physics.IPhysicsObject,GoblinXNA.Physics.IPhysicsObject,GoblinXNA.Physics.Matali.CreateConstraintCallback)">
            <summary>
            Creates a constraint between two existing physical objects.
            </summary>
            <remarks>
            The constraints are not actually added at this stage, but in the Update method.
            </remarks>
            <param name="name"></param>
            <param name="physObj1"></param>
            <param name="physObj2"></param>
            <param name="callback"></param>
        </member>
        <member name="M:GoblinXNA.Physics.Matali.MataliPhysics.ModifyHeightmap(GoblinXNA.Physics.IPhysicsObject,System.Single[],System.Int32,System.Int32)">
            <summary>
            Modifies an existing height map field with float arrays.
            </summary>
            <param name="physObj"></param>
            <param name="heightmap"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:GoblinXNA.Physics.Matali.MataliPhysics.PickRayCast(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Performs raycast picking with the given near and far points.
            </summary>
            <param name="nearPoint">The near point of the pick ray</param>
            <param name="farPoint">The far point of the pick ray</param>
            <returns>A list of picked objects</returns>
        </member>
        <member name="M:GoblinXNA.Physics.Matali.MataliPhysics.ModifyHeightmapShort(GoblinXNA.Physics.IPhysicsObject,System.Int16[],System.Int32,System.Int32)">
            <summary>
            Modifies an existing height map field with short arrays.
            </summary>
            <param name="physObj"></param>
            <param name="heightmap"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:GoblinXNA.Physics.Matali.MataliPhysics.AddConstraint">
            <summary>
            Actually adds the constraints to the physics engine.
            </summary>
        </member>
        <member name="M:GoblinXNA.Physics.Matali.MataliPhysics.SetShape(Komires.MataliPhysics.PhysicsObject,GoblinXNA.Physics.IPhysicsObject)">
            <summary>
            
            </summary>
            <remarks>
            For all of the shapes that has directions (e.g., Cylinder, Hemisphere), Y direction is
            used, so if you would like it to face other directions, use MataliObject.ShapeOriginalMatrix
            to orient them.
            
            For a cylinder with different bottom and top radius, IPhysicsObject.ShapeData are used.
            ShapeData[0] - bottom radius, ShapeData[1] - height, ShapeData[2] = top radius
            
            For Compound shape, an additional information can be set by using
            MataliObject.CompoundShape.
            
            For additional shape types such as Heightmap, Point, and so on, set Shape to ShapeType.Extra
            and define MataliObject.ExtraShape.
            </remarks>
            <param name="mataliPhysicsObj"></param>
            <param name="physObj"></param>
        </member>
        <member name="P:GoblinXNA.Physics.Matali.MataliPhysics.Gravity">
            <summary>
            Default is 9.81f.
            </summary>
        </member>
        <member name="P:GoblinXNA.Physics.Matali.MataliPhysics.MaxSimulationSubSteps">
            <summary>
            Default is 10.
            </summary>
        </member>
        <member name="P:GoblinXNA.Physics.Matali.MataliPhysics.SimulationTimeStep">
            <summary>
            Default is 1/15 (15 Hz)
            </summary>
        </member>
        <member name="P:GoblinXNA.Physics.Matali.MataliPhysics.BuildCollisionMesh">
            <summary>
            MataliPhysics builds collision mesh for only Shapes that requires a call to CreateMesh() method including
            TriangleMesh, Heightmap, CompoundShape, etc. Set this to true if you want MataliPhysics to build collision
            mesh for any shape types when you want to visualize the collision mesh for debugging purposes (not recommended
            to be set to true unless you really need them)
            </summary>
        </member>
        <member name="M:GoblinXNA.Physics.Matali.MataliVehicle.AddBody(GoblinXNA.Physics.Matali.MataliObject)">
            <summary>
            Add a body as a single object.
            </summary>
            <param name="bodyObject"></param>
        </member>
        <member name="M:GoblinXNA.Physics.Matali.MataliVehicle.AddBody(System.Collections.Generic.List{GoblinXNA.Physics.Matali.MataliObject})">
            <summary>
            Add a body as a composite of multiple objects.
            </summary>
            <param name="bodyComposite"></param>
        </member>
        <member name="M:GoblinXNA.Physics.Matali.MataliVehicle.AddWheels(GoblinXNA.Physics.Matali.MataliObject)">
            <summary>
            Add four wheels that have the same graphical geometry and physical properties.
            </summary>
            <param name="wheelObject"></param>
        </member>
        <member name="M:GoblinXNA.Physics.Matali.MataliVehicle.AddWheels(GoblinXNA.Physics.Matali.MataliObject,GoblinXNA.Physics.Matali.MataliObject,GoblinXNA.Physics.Matali.MataliObject,GoblinXNA.Physics.Matali.MataliObject)">
            <summary>
            Add four wheels each with different graphical geometry and physical properties.
            </summary>
            <param name="frontLeftWheel"></param>
            <param name="frontRightWheel"></param>
            <param name="rearLeftWheel"></param>
            <param name="rearRightWheel"></param>
        </member>
        <member name="M:GoblinXNA.Physics.Matali.MataliVehicle.AddWheels(System.Collections.Generic.List{GoblinXNA.Physics.Matali.MataliObject})">
            <summary>
            Add four wheels that are made of composited objects and have the same graphical 
            geometry and physical properties.
            </summary>
            <param name="wheelComposite"></param>
        </member>
        <member name="M:GoblinXNA.Physics.Matali.MataliVehicle.AddDoors(GoblinXNA.Physics.Matali.MataliObject,GoblinXNA.Physics.Matali.MataliObject,GoblinXNA.Physics.Matali.MataliObject,GoblinXNA.Physics.Matali.MataliObject)">
            <summary>
            Add doors that can fling. If you don't need certain doors, just pass null (e.g., if your car
            only has front doors, then pass rearLeftDoor and rearRightDoor as null).
            </summary>
            <remarks>
            Doors are optional.
            </remarks>
            <param name="frontLeftDoor"></param>
            <param name="frontRightDoor"></param>
            <param name="rearLeftDoor"></param>
            <param name="rearRightDoor"></param>
        </member>
        <member name="M:GoblinXNA.Physics.Matali.MataliVehicle.AddDoors(System.Collections.Generic.List{GoblinXNA.Physics.Matali.MataliObject},System.Collections.Generic.List{GoblinXNA.Physics.Matali.MataliObject},System.Collections.Generic.List{GoblinXNA.Physics.Matali.MataliObject},System.Collections.Generic.List{GoblinXNA.Physics.Matali.MataliObject})">
            <summary>
            Add doors that are made of a composite object and can fling. If you don't need certain doors, 
            just pass null (e.g., if your car only has front doors, then pass rearLeftDoorComposite and 
            rearRightDoorComposite as null).
            </summary>
            <remarks>
            Doors are optional.
            </remarks>
            <param name="frontLeftDoor"></param>
            <param name="frontRightDoor"></param>
            <param name="rearLeftDoor"></param>
            <param name="rearRightDoor"></param>
        </member>
        <member name="M:GoblinXNA.Physics.Matali.MataliVehicle.AddSteering(GoblinXNA.Physics.Matali.MataliObject)">
            <summary>
            
            </summary>
            <remarks>
            Steering wheel is optional. You can still steer the car without this object.
            </remarks>
            <param name="steeringObject"></param>
        </member>
        <member name="T:GoblinXNA.Physics.PickedObject">
            <summary>
            A class that represents a picked object returned by a 3D object selection method.
            </summary>
        </member>
        <member name="M:GoblinXNA.Physics.PickedObject.#ctor(GoblinXNA.Physics.IPhysicsObject,System.Single)">
            <summary>
            Creates an instance that holds a the picked physics object with the intersection
            parameter.
            </summary>
            <param name="pickedObject"></param>
            <param name="intersectParam"></param>
        </member>
        <member name="M:GoblinXNA.Physics.PickedObject.CompareTo(GoblinXNA.Physics.PickedObject)">
            <summary>
            Compares which picked object is closer to the viewer in the 3D scene.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="P:GoblinXNA.Physics.PickedObject.PickedPhysicsObject">
            <summary>
            Gets the picked IPhysicsObject.
            </summary>
        </member>
        <member name="P:GoblinXNA.Physics.PickedObject.IntersectParam">
            <summary>
            Gets the intersection parameter with value ranging from 0.0f (near point) to 1.0f (far point).
            </summary>
            <remarks>
            For example, 0.5f means the intersection point was right in the middle of near point and far point cast ray.
            To get the picked point, you can simply do pickedPoint = (nearPoint + (farPoint - nearPoint) * intersectParam)
            </remarks>
        </member>
        <member name="T:GoblinXNA.SceneGraph.BranchNode">
            <summary>
            An implementation of a scene graph node that can have children node
            </summary>
        </member>
        <member name="T:GoblinXNA.SceneGraph.Node">
            <summary>
            This class defines the properties and methods required for a scene graph node.
            </summary>
        </member>
        <member name="M:GoblinXNA.SceneGraph.Node.#ctor(System.String)">
            <summary>
            Creates a scene graph node with the specified node name.
            </summary>
            <param name="name">The name of this node</param>
        </member>
        <member name="M:GoblinXNA.SceneGraph.Node.#ctor">
            <summary>
            Creates a scene graph node with no node name.
            </summary>
        </member>
        <member name="M:GoblinXNA.SceneGraph.Node.CloneNode">
            <summary>
            Clones this scene node without its children
            </summary>
            <returns>A cloned node</returns>
        </member>
        <member name="M:GoblinXNA.SceneGraph.Node.Dispose">
            <summary>
            Disposes this node.
            </summary>
        </member>
        <member name="P:GoblinXNA.SceneGraph.Node.ID">
            <summary>
            Gets the ID of this scene node. Used for both retrieval and debugging.
            </summary>
            <remarks>This ID is automatically assigned when a node created, and it is 
            guaranteed to be unique</remarks>
        </member>
        <member name="P:GoblinXNA.SceneGraph.Node.GroupID">
            <summary>
            Gets or sets the group ID of this scene node for group rendering.
            </summary>
            <remarks>The default value is 0 for all nodes</remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "P:GoblinXNA.SceneGraph.Node.Name" -->
        <member name="P:GoblinXNA.SceneGraph.Node.Enabled">
            <summary>
            Gets or sets if this node should be used and/or rendered
            </summary>
            <remarks>The default value is true</remarks>
        </member>
        <member name="P:GoblinXNA.SceneGraph.Node.SceneGraph">
            <summary>
            Gets or sets the scene to which this node belongs
            </summary>
        </member>
        <member name="P:GoblinXNA.SceneGraph.Node.Parent">
            <summary>
            Gets or sets the parent node in the scene graph.
            </summary>
        </member>
        <member name="P:GoblinXNA.SceneGraph.Node.UserData">
            <summary>
            Gets or sets an user defined data associated with this node. 
            </summary>
        </member>
        <member name="M:GoblinXNA.SceneGraph.BranchNode.#ctor(System.String)">
            <summary>
            Creates a branch node with a specified name
            </summary>
            <param name="name">The name of this node</param>
        </member>
        <member name="M:GoblinXNA.SceneGraph.BranchNode.#ctor">
            <summary>
            Creates a branch node with an empty name
            </summary>
        </member>
        <member name="M:GoblinXNA.SceneGraph.BranchNode.AddChild(GoblinXNA.SceneGraph.Node)">
            <summary>
            Adds a child to this node.
            </summary>
            <param name="node">The child node to be added</param>
        </member>
        <member name="M:GoblinXNA.SceneGraph.BranchNode.RemoveChild(GoblinXNA.SceneGraph.Node)">
            <summary>
            Removes a child from this node.
            </summary>
            <param name="node">The child to be removed</param>
        </member>
        <member name="M:GoblinXNA.SceneGraph.BranchNode.RemoveChildAt(System.Int32)">
            <summary>
            Removes the child at the specified index from this node.
            </summary>
            <param name="index">The index where to remove a child</param>
        </member>
        <member name="M:GoblinXNA.SceneGraph.BranchNode.RemoveChildren">
            <summary>
            Removes all children from this node.
            </summary>
        </member>
        <member name="M:GoblinXNA.SceneGraph.BranchNode.CloneTree">
            <summary>
            Clones this scene node including its children.
            </summary>
            <returns>A cloned node with its children</returns>
        </member>
        <member name="M:GoblinXNA.SceneGraph.BranchNode.CheckForLoops(GoblinXNA.SceneGraph.Node)">
            <summary>
            Check whether this node is part of a cyclic graph
            </summary>
            <param name="node"></param>
        </member>
        <member name="P:GoblinXNA.SceneGraph.BranchNode.Children">
            <summary>
            Gets a list of this node's children.
            </summary>
            <remarks>
            You should never add or remove nodes directly from this list since the changes won't
            be reflected in the scene. You should instead use the Add or Remove methods provided
            in this class.
            </remarks>
            <returns></returns>
        </member>
        <member name="P:GoblinXNA.SceneGraph.BranchNode.Prune">
            <summary>
            Gets or sets whether to prune the node's children
            </summary>
            <remarks>
            If set to true, children nodes will simply not be traversed in the scene graph, but won't 
            actually be removed from the scene graph. The default value is false.
            </remarks>
        </member>
        <member name="T:GoblinXNA.SceneGraph.Camera">
            <summary>
            Camera represents a view frustum (camera) in the 3D space.
            It describes how the viewed 3D space is transformed to a 2D surface (render window).
            </summary>
        </member>
        <member name="M:GoblinXNA.SceneGraph.Camera.#ctor">
            <summary>
            Creates a camera with vertical field of view of 45 degrees, 1.0f near clipping plane and 
            1000f far clipping plane.
            </summary>
        </member>
        <member name="M:GoblinXNA.SceneGraph.Camera.#ctor(GoblinXNA.SceneGraph.Camera)">
            <summary>
            Copy constructor.
            </summary>
            <param name="cam"></param>
        </member>
        <member name="P:GoblinXNA.SceneGraph.Camera.Translation">
            <summary>
            Gets or sets the position of this camera's view point. The default value is (0, 0, 0).
            </summary>
        </member>
        <member name="P:GoblinXNA.SceneGraph.Camera.Rotation">
            <summary>
            Gets or sets the rotation of this camera's view point. The initial forward vector is
            (0, 0, -1) (into the display), and the up vector is (0, 1, 0).
            </summary>
        </member>
        <member name="P:GoblinXNA.SceneGraph.Camera.View">
            <summary>
            Gets or sets the view transform.
            </summary>
        </member>
        <member name="P:GoblinXNA.SceneGraph.Camera.CameraTransformation">
            <summary>
            Gets the transformation created by composing Rotation and Translation.
            </summary>
            <remarks>
            = Matrix.CreateFromQuaternion(rotation) * Matrix.CreateTranslation(translation)
            </remarks>
            <see cref="P:GoblinXNA.SceneGraph.Camera.Translation"/>
            <seealso cref="P:GoblinXNA.SceneGraph.Camera.Rotation"/>
        </member>
        <member name="P:GoblinXNA.SceneGraph.Camera.Projection">
            <summary>
            Gets or sets the projection matrix of this camera.
            If this matrix is not set, then the project matrix is calculated by using
            the FieldOfViewY, AspectRatio, ZNearPlane, and ZFarPlane. If this matrix is set to a 
            matrix, then that matrix will be returned when accessing this value.
            </summary>
        </member>
        <member name="P:GoblinXNA.SceneGraph.Camera.FieldOfViewY">
            <summary>
            Gets or sets the vertical field of view in radians. 
            The default value is MathHelper.ToRadians(45)
            </summary>
        </member>
        <member name="P:GoblinXNA.SceneGraph.Camera.AspectRatio">
            <summary>
            Gets or sets the aspect ratio. Default value is set to Viewport.Width / Viewport.Height
            </summary>
        </member>
        <member name="P:GoblinXNA.SceneGraph.Camera.ZNearPlane">
            <summary>
            Gets or sets the distance of the near clipping plane from the view position.
            The default value is 1.0f.
            </summary>
        </member>
        <member name="P:GoblinXNA.SceneGraph.Camera.ZFarPlane">
            <summary>
            Gets or sets the distance of the far clipping plane from the view position.
            The default value is 1000.0f;
            </summary>
        </member>
        <member name="T:GoblinXNA.SceneGraph.CameraNode">
            <summary>
            A scene graph node that holds the camera properties of the viewer.
            </summary>
        </member>
        <member name="M:GoblinXNA.SceneGraph.CameraNode.#ctor(System.String,GoblinXNA.SceneGraph.Camera)">
            <summary>
            Creates a scene graph node that holds the camera properties of the viewer with a specified
            node name.
            </summary>
            <param name="name">The name of this camera node</param>
            <param name="camera">The actual camera properties associated with this node</param>
        </member>
        <member name="M:GoblinXNA.SceneGraph.CameraNode.#ctor(GoblinXNA.SceneGraph.Camera)">
            <summary>
            Creates a scene graph node that holds the camera properties of the viewer.
            </summary>
            <param name="camera"></param>
        </member>
        <member name="P:GoblinXNA.SceneGraph.CameraNode.Camera">
            <summary>
            Gets or sets the actual camera class associated with this node.
            </summary>
        </member>
        <member name="P:GoblinXNA.SceneGraph.CameraNode.CompoundViewMatrix">
            <summary>
            Gets the view matrix of the mono (non-stereo) camera.
            </summary>
        </member>
        <member name="P:GoblinXNA.SceneGraph.CameraNode.WorldTransformation">
            <summary>
            Gets the world transformation of the viewer.
            </summary>
        </member>
        <member name="P:GoblinXNA.SceneGraph.CameraNode.LeftCompoundViewMatrix">
            <summary>
            Gets the view matrix of the left eye of the stereo camera.
            </summary>
            <exception cref="T:GoblinXNA.GoblinException">If non-stereo camera is used</exception>
        </member>
        <member name="P:GoblinXNA.SceneGraph.CameraNode.RightCompoundViewMatrix">
            <summary>
            Gets the view matrix of the right eye of the stereo camera.
            </summary>
            <exception cref="T:GoblinXNA.GoblinException">If non-stereo camera is used</exception>
        </member>
        <member name="P:GoblinXNA.SceneGraph.CameraNode.Stereo">
            <summary>
            Gets whether the camera is a stereo camera.
            </summary>
        </member>
        <member name="P:GoblinXNA.SceneGraph.CameraNode.BoundingFrustum">
            <summary>
            Gets the camera frustum that is defined with top, bottom, left, right, near, and
            far clipping planes.
            </summary>
        </member>
        <member name="P:GoblinXNA.SceneGraph.CameraNode.LeftBoundingFrustum">
            <summary>
            Gets the camera frustum of the left eye for a stereo camera.
            </summary>
            <exception cref="T:GoblinXNA.GoblinException">If non-stereo camera is used</exception>
        </member>
        <member name="P:GoblinXNA.SceneGraph.CameraNode.RightBoundingFrustum">
            <summary>
            Gets the camera frustum of the right eye for a stereo camera.
            </summary>
            <exception cref="T:GoblinXNA.GoblinException">If non-stereo camera is used</exception>
        </member>
        <member name="T:GoblinXNA.SceneGraph.GeometryNode">
            <summary>
            A scene graph node that holds the model geometry, physical properties, etc.
            </summary>
        </member>
        <member name="F:GoblinXNA.SceneGraph.GeometryNode.needsToUpdateLocalLights">
            <summary>
            Indicates whether the local lights need to be updated in its shader
            </summary>
        </member>
        <member name="M:GoblinXNA.SceneGraph.GeometryNode.#ctor(System.String)">
            <summary>
            Creates a geometry node that contains the actual geometry information required for
            rendering, physics simulation, and networking with a specified node name.
            </summary>
            <param name="name">
            The name of this geometry node (has to be unique for correct networking behavior)
            </param>
        </member>
        <member name="M:GoblinXNA.SceneGraph.GeometryNode.#ctor">
            <summary>
            Creates a geometry node that contains the actual geometry information required for
            rendering, physics simulation, and networking.
            </summary>
        </member>
        <member name="P:GoblinXNA.SceneGraph.GeometryNode.Model">
            <summary>
            Gets or sets the actual model used for rendering and physics simulation.
            </summary>
        </member>
        <member name="P:GoblinXNA.SceneGraph.GeometryNode.Material">
            <summary>
            Gets or sets the material properties of this model.
            </summary>
        </member>
        <member name="P:GoblinXNA.SceneGraph.GeometryNode.LocalLights">
            <summary>
            Gets or sets the list of local light sources that will be used for illumination.
            </summary>
        </member>
        <member name="P:GoblinXNA.SceneGraph.GeometryNode.AddToPhysicsEngine">
            <summary>
            Gets or sets whether to add this geometry node to the physics engine.
            </summary>
        </member>
        <member name="P:GoblinXNA.SceneGraph.GeometryNode.PhysicsStateChanged">
            <summary>
            Gets or sets whether AddToPhysicsEngine property has been changed.
            </summary>
        </member>
        <member name="P:GoblinXNA.SceneGraph.GeometryNode.OcclusionStateChanged">
            <summary>
            Gets or sets whether IsOccluder property is changed. 
            </summary>
        </member>
        <member name="P:GoblinXNA.SceneGraph.GeometryNode.Physics">
            <summary>
            Gets or sets the physics properties associated with this geometry node.
            </summary>
        </member>
        <member name="P:GoblinXNA.SceneGraph.GeometryNode.WorldTransformation">
            <summary>
            Gets the transformation of the model.
            </summary>
        </member>
        <member name="P:GoblinXNA.SceneGraph.GeometryNode.MarkerTransform">
            <summary>
            Gets the transform updated by a marker. This information is valid only when
            at least one of its successor is a MarkerNode.
            </summary>
        </member>
        <member name="P:GoblinXNA.SceneGraph.GeometryNode.MarkerTransformSet">
            <summary>
            Gets whether the MarkerTransform property is valid (non Identity matrix)
            </summary>
        </member>
        <member name="P:GoblinXNA.SceneGraph.GeometryNode.IsRendered">
            <summary>
            Gets or sets whether this node is added to rendering routine
            </summary>
        </member>
        <member name="P:GoblinXNA.SceneGraph.GeometryNode.ShouldRender">
            <summary>
            Gets or sets whether this node should be rendered
            </summary>
        </member>
        <member name="P:GoblinXNA.SceneGraph.GeometryNode.IsOccluder">
            <summary>
            Gets or sets whether this node is used as an occluder that occludes any object
            that is rendered behind this object
            </summary>
        </member>
        <member name="P:GoblinXNA.SceneGraph.GeometryNode.BoundingVolume">
            <summary>
            Gets a sphere that encloses the contents of all the nodes below the current one.
            </summary>
            <remarks>
            This node itself is not included in this bounding sphere
            </remarks>
        </member>
        <member name="P:GoblinXNA.SceneGraph.GeometryNode.ShowBoundingVolume">
            <summary>
            Gets or sets if the bounding volume (sphere) should be displayed.
            (Currently not implemented)
            </summary>
        </member>
        <member name="P:GoblinXNA.SceneGraph.GeometryNode.IgnoreDepth">
            <summary>
            Gets or sets whether to ignore the depth buffer for drawing this geometry.
            Default value is false.
            </summary>
            <remarks>
            Anything other than the drawing (e.g., physics simulation) will still take the 
            depth into consideration even if this is set to true.
            </remarks>
        </member>
        <member name="P:GoblinXNA.SceneGraph.GeometryNode.AlwaysRender">
            <summary>
            Indicates whether to render this geometry regardless of whether the bounding sphere of the 
            associated model is within the view frustum of the main camera. The default value is false.
            </summary>
            <remarks>
            This property is ignored if Scene.EnableFrustumCulling is set to false.
            </remarks>
        </member>
        <member name="T:GoblinXNA.SceneGraph.LightNode">
            <summary>
            A scene graph node that holds a light source.
            </summary>
        </member>
        <member name="M:GoblinXNA.SceneGraph.LightNode.#ctor(System.String)">
            <summary>
            Creates a node that can hold a light source.
            </summary>
            <param name="name">The name of this light node</param>
        </member>
        <member name="M:GoblinXNA.SceneGraph.LightNode.#ctor">
            <summary>
            Creates a light node with an empty name
            </summary>
        </member>
        <member name="M:GoblinXNA.SceneGraph.LightNode.CloneNode">
            <summary>
            Clones this light node.
            </summary>
            <returns></returns>
        </member>
        <member name="P:GoblinXNA.SceneGraph.LightNode.LightSource">
            <summary>
            Gets or sets a light source associated with this node
            </summary>
        </member>
        <member name="P:GoblinXNA.SceneGraph.LightNode.Global">
            <summary>
            Gets or sets whether this light is a global light source. If set to true, then no 
            matter where in the scene graph this light node exists, the light source associated
            with this node will affect all objects in the scene graph. If set to false, then this node's
            light source will affect only this node's siblings and siblings children. The default 
            value is true.
            </summary>
        </member>
        <member name="P:GoblinXNA.SceneGraph.LightNode.CastShadows">
            <summary>
            Gets or sets whether this light should cast shadows when Scene.EnableShadowMapping is set to true.
            The default value is true. You should also set LightProjection property if you set this to true.
            </summary>
            <see cref="P:GoblinXNA.SceneGraph.LightNode.LightProjection"/>
        </member>
        <member name="P:GoblinXNA.SceneGraph.LightNode.AmbientLightColor">
            <summary>
            Gets or sets the ambient light color. The default value is (0.0f, 0.0f, 0.0f, 1.0f).
            </summary>
        </member>
        <member name="P:GoblinXNA.SceneGraph.LightNode.WorldTransformation">
            <summary>
            Gets the world transformation of this light node.
            </summary>
        </member>
        <member name="P:GoblinXNA.SceneGraph.LightNode.LightProjection">
            <summary>
            Gets or sets the light projection used for casting shadows. If you set CastShadows property to true,
            you should also set this projection matrix.
            </summary>
        </member>
        <member name="P:GoblinXNA.SceneGraph.LightNode.HasChanged">
            <summary>
            Indicates whether the light source or light node itself has changes to be reflected.
            </summary>
        </member>
        <member name="T:GoblinXNA.SceneGraph.LODNode">
            <summary>
            A scene graph node that is used to render a geometric model with different level of
            details depending on the distance of the model from the viewer. 
            </summary>
        </member>
        <member name="M:GoblinXNA.SceneGraph.LODNode.#ctor(System.String,System.Collections.Generic.List{GoblinXNA.Graphics.IModel})">
            <summary>
            Creates a LOD (Level Of Detail) node that holds a list of models with different level
            of details. 
            </summary>
            <param name="name">
            The name of this node (has to be unique for correct networking behavior)
            </param>
            <param name="models">
            A list of models with different level of details
            </param>
        </member>
        <member name="M:GoblinXNA.SceneGraph.LODNode.#ctor(System.Collections.Generic.List{GoblinXNA.Graphics.IModel})">
            <summary>
            Creates a LOD (Level Of Detail) node that holds a list of models with different level
            of details. 
            </summary>
            <param name="models">A list of models with different level of details</param>
        </member>
        <member name="M:GoblinXNA.SceneGraph.LODNode.Update(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Updates the level of details using the given camera (viewer) location. 
            </summary>
            <param name="cameraLocation"></param>
        </member>
        <member name="P:GoblinXNA.SceneGraph.LODNode.Models">
            <summary>
            Gets or sets a set of models with different level of details to use.
            </summary>
        </member>
        <member name="P:GoblinXNA.SceneGraph.LODNode.LevelOfDetail">
            <summary>
            Gets or sets current level of detail. Default value is 0. The value has to be
            between 0 and number of models - 1 (Models.Count - 1). 
            </summary>
            <remarks>
            If AutoComputerLevelOfDetail is set to true, then setting this value would NOT
            take effect. 
            </remarks>
            <exception cref="T:GoblinXNA.GoblinException">If level of detail is out of range</exception>
            <see cref="P:GoblinXNA.SceneGraph.LODNode.AutoComputeLevelOfDetail"/>
        </member>
        <member name="P:GoblinXNA.SceneGraph.LODNode.AutoComputeLevelOfDetail">
            <summary>
            Gets or sets whether to automatically compute the appropriate level of details
            to use based on the distances set in AutoComputeDistances.
            </summary>
            <remarks>
            You have to also set AutoComputeDistances if you set this value to true.
            </remarks>
            <see cref="P:GoblinXNA.SceneGraph.LODNode.AutoComputeDistances"/>
        </member>
        <member name="P:GoblinXNA.SceneGraph.LODNode.AutoComputeDistances">
            <summary>
            Gets or sets the distances to use to switch among different level of details
            automatically when AutoComputeLevelOfDetail is set to true. The number of distances
            should be (Models.Count - 1).
            </summary>
            <remarks>
            If there are four models and the AutoComputeDistances is set to {5, 10, 20}, then when
            the distance (dist) between the viewer and the model is:
            [0 - 5], the first model is used;
            [5 - 10], the second model is used;
            [10 - 20], the third model is used;
            [20 - infinity], the fourth model is used.
            </remarks>
            <exception cref="T:GoblinXNA.GoblinException">If number of distances is incorrect</exception>
            <see cref="P:GoblinXNA.SceneGraph.LODNode.AutoComputeLevelOfDetail"/>
        </member>
        <member name="T:GoblinXNA.SceneGraph.MarkerBundleNode">
            <summary>
            A scene graph node that defines a bundle of optically tracked fiducial marker arrays.
            The supporting marker nodes can supplement the tracking of the base marker array
            if the base marker array is not visible.
            
            Any nodes added below a MarkerBundleNode with WorldTranformation properties will be affected by the
            transformation returned by the marker tracker including GeometryNode, ParticleNode, SoundNode,
            CameraNode, and LightNode.
            </summary>
            <remarks>
            Do not add any of the supporting marker nodes to the scene since they will be updated
            automatically by this node.
            </remarks>
        </member>
        <member name="T:GoblinXNA.SceneGraph.MarkerNode">
            <summary>
            A scene graph node that defines an optically tracked fiducial marker.
            
            Any nodes added below a MarkerNode with WorldTranformation properties will be affected by the
            transformation returned by the marker tracker including GeometryNode, ParticleNode, SoundNode,
            CameraNode, and LightNode.
            </summary>
        </member>
        <member name="M:GoblinXNA.SceneGraph.MarkerNode.#ctor(System.String,GoblinXNA.Device.Vision.Marker.IMarkerTracker,System.Object[])">
            <summary>
            Creates a node that is tracked by fiducial marker (can be either an array or
            a single marker) and updated automatically.
            </summary>
            <param name="name">Name of this marker node</param>
            <param name="tracker">A marker tracker used to track this fiducial marker</param>
            <param name="markerConfigs">A list of configs that specify the fiducial marker 
            (can be either an array or a single marker) to look for</param>
        </member>
        <member name="M:GoblinXNA.SceneGraph.MarkerNode.#ctor(GoblinXNA.Device.Vision.Marker.IMarkerTracker,System.Object[])">
            <summary>
            Creates a node that is tracked by fiducial marker (can be either an array or a single
            marker) and updated automatically.
            </summary>
            <param name="tracker">A marker tracker used to track this fiducial marker</param>
            <param name="markerConfigs">A list of configs that specify the fiducial marker 
            (can be either an array or a single marker) to look for</param>
        </member>
        <member name="M:GoblinXNA.SceneGraph.MarkerNode.CloneNode">
            <summary>
            Marker node does not allow cloning a node.
            </summary>
            <returns></returns>
            <exception cref="T:GoblinXNA.GoblinException">If this method is called</exception>
        </member>
        <member name="M:GoblinXNA.SceneGraph.MarkerNode.Update(System.Single)">
            <summary>
            Updates the current matrix of this marker node
            </summary>
            <param name="elapsedTime">Elapsed time from last update in milliseconds</param>
        </member>
        <member name="P:GoblinXNA.SceneGraph.MarkerNode.MarkerID">
            <summary>
            Gets the marker ID returned by the marker tracker library.
            </summary>
        </member>
        <member name="P:GoblinXNA.SceneGraph.MarkerNode.Smoother">
            <summary>
            Gets or sets the smoother used to filter the matrix returned by the optical marker
            tracker.
            </summary>
        </member>
        <member name="P:GoblinXNA.SceneGraph.MarkerNode.Predictor">
            <summary>
            Gets or sets the prediction filter to apply to the transformation returned by the
            optical marker tracker.
            </summary>
        </member>
        <member name="P:GoblinXNA.SceneGraph.MarkerNode.MaxDropouts">
            <summary>
            Gets or sets the maximum number of dropouts. If it fails to detect the marker within
            'MaxDropouts' frames, the WorldTransform becomes an empty matrix. Set this value to
            -1 number if you want to keep the last detected transformation indefinitely when the
            marker is not found.
            </summary>
            <remarks>
            Dropout count is used to make marker tracking more stable. For example, if MaxDropouts
            is set to 5, then even if the marker is not detected for 5 frames, it will use the previously
            detected transformation.
            </remarks>
            <seealso cref="P:GoblinXNA.SceneGraph.MarkerNode.WorldTransformation"/>
        </member>
        <member name="P:GoblinXNA.SceneGraph.MarkerNode.MarkerFound">
            <summary>
            Gets whether the marker is detected.
            </summary>
        </member>
        <member name="P:GoblinXNA.SceneGraph.MarkerNode.InverseCameraView">
            <summary>
            Gets or sets the inverse transform of the current camera's view matrix. Set this property
            if your camera's view matrix is other than an Identity matrix. Setting this properly will 
            ensure that your geometry attached to this marker node will appear on top of the marker.
            </summary>
        </member>
        <member name="P:GoblinXNA.SceneGraph.MarkerNode.WorldTransformation">
            <summary>
            Gets the transformation of the detected marker. 
            </summary>
            <remarks>
            If no marker is detected after MaxDropouts, then transformation matrix with 
            all zero values is returned.
            </remarks>
        </member>
        <member name="P:GoblinXNA.SceneGraph.MarkerNode.Optimize">
            <summary>
            Gets or sets whether to optimize the scene graph by not traversing the nodes
            added below this node if marker is not found.
            </summary>
        </member>
        <member name="M:GoblinXNA.SceneGraph.MarkerBundleNode.#ctor(System.String,GoblinXNA.Device.Vision.Marker.IMarkerTracker,System.Collections.Generic.List{GoblinXNA.SceneGraph.MarkerNode},System.Object[])">
            <summary>
            Creates a marker bundle node.
            </summary>
            <param name="name">Name of this marker bundle node</param>
            <param name="tracker">A marker tracker used to track this fiducial marker</param>
            <param name="supportingMarkerNodes">A list of marker nodes that will supplement
            the base marker array</param>
            <param name="markerConfigs">A list of configs that specify the fiducial marker 
            (can be either an array or a single marker) to look for</param>
        </member>
        <member name="M:GoblinXNA.SceneGraph.MarkerBundleNode.#ctor(GoblinXNA.Device.Vision.Marker.IMarkerTracker,System.Collections.Generic.List{GoblinXNA.SceneGraph.MarkerNode},System.Object[])">
            <summary>
            Creates a marker bundle node.
            </summary>
            <param name="tracker">A marker tracker used to track this fiducial marker</param>
            <param name="supportingMarkerNodes">A list of marker nodes that will supplement
            the base marker array</param>
            <param name="markerConfigs">A list of configs that specify the fiducial marker 
            (can be either an array or a single marker) to look for</param>
        </member>
        <member name="P:GoblinXNA.SceneGraph.MarkerBundleNode.AutoReconfigure">
            <summary>
            Gets or sets whether to auto reconfigure the transform of each supporting marker nodes
            relative to the base marker array. Default value is false.
            </summary>
        </member>
        <member name="T:GoblinXNA.SceneGraph.ParticleUpdateHandler">
            <summary>
            A delegate function that defines how a list of particle effects should be updated. The update
            is mainly for adding new particles to each of the effects.
            </summary>
            <param name="worldTransform">The transformation of the particle effects</param>
            <param name="particleEffects">A list of particle effects added in a ParticleNode</param>
        </member>
        <member name="T:GoblinXNA.SceneGraph.ParticleNode">
            <summary>
            A scene graph node that defines a collection of particle effects.
            </summary>
        </member>
        <member name="M:GoblinXNA.SceneGraph.ParticleNode.#ctor(System.String)">
            <summary>
            Creates a scene graph node that holds a collection of particle effects.
            </summary>
            <param name="name">The name of this particle node</param>
        </member>
        <member name="M:GoblinXNA.SceneGraph.ParticleNode.Update(System.TimeSpan)">
            <summary>
            Updates the associated particle effects.
            </summary>
            <param name="elapsedTime"></param>
        </member>
        <member name="M:GoblinXNA.SceneGraph.ParticleNode.Render">
            <summary>
            Renders the associated particle effects.
            </summary>
        </member>
        <member name="P:GoblinXNA.SceneGraph.ParticleNode.ParticleEffects">
            <summary>
            Gets or sets a collection of particle effects associated with this node.
            </summary>
        </member>
        <member name="P:GoblinXNA.SceneGraph.ParticleNode.WorldTransformation">
            <summary>
            Gets or sets the world transformation of the associated particle effects.
            </summary>
            <remarks>
            If there is a TransformNode in its ancestor nodes, then you usually shouldn't set
            this matrix.
            </remarks>
        </member>
        <member name="P:GoblinXNA.SceneGraph.ParticleNode.IsRendered">
            <summary>
            Gets or sets whether the particle systems in this node should be rendered.
            The default value is true.
            </summary>
        </member>
        <member name="T:GoblinXNA.SceneGraph.Scene">
            <summary>
            The most important class in Goblin XNA that handles 3D scene processing and rendering.
            </summary>
        </member>
        <member name="F:GoblinXNA.SceneGraph.Scene.rootNode">
            <summary>
            The root node of this scene graph
            </summary>
        </member>
        <member name="F:GoblinXNA.SceneGraph.Scene.nodeTable">
            <summary>
            A hash table that stores Node objects with their names as the keys
            </summary>
        </member>
        <member name="F:GoblinXNA.SceneGraph.Scene.opaqueGroup">
            <summary>
            A list of geometry nodes that are opaque (same as nodeRenderGroups but in
            a 1dimensional list for easy searching)
            </summary>
        </member>
        <member name="F:GoblinXNA.SceneGraph.Scene.renderGroups">
            <summary>
            A list of boolean values indicating whether nodes with certain groupID should
            be rendered
            </summary>
        </member>
        <member name="F:GoblinXNA.SceneGraph.Scene.transparentGroup">
            <summary>
            A list of geometry nodes that are transparent
            </summary>
        </member>
        <member name="F:GoblinXNA.SceneGraph.Scene.transparencySortOrder">
            <summary>
            A comparer for sorting the drawing order of transparent geometries
            </summary>
        </member>
        <member name="F:GoblinXNA.SceneGraph.Scene.needTransparencySort">
            <summary>
            Indicates whether the transparent nodes should be re-sorted
            </summary>
        </member>
        <member name="F:GoblinXNA.SceneGraph.Scene.occluderGroup">
            <summary>
            A list of geometry nodes that function as occluders
            </summary>
        </member>
        <member name="F:GoblinXNA.SceneGraph.Scene.renderedEffects">
            <summary>
            A list of particle effects that need to be rendered
            </summary>
        </member>
        <member name="F:GoblinXNA.SceneGraph.Scene.cameraNode">
            <summary>
            The current camera node associated with this scene graph
            </summary>
        </member>
        <member name="F:GoblinXNA.SceneGraph.Scene.physicsEngine">
            <summary>
            The physics engine implementation used in this scene graph
            </summary>
        </member>
        <member name="F:GoblinXNA.SceneGraph.Scene.globalLights">
            <summary>
            A list of global light sources in this scene graph
            </summary>
        </member>
        <member name="F:GoblinXNA.SceneGraph.Scene.needsToUpdateGlobalLighting">
            <summary>
            Indicates whether we need to pass lighting info to shaders to update them
            </summary>
        </member>
        <member name="F:GoblinXNA.SceneGraph.Scene.markerTracker">
            <summary>
            The marker tracker object
            </summary>
        </member>
        <member name="F:GoblinXNA.SceneGraph.Scene.videoCaptures">
            <summary>
            The video capture object
            </summary>
        </member>
        <member name="F:GoblinXNA.SceneGraph.Scene.renderAabb">
            <summary>
            Used for physics engine debugging
            </summary>
        </member>
        <member name="F:GoblinXNA.SceneGraph.Scene.renderLeftView">
            <summary>
            For stereo rendering
            </summary>
        </member>
        <member name="M:GoblinXNA.SceneGraph.Scene.#ctor">
            <summary>
            Creates a 3D scene.
            </summary>
            <param name="mainGame">The main Game class</param>
        </member>
        <member name="M:GoblinXNA.SceneGraph.Scene.UpdateParticleEffects(System.TimeSpan)">
            <summary>
            Updates the particle effects added in the scene graph.
            </summary>
            <param name="elapsedTime"></param>
        </member>
        <member name="M:GoblinXNA.SceneGraph.Scene.PrepareSceneForRendering">
            <summary>
            Prepares the scene for rendering by traversing the entire scene graph using pre-order traversal.
            </summary>
        </member>
        <member name="M:GoblinXNA.SceneGraph.Scene.IsWithinViewFrustum(GoblinXNA.SceneGraph.GeometryNode)">
            <summary>
            Tests whether a bounding sphere is within the viewing frustum of the current active camera
            </summary>
            <param name="boundingVolume"></param>
            <returns></returns>
        </member>
        <member name="M:GoblinXNA.SceneGraph.Scene.RecursivePrepareForRendering(GoblinXNA.SceneGraph.Node,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@,System.Boolean)">
            <summary>
            Recursively traverses the scene graph using pre-order traversal.
            </summary>
            <param name="node"></param>
            <param name="parentWorldTransformation"></param>
            <param name="markerTransform"></param>
            <param name="calculateAll"></param>
        </member>
        <member name="M:GoblinXNA.SceneGraph.Scene.RecursivelyRemoveFromScene(GoblinXNA.SceneGraph.Node)">
            <summary>
            Recursively removes a node and all of its children from the scene graph.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:GoblinXNA.SceneGraph.Scene.AddToOpaqueGroup(GoblinXNA.SceneGraph.GeometryNode)">
            <summary>
            Adds a geometry node to the render group with opaque material.
            </summary>
            <param name="node"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:GoblinXNA.SceneGraph.Scene.AddToTransparencyGroup(GoblinXNA.SceneGraph.GeometryNode)" -->
        <member name="M:GoblinXNA.SceneGraph.Scene.AddToOccluderGroup(GoblinXNA.SceneGraph.GeometryNode)">
            <summary>
            Add a geometry node to the occluder group. The occluder group contains geometry nodes
            that are defined as a occluder object (GeometryNode.IsOccluder == true).
            </summary>
            <param name="node"></param>
            <remarks>In VRScene, occlusion doesn't make sense, so added to render group</remarks>
        </member>
        <member name="M:GoblinXNA.SceneGraph.Scene.RemoveFromRenderedGroups(GoblinXNA.SceneGraph.GeometryNode)">
            <summary>
            Removes a geometry node from the scene graph
            </summary>
            <param name="node">A geometry node to be removed</param>
        </member>
        <member name="M:GoblinXNA.SceneGraph.Scene.RenderShadows">
            <summary>
            Renders the shadows.
            </summary>
        </member>
        <member name="M:GoblinXNA.SceneGraph.Scene.RenderSceneGraph">
            <summary>
            Renders the scene.
            </summary>
        </member>
        <member name="M:GoblinXNA.SceneGraph.Scene.RenderGroup(System.Collections.Generic.List{GoblinXNA.SceneGraph.GeometryNode},System.Int32,System.Boolean)">
            <summary>
            Renders a group of geomety nodes.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:GoblinXNA.SceneGraph.Scene.InitializeVideoImageSize(System.Int32,GoblinXNA.Device.Capture.IVideoCapture)">
            <summary>
            Initializes the sizes of the buffered video image holders. 
            </summary>
            <param name="id">Either 0 (left eye) or 1 (right eye). Should be 0 if mono.</param>
            <param name="videoDevice"></param>
        </member>
        <member name="M:GoblinXNA.SceneGraph.Scene.InitializeVideoPointerSize(GoblinXNA.Device.Capture.IVideoCapture)">
            <summary>
            Initilizes the sizes of the bufferd video image pointers.
            </summary>
            <param name="videoDevice"></param>
        </member>
        <member name="M:GoblinXNA.SceneGraph.Scene.UpdateTracker">
            <summary>
            Updates the optical marker tracker as well as the video image
            </summary>
        </member>
        <member name="M:GoblinXNA.SceneGraph.Scene.UpdateTrackerAndImage">
            <summary>
            Updates the optical marker tracker as well as the video image
            </summary>
        </member>
        <member name="M:GoblinXNA.SceneGraph.Scene.SetTextureData(System.Int32)">
            <summary>
            Sets the video texture data.
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:GoblinXNA.SceneGraph.Scene.AddAabbLine(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.BoundingBox,System.Boolean)">
            <summary>
            Renders the axis-aligned bounding box obtained from the physics engine for each
            GeometryNode added to the physics engine for debugging.
            </summary>
            <param name="markerTransform"></param>
            <param name="aabb"></param>
            <param name="multiply"></param>
        </member>
        <member name="M:GoblinXNA.SceneGraph.Scene.AddColMeshLine(Microsoft.Xna.Framework.Matrix,System.Collections.Generic.List{System.Collections.Generic.List{Microsoft.Xna.Framework.Vector3}},System.Boolean)">
            <summary>
            Renders the detailed collision mesh obtained from the physics engine for each
            GeometryNode added to the physics engine for debugging.
            </summary>
            <param name="markerTransform"></param>
            <param name="collisionMesh"></param>
            <param name="multiply"></param>
        </member>
        <member name="M:GoblinXNA.SceneGraph.Scene.UpdatePhysicsSimulation">
            <summary>
            Updates the physics simulatin.
            </summary>
        </member>
        <member name="M:GoblinXNA.SceneGraph.Scene.GetNode(System.String)">
            <summary>
            Gets a Node object added to this scene graph with its node name.
            Null is returned if the name does not exist.
            </summary>
            <remarks>
            If you try to access a node right after adding it to the scene graph, this method will
            throw an exception since the node won't be added to the node list until the scene graph
            is processed after Draw(...) method is called.
            </remarks>
            <param name="name">The name of the node you're looking for</param>
            <returns></returns>
        </member>
        <member name="M:GoblinXNA.SceneGraph.Scene.HasNode(System.String)">
            <summary>
            Indicates whether a node with the specified name exists in the current scene graph.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:GoblinXNA.SceneGraph.Scene.EnableRenderGroups(System.Int32,System.Boolean)">
            <summary>
            Enables or disables the rendering of a certain group with the specified groupID.
            </summary>
            <param name="groupID"></param>
            <param name="enable"></param>
        </member>
        <member name="M:GoblinXNA.SceneGraph.Scene.AddVideoCaptureDevice(GoblinXNA.Device.Capture.IVideoCapture)">
            <summary>
            Adds a video streaming decoder implementation for background rendering and 
            marker tracking.
            </summary>
            <remarks>
            The video capture device should be initialized before it can be added.
            </remarks>
            <param name="device">A video streaming decoder implementation</param>
            <exception cref="T:GoblinXNA.GoblinException">If the device is not initialized</exception>
        </member>
        <member name="M:GoblinXNA.SceneGraph.Scene.CaptureScene(System.String)">
            <summary>
            Captures the current frame/back buffer and stores it in PNG format if the extension is in '.png' or
            in JPEG format if the extension is other than '.png' or unspecified.
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:GoblinXNA.SceneGraph.Scene.RenderScene">
            <summary>
            Only renders the 3D scene and the 2DUIs. Unlike the Draw function, this function 
            doesn't perform physics update or scene graph updates. It simply renders 
            the 3D scene. This method is useful when you need to render the scene more than once 
            (e.g., when rendering multiple viewport or stereoscopic view).
            </summary>
        </member>
        <member name="M:GoblinXNA.SceneGraph.Scene.RenderScene(System.Boolean)">
            <summary>
            Only renders the 3D scene (and the 2DUIs if 'renderUI' is true). Unlike the Draw function, 
            this function doesn't perform physics update or scene graph updates. It simply renders 
            the 3D scene. This method is useful when you need to render the scene more than once 
            (e.g., when rendering multiple viewport or stereoscopic view).
            <param name="renderUI">Whether to renderUI</param>
            </summary>
        </member>
        <member name="M:GoblinXNA.SceneGraph.Scene.RenderScene(System.Boolean,System.Boolean)">
            <summary>
            Only renders the 3D scene (and the 2DUIs if 'renderUI' is true). Unlike the Draw function, 
            this function doesn't perform physics update or scene graph updates if 'reTraverseScenegraph is
            false). It simply renders the 3D scene. This method is useful when you need to render the scene more 
            than once (e.g., when rendering multiple viewport or stereoscopic view).
            <param name="renderUI">Whether to renderUI</param>
            <param name="reTraverseScenegraph">Whether to re-traverse the scenegraph before rendering in the
            case the scene graph has changes</param>
            </summary>
        </member>
        <member name="M:GoblinXNA.SceneGraph.Scene.Update(System.TimeSpan,System.Boolean,System.Boolean)">
            <summary>
            Updates the scene graph.
            </summary>
            <remarks>
            For releases prior to version 4.0, you didn't need to call this Update method, but from version 4.0, 
            you have to call this method in your Game.Update(...) method. This change enables the integration of
            Goblin XNA with WPF and Silverlight.
            </remarks>
            <param name="elapsedTime">The elapsed game time (e.g., gameTime.ElasedGameTime)</param>
            <param name="isRunningSlow">Whether the game is running slow (e.g., gameTime.IsRunningSlowly)</param>
            <param name="isFocused">Whether the game window is focused (e.g., this.IsActive)</param>
        </member>
        <member name="M:GoblinXNA.SceneGraph.Scene.Draw(System.TimeSpan,System.Boolean)">
            <summary>
            Renders the scene graph.
            </summary>
            <remarks>
            For releases prior to version 4.0, you didn't need to call this Draw method, but from version 4.0, 
            you have to call this method in your Game.Draw(...) method. This change enables the integration of
            Goblin XNA with WPF and Silverlight.
            </remarks>
            <param name="elapsedTime">The elapsed game time (e.g., gameTime.ElasedGameTime)</param>
            <param name="isRunningSlow">Whether the game is running slow (e.g., gameTime.IsRunningSlowly)</param>
        </member>
        <member name="M:GoblinXNA.SceneGraph.Scene.Dispose">
            <summary>
            Disposes the scene graph.
            </summary>
            <remarks>
            For releases prior to version 4.0, you didn't need to call this Dispose method, but from version 4.0, 
            you have to call this method in your Game.Dispose(...) method. This change enables the integration of
            Goblin XNA with WPF and Silverlight.
            </remarks>
        </member>
        <member name="P:GoblinXNA.SceneGraph.Scene.RootNode">
            <summary>
            Gets or sets the root node of this scene graph
            </summary>
            <exception cref="T:GoblinXNA.GoblinException">If assigned to null</exception>
        </member>
        <member name="P:GoblinXNA.SceneGraph.Scene.CameraNode">
            <summary>
            Gets or sets the camera node of this scene graph. (There can be multiple camera nodes
            in one scene graph, but only one camera node should be active at a time.)
            </summary>
        </member>
        <member name="P:GoblinXNA.SceneGraph.Scene.Environment">
            <summary>
            Gets or sets the environment effect simulated in this scene including fog,
            rain, and sunflare.
            </summary>
        </member>
        <member name="P:GoblinXNA.SceneGraph.Scene.BackgroundTexture">
            <summary>
            Gets or sets the background texture. If ShowCameraImage is set, this texture
            will be ignored. Also, if this texture is set, the BackgroundColor will be
            ignored.
            </summary>
            <see cref="P:GoblinXNA.SceneGraph.Scene.ShowCameraImage"/>
            <see cref="P:GoblinXNA.SceneGraph.Scene.BackgroundColor"/>
        </member>
        <member name="P:GoblinXNA.SceneGraph.Scene.BackgroundBound">
            <summary>
            Gets or sets the background bound for video texture and 'BackgroundTexture' set by the
            user. If not set, it will use the full window dimension (which will cause stretching if
            the size of the texture and the window size is different)
            </summary>
        </member>
        <member name="P:GoblinXNA.SceneGraph.Scene.BackgroundColor">
            <summary>
            Gets or sets the background color. If either ShowCameraImage or BackgroundTexture
            is set, this will be ignored. Default color is Color.CornflowerBlue.
            </summary>
            <see cref="P:GoblinXNA.SceneGraph.Scene.ShowCameraImage"/>
            <see cref="P:GoblinXNA.SceneGraph.Scene.BackgroundTexture"/>
        </member>
        <member name="P:GoblinXNA.SceneGraph.Scene.BackgroundTextureEffects">
            <summary>
            Gets or sets the sprite effects to apply to the BackgroundTexture.
            </summary>
            <see cref="P:GoblinXNA.SceneGraph.Scene.BackgroundTexture"/>
        </member>
        <member name="P:GoblinXNA.SceneGraph.Scene.VideoBackgroundColor">
            <summary>
            Gets or sets the background color mixed with the video image. This is applicable only when
            ShowCameraImage is set to true. Default color is Color.White.
            </summary>
            <remarks>
            You can use this property to, for example, modify the transparency of the video image or
            mix a color to it.
            </remarks>
        </member>
        <member name="P:GoblinXNA.SceneGraph.Scene.SceneRenderTarget">
            <summary>
            Gets or sets the render target in which the scene will be rendered. The default value is null, which
            is the back buffer.
            </summary>
        </member>
        <member name="P:GoblinXNA.SceneGraph.Scene.TransparencyDrawOrderComparer">
            <summary>
            Gets or sets the comparer for sorting the drawing order of transparent geometries.
            If not set, then a default transparency comparer which compares the distance between 
            center of the bounding volume of the geometry and the currently active camera location.
            </summary>
        </member>
        <member name="P:GoblinXNA.SceneGraph.Scene.MarkerTracker">
            <summary>
            Gets or sets the marker tracking system.
            </summary>
            <remarks>
            If you already assigned the CameraNode, then its projection matrix will be modified
            to match the projection matrix of the marker tracker.
            </remarks>
        </member>
        <member name="P:GoblinXNA.SceneGraph.Scene.VideoCaptures">
            <summary>
            Gets a list of video capture instances.
            </summary>
            <returns>The video capture class</returns>
        </member>
        <member name="P:GoblinXNA.SceneGraph.Scene.PhysicsEngine">
            <summary>
            Gets or sets the specific physics engine implementation used for this scene graph.
            </summary>
        </member>
        <member name="P:GoblinXNA.SceneGraph.Scene.RenderAxisAlignedBoundingBox">
            <summary>
            Gets or sets whether to render the axis-aligned bounding box generated by the physics
            engine of your choice. Note that the IPhysics function GetAxisAlignedBoundingBox
            must be implemented correctly in order to render correctly.
            </summary>
        </member>
        <member name="P:GoblinXNA.SceneGraph.Scene.RenderCollisionMesh">
            <summary>
            Gets or sets whether to render the actual mesh used for collision detection by
            the physics engine of your choice. Note that the IPhysics function GetCollisionMesh
            must be implemented correctly in order to render correctly.
            </summary>
        </member>
        <member name="P:GoblinXNA.SceneGraph.Scene.NetworkHandler">
            <summary>
            Gets or sets the network handler implementation used for this scene graph.
            </summary>
        </member>
        <member name="P:GoblinXNA.SceneGraph.Scene.UIRenderer">
            <summary>
            Gets the UI renderer used in this scene. Use this property to add any UI components to
            be rendered in the scene.
            </summary>
        </member>
        <member name="P:GoblinXNA.SceneGraph.Scene.EnableShadowMapping">
            <summary>
            Gets or sets whether shadow mapping should be enabled. The default value is false.
            </summary>
            <remarks>
            Make sure to set the ShadowMap property if you set this property to true.
            </remarks>
            <see cref="P:GoblinXNA.SceneGraph.Scene.ShadowMap"/>
        </member>
        <member name="P:GoblinXNA.SceneGraph.Scene.ShadowMap">
            <summary>
            Gets or sets the shader for shadow mapping. 
            </summary>
            <remarks>
            By setting this property, EnableShadowMapping property will be automatically set 
            to true if the ShadowMap is not null.
            </remarks>
        </member>
        <member name="P:GoblinXNA.SceneGraph.Scene.EnableLighting">
            <summary>
            Gets or sets whether to enable the lighting in the scene. The default value is true.
            </summary>
        </member>
        <member name="P:GoblinXNA.SceneGraph.Scene.EnableFrustumCulling">
            <summary>
            Gets or sets whether to enable culling on each geometry node based on whether the node
            is inside of the current camera frustum. The default value is true.
            </summary>
            <remarks>
            If your application is CPU bound, then setting this to false can improve the performance. However,
            if your application is GPU bound, then leaving this value to true would have better performance.
            </remarks>
        </member>
        <member name="P:GoblinXNA.SceneGraph.Scene.AabbColor">
            <summary>
            Gets or sets the color used to draw the axis-aligned bounding box of each model for 
            debugging. Default color is Color.YellowGreen.
            </summary>
        </member>
        <member name="P:GoblinXNA.SceneGraph.Scene.CollisionMeshColor">
            <summary>
            Gets or sets the color used to draw the actual mesh used for collision detection of 
            each model for debugging. Default color is Color.Purple.
            </summary>
        </member>
        <member name="P:GoblinXNA.SceneGraph.Scene.FPS">
            <summary>
            Gets the current Frames Per Second count
            </summary>
        </member>
        <member name="P:GoblinXNA.SceneGraph.Scene.TriangleCount">
            <summary>
            Gets the current triangle count
            </summary>
        </member>
        <member name="P:GoblinXNA.SceneGraph.Scene.ShowCameraImage">
            <summary>
            Gets or sets whether to show camera captured physical image in the background.
            By default, this is false. 
            </summary>
            <see cref="P:GoblinXNA.SceneGraph.Scene.OverlayVideoID"/>
        </member>
        <member name="P:GoblinXNA.SceneGraph.Scene.OverlayVideoID">
            <summary>
            Gets or sets the video capture device ID used to provide the overlaid physical image.
            This ID should correspond to the videoDeviceID given to the initialized video device
            using InitVideoCapture method. 
            </summary>
            <remarks>
            Getting or setting this property is exactly same as getting or setting the LeftEyeVideoID
            property.
            </remarks>
            <exception cref="T:GoblinXNA.GoblinException"></exception>
        </member>
        <member name="P:GoblinXNA.SceneGraph.Scene.TrackerVideoID">
            <summary>
            Gets or sets the video capture device ID used to perform marker tracking (if available).
            This ID should correspond to the index in the VideoCaptures property, which is basically
            the order you have added the IVideoCapture through AddVideoCaptureDevice method.
            </summary>
            <remarks>
            Note that the notion of this ID has changed from Goblin XNA 3.x series.
            </remarks>
        </member>
        <member name="P:GoblinXNA.SceneGraph.Scene.LeftEyeVideoID">
            <summary>
            Gets or sets the video ID for left eye to use for stereo augmented reality. If you use 
            single camera for stereo, then you should set both LeftEyeVideoID and RightEyeVideoID to 
            the same ID. This ID should correspond to the index in the VideoCaptures property, which 
            is basically the order you have added the IVideoCapture through AddVideoCaptureDevice method.
            </summary>
            <remarks>
            Note that the notion of this ID has changed from Goblin XNA 3.x series.
            </remarks>
            <exception cref="T:GoblinXNA.GoblinException">If video ID is not valid or your camera node does not
            contain stereo information.</exception>
            <see cref="P:GoblinXNA.SceneGraph.Scene.RightEyeVideoID"/>
        </member>
        <member name="P:GoblinXNA.SceneGraph.Scene.RightEyeVideoID">
            <summary>
            Gets or sets the video ID for right eye to use for stereo augmented reality. If you use 
            single camera for stereo, then you should set both LeftEyeVideoID and RightEyeVideoID to 
            the same ID. This ID should correspond to the index in the VideoCaptures property, which 
            is basically the order you have added the IVideoCapture through AddVideoCaptureDevice method.
            </summary>
            <remarks>
            Note that the notion of this ID has changed from Goblin XNA 3.x series.
            </remarks>
            <exception cref="T:GoblinXNA.GoblinException">If video ID is not valid or your camera node does not
            contain stereo information.</exception>
            <see cref="P:GoblinXNA.SceneGraph.Scene.LeftEyeVideoID"/>
        </member>
        <member name="P:GoblinXNA.SceneGraph.Scene.FreezeVideo">
            <summary>
            Gets or sets whether to freeze currently active video streaming. 
            </summary>
            <remarks>
            This will also affect the vision tracking if tracking is used.
            </remarks>
        </member>
        <member name="P:GoblinXNA.SceneGraph.Scene.RenderBeforeBackgroundCallback">
            <summary>
            Gets or sets the callback function that is invoked before rendering the background texture
            including the video texture.
            </summary>
        </member>
        <member name="P:GoblinXNA.SceneGraph.Scene.RenderAfterBackgroundCallback">
            <summary>
            Gets or sets the callback function that is invoked after rendering the background texture
            including the video texture, but before rendering the 3D scene objects.
            </summary>
        </member>
        <member name="P:GoblinXNA.SceneGraph.Scene.RenderBeforeUICallback">
            <summary>
            Gets or sets the callback function that is invoked after all 3D geometries are rendered, but
            right before the 2D UIs are rendered.
            </summary>
        </member>
        <member name="P:GoblinXNA.SceneGraph.Scene.RenderAfterUICallback">
            <summary>
            Gets or sets the callback function that is invoked after the 2D UIs are rendered.
            </summary>
        </member>
        <member name="P:GoblinXNA.SceneGraph.Scene.NeedsImagePtr">
            <summary>
            Gets or sets whether you need the image pointer to be passed back by your
            IVideoCapture.GetTextureImage(...) even if it is not needed by the Scene class.
            Default value is false. Use this with caution.
            </summary>
        </member>
        <member name="P:GoblinXNA.SceneGraph.Scene.NeedsImageData">
            <summary>
            Gets or sets whether you need the image data (int array) to be passed back by your
            IVideoCapture.GetTextureImage(...) even if it is not needed by the Scene class.
            Default value is false. Use this with caution.
            </summary>
        </member>
        <member name="P:GoblinXNA.SceneGraph.Scene.GlobalUIShift">
            <summary>
            Gets or sets the shift amount applied to all 2D HUD drawings including the text
            in the X screen coordinate. 
            </summary>
            <remarks>
            This shift is applied only when right eye view is rendered in stereo mode. 
            </remarks>
        </member>
        <member name="P:GoblinXNA.SceneGraph.Scene.RenderLeftView">
            <summary>
            Gets whether the scene graph is currently rendering the left eye view when in stereo mode.
            </summary>
        </member>
        <member name="P:GoblinXNA.SceneGraph.Scene.AlwaysSortTransparency">
            <summary>
            Gets or sets whether to always sort transparent objects in the scene. It's best to set this
            to true if you have objects with Diffuse.W less than 1 in AR mode.
            </summary>
        </member>
        <member name="P:GoblinXNA.SceneGraph.Scene.Processing">
            <summary>
            Indicates whether the scene graph is currently being traversed.
            </summary>
        </member>
        <member name="P:GoblinXNA.SceneGraph.Scene.IsStarted">
            <summary>
            Indicates whether the scene processing has already started.
            </summary>
            <remarks>
            This is used to check whether adding nodes outside of tree traversal is 
            exception free. 
            </remarks>
        </member>
        <member name="T:GoblinXNA.SceneGraph.SoundNode">
            <summary>
            A scene graph node that represents a 3D sound source. For example, this node can be 
            added under a GeometryNode to create a sound source that follows a geometry model.
            </summary>
        </member>
        <member name="T:GoblinXNA.Sounds.IAudioEmitter">
            <summary>
            Interface used by the AudioManager to look up the position
            and velocity of entities that can emit 3D sounds.
            </summary>
        </member>
        <member name="P:GoblinXNA.Sounds.IAudioEmitter.Position">
            <summary>
            Gets the position of the sound
            </summary>
        </member>
        <member name="P:GoblinXNA.Sounds.IAudioEmitter.Forward">
            <summary>
            Gets the forward direction of the sound (if sound source is moving)
            </summary>
        </member>
        <member name="P:GoblinXNA.Sounds.IAudioEmitter.Up">
            <summary>
            Gets the up vector of the sound
            </summary>
        </member>
        <member name="P:GoblinXNA.Sounds.IAudioEmitter.Velocity">
            <summary>
            Gets the velocity of the sound (if sound source is moving)
            </summary>
        </member>
        <member name="M:GoblinXNA.SceneGraph.SoundNode.#ctor(System.String)">
            <summary>
            Creates a scene graph node that holds a 3D sound source with a specified node name.
            </summary>
            <param name="name">The name of this sound node</param>
        </member>
        <member name="M:GoblinXNA.SceneGraph.SoundNode.#ctor">
            <summary>
            Creates a scene graph node that holds a 3D sound source.
            </summary>
        </member>
        <member name="M:GoblinXNA.SceneGraph.SoundNode.Play(Microsoft.Xna.Framework.Audio.SoundEffect)">
            <summary>
            Plays the sound effect in 3D.
            </summary>
            <remarks>
            Before calling this method, you should make sure that you initialized the Sound class by calling
            the Sound.Initialize(...) method. Otherwise, an exception will be thrown.
            </remarks>
            <param name="soundEffect"></param>
        </member>
        <member name="P:GoblinXNA.SceneGraph.SoundNode.WorldTransformation">
            <summary>
            Gets or sets the world transformation (position and orientation) of the 3D sound source.
            
            If there is a TransformNode in its ancestor nodes, then you usually should not manually
            set this matrix.
            </summary>
        </member>
        <member name="T:GoblinXNA.SceneGraph.StereoCamera">
            <summary>
            This class represents a stereo camera view. Stereo only works if proper shutter glass
            and graphics card are used.
            </summary>
        </member>
        <member name="M:GoblinXNA.SceneGraph.StereoCamera.#ctor">
            <summary>
            Creates a stereo camera.
            </summary>
        </member>
        <member name="M:GoblinXNA.SceneGraph.StereoCamera.#ctor(GoblinXNA.SceneGraph.StereoCamera)">
            <summary>
            A copy constructor.
            </summary>
            <param name="source"></param>
        </member>
        <member name="P:GoblinXNA.SceneGraph.StereoCamera.InterpupillaryDistance">
            <summary>
            ﻿Gets or sets the distance between the two eyes, measured at the pupils.
            </summary>
        </member>
        <member name="P:GoblinXNA.SceneGraph.StereoCamera.InterpupillaryShift">
            <summary>
            Gets or sets the shift of the interpupillary distance from the center of the
            two eyes. Positive value will shift toward the right eye, and negative value
            will shift toward the left eye. The default value is 0.
            </summary>
            <remarks>
            This property is used when center of the stereo display is not in the middle
            of the two eyes.
            </remarks>
        </member>
        <member name="P:GoblinXNA.SceneGraph.StereoCamera.FocalLength">
            <summary>
            Gets or sets the focal length from the camera/eye.
            </summary>
        </member>
        <member name="P:GoblinXNA.SceneGraph.StereoCamera.LeftView">
            <summary>
            Gets or sets the view matrix of the left eye.
            </summary>
        </member>
        <member name="P:GoblinXNA.SceneGraph.StereoCamera.RightView">
            <summary>
            Gets or sets the view matrix of the right eye.
            </summary>
        </member>
        <member name="P:GoblinXNA.SceneGraph.StereoCamera.LeftProjection">
            <summary>
            Gets or sets the projection matrix of the left eye.
            </summary>
        </member>
        <member name="P:GoblinXNA.SceneGraph.StereoCamera.RightProjection">
            <summary>
            Gets or sets the projection matrix of the right eye.
            </summary>
        </member>
        <member name="T:GoblinXNA.SceneGraph.SwitchNode">
            <summary>
            A scene graph node that acts as a "switch" among its children. Only one child is
            traversed by the scene graph tree at any time.
            </summary>
        </member>
        <member name="M:GoblinXNA.SceneGraph.SwitchNode.#ctor(System.String)">
            <summary>
            Creates a scene graph node that acts as a "switch" with a specified node name.
            </summary>
            <param name="name">The name of this node</param>
        </member>
        <member name="M:GoblinXNA.SceneGraph.SwitchNode.#ctor">
            <summary>
            Creates a scene graph node that acts as a "switch".
            </summary>
        </member>
        <member name="P:GoblinXNA.SceneGraph.SwitchNode.SwitchID">
            <summary>
            Gets or sets the currently traversed child index.
            </summary>
            <remarks>
            This ID is not the actual ID of the child node, but the index based on the order of
            addition. The default value is 0, which indicates the 1st child.
            </remarks>
        </member>
        <member name="P:GoblinXNA.SceneGraph.SwitchNode.SwitchChanged">
            <summary>
            Gets or sets whether the "switch" has been switched.
            </summary>
        </member>
        <member name="T:GoblinXNA.SceneGraph.SynchronizedGeometryNode">
            <summary>
            A GeometryNode that is synchronized across multiple machines over network.
            NOTE: The original GeometryNode does not implement INetworkObject anymore, so if you
            want to synchronize the transform of a GeometryNode across machines, you should use this
            node instead.
            </summary>
        </member>
        <member name="M:GoblinXNA.SceneGraph.SynchronizedGeometryNode.#ctor(System.String)">
            <summary>
            Creates a network object.
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:GoblinXNA.SceneGraph.SynchronizedGeometryNode.RequiresPrecision">
            <summary>
            Gets or sets whether the transform of this geometry node needs to be transmitted
            to the other machines with precise matrix values. If set to true, 
            MatrixHelper.ConvertToUnoptimizedBytes (more bytes - 16 floats) will be used instead of
            MatrixHelper.ConvertToOptimizedBytes (less bytes - 7 or 10 floats) to convert its transform 
            to bytes. Default value is false.
            </summary>
        </member>
        <member name="T:GoblinXNA.SceneGraph.TrackerNode">
            <summary>
            A scene graph node that handles 6DOF tracking devices.
            </summary>
        </member>
        <member name="M:GoblinXNA.SceneGraph.TrackerNode.#ctor(System.String,System.String)">
            <summary>
            Creates a tracker node with the given 6DOF device identifier (see InputMapper class
            for the identifier strings).
            </summary>
            <param name="name">The name of this node</param>
            <param name="deviceIdentifier">The 6DOF device identifier (see InputMapper class)</param>
            <exception cref="T:GoblinXNA.GoblinException">If the given device identifier is not a 6DOF device</exception>
        </member>
        <member name="M:GoblinXNA.SceneGraph.TrackerNode.#ctor(System.String)">
            <summary>
            Creates a tracker node with the given 6DOF device identifier (see InputMapper class
            for the identifier strings).
            </summary>
            <param name="deviceIdentifier">The 6DOF device identifier (see InputMapper class)</param>
        </member>
        <member name="P:GoblinXNA.SceneGraph.TrackerNode.DeviceIdentifier">
            <summary>
            Gets or sets the 6DOF device identifier (see InputMapper class for the identifier strings)
            </summary>
            <exception cref="T:GoblinXNA.GoblinException">If the given device identifier is not a 6DOF device</exception>
        </member>
        <member name="P:GoblinXNA.SceneGraph.TrackerNode.Smoother">
            <summary>
            Gets or sets the smoothing filter to apply to the transformation returned from the
            6DOF device.
            </summary>
        </member>
        <member name="P:GoblinXNA.SceneGraph.TrackerNode.Predictor">
            <summary>
            Gets or sets the prediction filter to apply to the transformation returned from the
            6DOF device.
            </summary>
        </member>
        <member name="P:GoblinXNA.SceneGraph.TrackerNode.WorldTransformation">
            <summary>
            Gets the tranformation of the 6DOF tracker.
            </summary>
        </member>
        <member name="T:GoblinXNA.SceneGraph.TransformNode">
            <summary>
            A scene graph node that defines a transformation.
            </summary>
        </member>
        <member name="M:GoblinXNA.SceneGraph.TransformNode.#ctor(System.String,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Creates a scene graph node that defines the transformation of its children.
            </summary>
            <param name="name">The name of this transform node</param>
            <param name="preTranslation">Pre-translation component of this transform that will be applied
            before scaling and rotation</param>
            <param name="postTranslation">Post-translation component of this transform that will be applied
            after scaling and rotation</param>
            <param name="rotation">Rotation component of this transform in quaternion</param>
            <param name="scaling">Scaling component of this transform</param>
        </member>
        <member name="M:GoblinXNA.SceneGraph.TransformNode.#ctor(System.String,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Creates a scene graph node that defines the transform of its children with no pre-translation.
            </summary>
            <param name="name">The name of this transform node</param>
            <param name="postTranslation">Post-translation component of this transform that will be applied
            after scaling and rotation</param>
            <param name="rotation">Rotation component of this transform in quaternion</param>
            <param name="scaling">Scaling component of this transform</param>
        </member>
        <member name="M:GoblinXNA.SceneGraph.TransformNode.#ctor(System.String,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Quaternion)">
            <summary>
            Creates a scene graph node that defines the transform of its children with scaling of 1
            in each dimension and no pre-translation.
            </summary>
            <param name="name">The name of this transform node</param>
            <param name="postTranslation">Post-translation component of this transform that will be applied
            after scaling and rotation</param>
            <param name="rotation">Rotation component of this transform in quaternion</param>
        </member>
        <member name="M:GoblinXNA.SceneGraph.TransformNode.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Quaternion)">
            <summary>
            Creates a scene graph node that defines the transform of its children with scaling of 1
            in each dimension and no pre-translation.
            </summary>
            <param name="postTranslation">Post-translation component of this transform that will be applied
            after scaling and rotation</param>
            <param name="rotation">Rotation component of this transform in quaternion</param>
        </member>
        <member name="M:GoblinXNA.SceneGraph.TransformNode.#ctor(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Creates a scene graph node that defines the transform of its children with scaling of 1
            in each dimension, no rotation, and empty name.
            </summary>
            <param name="postTranslation">Post-translation component of this transform that will be applied
            after scaling and rotation</param>
        </member>
        <member name="M:GoblinXNA.SceneGraph.TransformNode.#ctor(System.String)">
            <summary>
            Creates a scene graph node that defines the transform of its children with scaling of 1
            in each dimension, no rotation, and no translation.
            </summary>
            <param name="name">The name of this transform node</param>
        </member>
        <member name="M:GoblinXNA.SceneGraph.TransformNode.#ctor">
            <summary>
            Creates a scene graph node that defines the transform of its children with scaling of 1
            in each dimension, no rotation, no translation, and no empty name.
            </summary>
        </member>
        <member name="P:GoblinXNA.SceneGraph.TransformNode.Translation">
            <summary>
            Gets or sets the post-translation component that will be applied after rotation and scaling.
            
            If WorldTransformation matrix is set directly after setting this property, then
            the value set for this property will not affect the transformation of this node.
            </summary>
            <remarks>
            If ReadOnly is set to true, then you can't set this property. Synonym of PostTranslation property.
            </remarks>
            <seealso cref="!:ReadOnly"/>
            <seealso cref="P:GoblinXNA.SceneGraph.TransformNode.WorldTransformation"/>
            <exception cref="T:GoblinXNA.GoblinException"></exception>
        </member>
        <member name="P:GoblinXNA.SceneGraph.TransformNode.PostTranslation">
            <summary>
            Gets or sets the post-translation component that will be applied after rotation and scaling.
            </summary>
            <remarks>
            Synonym of Translation property.
            </remarks>
        </member>
        <member name="P:GoblinXNA.SceneGraph.TransformNode.PreTranslation">
            <summary>
            Gets or sets the pre-translation component that will be applied before rotation and scaling.
            
            If WorldTransformation matrix is set directly after setting this property, then
            the value set for this property will not affect the transformation of this node.
            </summary>
            <remarks>
            If ReadOnly is set to true, then you can't set this property.
            </remarks>
        </member>
        <member name="P:GoblinXNA.SceneGraph.TransformNode.Rotation">
            <summary>
            Gets or sets the rotation component.
            
            If WorldTransformation matrix is set directly after setting this property, then
            the value set for this property will not affect the transformation of this node.
            </summary>
            <remarks>
            If ReadOnly is set to true, then you can't set this property.
            </remarks>
            <seealso cref="!:ReadOnly"/>
            <seealso cref="P:GoblinXNA.SceneGraph.TransformNode.WorldTransformation"/>
            <exception cref="T:GoblinXNA.GoblinException"></exception>
        </member>
        <member name="P:GoblinXNA.SceneGraph.TransformNode.Scale">
            <summary>
            Gets or sets the scale component.
            
            If WorldTransformation matrix is set directly after setting this property, then
            the value set for this property will not affect the transformation of this node.
            </summary>
            <remarks>
            If ReadOnly is set to true, then you can't set this property.
            </remarks>
            <seealso cref="!:ReadOnly"/>
            <seealso cref="P:GoblinXNA.SceneGraph.TransformNode.WorldTransformation"/>
            <exception cref="T:GoblinXNA.GoblinException"></exception>
        </member>
        <member name="P:GoblinXNA.SceneGraph.TransformNode.WorldTransformation">
            <summary>
            Gets or sets the transformation matrix. If you set this matrix directly, then whatever
            you set on Translation, Rotation, and Scale properties previoulsy will be ignored, and instead, this
            matrix value will be used to define the transformation of this node.
            
            However, if you set any of the Translation, Rotation, and Scale properties after setting
            this matrix, then the composed matrix value from these three properties will be used.
            </summary>
            <remarks>
            If ReadOnly is set to true, then you can't set this property.
            </remarks>
            <seealso cref="!:ReadOnly"/>
            <seealso cref="P:GoblinXNA.SceneGraph.TransformNode.Scale"/>
            <seealso cref="P:GoblinXNA.SceneGraph.TransformNode.Translation"/>
            <seealso cref="P:GoblinXNA.SceneGraph.TransformNode.Rotation"/>
            <exception cref="T:GoblinXNA.GoblinException"></exception>
        </member>
        <member name="P:GoblinXNA.SceneGraph.TransformNode.UseUserDefinedTransform">
            <summary>
            Gets or sets whether the user directly modified the transformation matrix instead using the
            composed one from Translation, Rotation, and Scale properties.
            </summary>
        </member>
        <member name="P:GoblinXNA.SceneGraph.TransformNode.UserDefinedTransformChanged">
            <summary>
            Gets or sets whether the transformation matrix set directly by the user has been
            modified from the last one.
            </summary>
        </member>
        <member name="P:GoblinXNA.SceneGraph.TransformNode.ComposedTransform">
            <summary>
            Gets the matrix composed from each individual transformation properties
            (Translation, Rotation, and Scale).
            </summary>
        </member>
        <member name="P:GoblinXNA.SceneGraph.TransformNode.IsWorldTransformationDirty">
            <summary>
            Gets or sets whether the transformation has been modified from the previous one.
            </summary>
        </member>
        <member name="P:GoblinXNA.SceneGraph.TransformNode.IsReadOnly">
            <summary>
            Gets or sets whether this transform node is read only. If true, then you can not
            set any of the Translation, Rotation, Scale, and WorldTransformation properties.
            </summary>
        </member>
        <member name="T:GoblinXNA.Shaders.IShader">
            <summary>
            An interface for a shader class. 
            </summary>
            <remarks>
            A shader class should either extend an existing IShader implementation
            or implement this class. However, function body can be empty for any of the 
            SetParameter(...) methods if your shader implementation doesn't support
            the specific property.
            </remarks>
        </member>
        <member name="M:GoblinXNA.Shaders.IShader.SetParameters(GoblinXNA.Graphics.Material)">
            <summary>
            Sets the material properties to be applied for the rendering.
            </summary>
            <param name="material">The material properties of a 3D object</param>
        </member>
        <member name="M:GoblinXNA.Shaders.IShader.SetParameters(System.Collections.Generic.List{GoblinXNA.SceneGraph.LightNode},System.Collections.Generic.List{GoblinXNA.SceneGraph.LightNode})">
            <summary>
            Sets the lighting effect to be applied for the rendering.
            </summary>
            <param name="globalLights">A list of global light nodes</param>
            <param name="localLights">A list of local light nodes</param>
        </member>
        <member name="M:GoblinXNA.Shaders.IShader.SetParameters(GoblinXNA.SceneGraph.CameraNode)">
            <summary>
            Sets the special camera effect to be applied for the rendering.
            </summary>
            <remarks>
            For example, this method can be used to implement a fish-eye camera effect
            </remarks>
            <param name="camera">The camera properties</param>
        </member>
        <member name="M:GoblinXNA.Shaders.IShader.SetParameters(GoblinXNA.Graphics.Environment)">
            <summary>
            Sets the environmental effect (e.g., fog) to be applied for the rendering.
            </summary>
            <param name="environment">The environment properties</param>
        </member>
        <member name="M:GoblinXNA.Shaders.IShader.Render(Microsoft.Xna.Framework.Matrix@,System.String,GoblinXNA.Shaders.RenderHandler)">
            <summary>
            Renders a 3D mesh provided in the renderDelegate function with the specified
            world transformation and shader technique name.
            </summary>
            <param name="worldMatrix">The world transformation of the mesh to be rendered</param>
            <param name="techniqueName">The name of the shader technique to use</param>
            <param name="renderDelegate">A delegate function which contains the mesh preparation</param>
        </member>
        <member name="M:GoblinXNA.Shaders.IShader.RenderEnd">
            <summary>
            This function is called after rendering each IModel.
            </summary>
        </member>
        <member name="M:GoblinXNA.Shaders.IShader.Dispose">
            <summary>
            Disposes this shader.
            </summary>
        </member>
        <member name="P:GoblinXNA.Shaders.IShader.MaxLights">
            <summary>
            Gets the maximum number of lights this shader can handle.
            </summary>
        </member>
        <member name="P:GoblinXNA.Shaders.IShader.CurrentEffect">
            <summary>
            Gets the current effect class used for this shader
            </summary>
        </member>
        <member name="P:GoblinXNA.Shaders.IShader.CurrentMaterial">
            <summary>
            Gets or sets the current material used for this shader
            </summary>
        </member>
        <member name="M:GoblinXNA.Shaders.AlphaTestShader.#ctor">
            <summary>
            Creates a simple shader to render 3D meshes using the BasicEffect class.
            </summary>
            <exception cref="T:GoblinXNA.GoblinException"></exception>
        </member>
        <member name="M:GoblinXNA.Shaders.AlphaTestShader.SetParameters(GoblinXNA.SceneGraph.CameraNode)">
            <summary>
            This shader does not support special camera effect.
            </summary>
            <param name="camera"></param>
        </member>
        <member name="T:GoblinXNA.Shaders.IAlphaBlendable">
            <summary>
            An interface that is used for shaders that can blend alpha values between the model's
            original alpha and alpha in the Material (Diffuse.W) when IModel.UseInternalMaterials is
            set to true.
            </summary>
        </member>
        <member name="M:GoblinXNA.Shaders.IAlphaBlendable.SetOriginalAlphas(Microsoft.Xna.Framework.Graphics.ModelEffectCollection)">
            <summary>
            Sets the original alpha values from the model's internal effect collection, so that
            these original values can be multiplied with the Material alpha values.
            </summary>
            <param name="effectCollection"></param>
        </member>
        <member name="T:GoblinXNA.Shaders.RenderHandler">
            <summary>
            A delegate function used to provide the actual rendering code.
            </summary>
        </member>
        <member name="M:GoblinXNA.Shaders.IShadowMap.SetParameters(System.Collections.Generic.List{GoblinXNA.SceneGraph.LightNode})">
            <summary>
            Sets the lighting effect to be applied for rendering shadows.
            </summary>
            <param name="globalLights">A list of global light nodes</param>
        </member>
        <member name="M:GoblinXNA.Shaders.IShadowMap.PrepareRenderTargets(System.Collections.Generic.List{GoblinXNA.SceneGraph.GeometryNode},System.Collections.Generic.List{GoblinXNA.SceneGraph.GeometryNode})">
            <summary>
            Prepares the render targets that will be used by IShader to render shadows
            </summary>
            <param name="backgroundGeometries"></param>
            <param name="occluderGeometries"></param>
        </member>
        <member name="M:GoblinXNA.Shaders.IShadowMap.ComputeShadow(Microsoft.Xna.Framework.Matrix@,GoblinXNA.Shaders.RenderHandler)">
            <summary>
            
            </summary>
            <param name="matrix"></param>
            <param name="renderHandler"></param>
        </member>
        <member name="M:GoblinXNA.Shaders.IShadowMap.Dispose">
            <summary>
            Disposes this shader.
            </summary>
        </member>
        <member name="P:GoblinXNA.Shaders.IShadowMap.MaxLights">
            <summary>
            Gets the maximum number of lights this shader can handle.
            </summary>
        </member>
        <member name="P:GoblinXNA.Shaders.IShadowMap.CurrentEffect">
            <summary>
            Gets the current effect class used for this shader
            </summary>
        </member>
        <member name="P:GoblinXNA.Shaders.IShadowMap.ShadowRenderTargets">
            <summary>
            Gets the shadow render targets
            </summary>
        </member>
        <member name="P:GoblinXNA.Shaders.IShadowMap.OccluderRenderTargets">
            <summary>
            Gets the occluder render targets
            </summary>
        </member>
        <member name="P:GoblinXNA.Shaders.IShadowShader.ShadowMap">
            <summary>
            Gets or sets the shadow map that generates render targets that are necessary for
            rendering shadows.
            </summary>
        </member>
        <member name="P:GoblinXNA.Shaders.IShadowShader.Attribute">
            <summary>
            Gets or sets the shadow attribute of the model currently being rendered.
            </summary>
        </member>
        <member name="P:GoblinXNA.Shaders.IShadowShader.IsOccluder">
            <summary>
            Gets or sets whether the model being rendered is an occluder.
            </summary>
        </member>
        <member name="P:GoblinXNA.Shaders.IShadowShader.LastLayer">
            <summary>
            Gets or sets the render target.
            </summary>
        </member>
        <member name="P:GoblinXNA.Shaders.IShadowShader.LightIndex">
            <summary>
            Gets or sets the current light index.
            </summary>
        </member>
        <member name="P:GoblinXNA.Shaders.IShadowShader.ShadowLightIndex">
            <summary>
            Gets or sets the current shadow light index.
            </summary>
        </member>
        <member name="T:GoblinXNA.Shaders.SimpleEffectShader">
            <summary>
            An implementation of a simple shader that uses the BasicEffect class.
            </summary>
            <remarks>
            Since BasicEffect class can only include upto three light sources, if more than three light
            sources are passed to this class, then the local light sources precede the global light sources.
            Both the global and local light nodes are added in the order of encounter in the preorder
            tree-traversal of the scene graph. For local lights, the last light node is the closest light node
            in the scene graph, so the light sources are added in the reverse order. If there are less than
            three local light sources, then global light sources are added in the normal order.
            </remarks>
        </member>
        <member name="M:GoblinXNA.Shaders.SimpleEffectShader.#ctor">
            <summary>
            Creates a simple shader to render 3D meshes using the BasicEffect class.
            </summary>
            <exception cref="T:GoblinXNA.GoblinException"></exception>
        </member>
        <member name="M:GoblinXNA.Shaders.SimpleEffectShader.SetParameters(GoblinXNA.SceneGraph.CameraNode)">
            <summary>
            This shader does not support special camera effect.
            </summary>
            <param name="camera"></param>
        </member>
        <member name="P:GoblinXNA.Shaders.SimpleEffectShader.PreferPerPixelLighting">
            <summary>
            Indicates whether to prefer using per-pixel lighting if applicable.
            </summary>
        </member>
        <member name="P:GoblinXNA.Shaders.SimpleEffectShader.MixMaterialDiffuseWithTexture">
            <summary>
            Indicates whether you want to multiply the diffuse color of the material with the diffuse
            color of the texture if Model.UseInternalMaterials is set to true. Default value is false.
            </summary>
        </member>
        <member name="T:GoblinXNA.Sounds.Sound">
            <summary>
            A wrapper class for the XNA audio library. This class provides an easy interface to play both
            2D and 3D sounds.
            </summary>
        </member>
        <member name="M:GoblinXNA.Sounds.Sound.GameActivated(System.Object,System.EventArgs)">
            <summary>
            Event handler that is invoked when the game is activated.
            </summary>
        </member>
        <member name="M:GoblinXNA.Sounds.Sound.PlaySoundEffect(Microsoft.Xna.Framework.Audio.SoundEffect)">
            <summary>
            Triggers a new sound.
            </summary>
            <exception cref="T:GoblinXNA.GoblinException">Throws exception if this is called before Initialize(..)</exception>
            <param name="soundEffect">The loaded sound effect</param>
            <returns></returns>
        </member>
        <member name="M:GoblinXNA.Sounds.Sound.PlaySoundEffect(System.String)">
            <summary>
            Triggers a new sound.
            </summary>
            <exception cref="T:GoblinXNA.GoblinException">Throws exception if this is called before Initialize(..)</exception>
            <param name="soundEffectName">The name of the sound effect to play</param>
            <returns></returns>
        </member>
        <member name="M:GoblinXNA.Sounds.Sound.PlaySoundEffect3D(Microsoft.Xna.Framework.Audio.SoundEffect,GoblinXNA.Sounds.IAudioEmitter)">
            <summary>
            Triggers a new 3D sound
            </summary>
            <remarks>
            In order to free up unnecessary memory usage, the played cue is automatically destroyed
            when it stops playing. 
            </remarks>
            <exception cref="T:GoblinXNA.GoblinException">Throws exception if this is called before Initialize(..)</exception>
            <param name="soundEffect">The loaded sound effect</param>
            <param name="emitter">An IAudioEmitter object that defines the properties of the sound
            including position, and velocity.</param>
            <returns></returns>
        </member>
        <member name="M:GoblinXNA.Sounds.Sound.PlaySoundEffect3D(System.String,GoblinXNA.Sounds.IAudioEmitter)">
            <summary>
            Triggers a new 3D sound
            </summary>
            <remarks>
            In order to free up unnecessary memory usage, the played cue is automatically destroyed
            when it stops playing. 
            </remarks>
            <exception cref="T:GoblinXNA.GoblinException">Throws exception if this is called before Initialize(..)</exception>
            <param name="soundEffectName">The name of the sound effect to play</param>
            <param name="emitter">An IAudioEmitter object that defines the properties of the sound
            including position, and velocity.</param>
            <returns></returns>
        </member>
        <member name="M:GoblinXNA.Sounds.Sound.Update(System.TimeSpan)">
            <summary>
            Updates the XNA audio engine
            </summary>
            <param name="elapsedTime"></param>
        </member>
        <member name="M:GoblinXNA.Sounds.Sound.UpdateListener(System.TimeSpan,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Updates the position and orientation of the listener for 3D audio effect
            </summary>
            <param name="elapsedTime"></param>
            <param name="position">The position of the listener</param>
            <param name="forward">The forward vector of the listener</param>
            <param name="up">The up vector of the lister</param>
        </member>
        <member name="M:GoblinXNA.Sounds.Sound.Apply3D(GoblinXNA.Sounds.Sound.Sound3D)">
            <summary>
            Updates the position and velocity settings of a 3D cue.
            </summary>
        </member>
        <member name="M:GoblinXNA.Sounds.Sound.PlaySongSafe">
            <summary>
            Helper method to wrap MediaPlayer.Play to handle exceptions.
            </summary>
        </member>
        <member name="M:GoblinXNA.Sounds.Sound.ResumeSongSafe">
            <summary>
            Helper method to wrap MediaPlayer.Resume to handle exceptions.
            </summary>
        </member>
        <member name="T:GoblinXNA.Sounds.Sound.Sound3D">
            <summary>
            Internal helper class for keeping track of an active 3D cue,
            and remembering which emitter object it is attached to.
            </summary>
        </member>
        <member name="T:GoblinXNA.ThreadOptions">
            <summary>
            Options for enabling threading for certain processes.
            </summary>
        </member>
        <member name="F:GoblinXNA.ThreadOptions.MarkerTracking">
            <summary>
            Thread the marker tracking process. This includes the video capturing process
            as well.
            </summary>
        </member>
        <member name="F:GoblinXNA.ThreadOptions.PhysicsSimulation">
            <summary>
            Thread the physics simulation.
            </summary>
        </member>
        <member name="T:GoblinXNA.State">
            <summary>
            The main class of the Goblin XNA framework. 
            </summary>
        </member>
        <member name="M:GoblinXNA.State.InitGoblin(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService,Microsoft.Xna.Framework.Content.ContentManager,System.String)">
            <summary>
            This is the very first method that needs to be called before using any of the Goblin 
            XNA framework.
            </summary>
            <param name="graphics">GraphicsDeviceManager object from the main Game class</param>
            <param name="content">ContentManager object from the main Game class</param>
            <param name="settingFile">
            The full path of the setting file in XML format. Setting file is used, for example, 
            to specify where the model files are stored if not directly under "Content" directory.
            You can also add your own setting variable with certain value, and retrieve the value
            using GetSettingVariable method.
            
            Can be an empty string, in which case, a template setting file (template_setting.xml) 
            that contains all of the setting variables used in Goblin XNA will be generated. 
            If you don't specify the setting file, then all of the resource files (e.g., models, 
            textures, spritefonts, etc) should be directly stored under the "Content" directory,
            so Goblin XNA can figure out where to load those resources. 
            </param>
            <see cref="M:GoblinXNA.State.GetSettingVariable(System.String)"/>
            <exception cref="T:GoblinXNA.GoblinException"></exception>
        </member>
        <member name="M:GoblinXNA.State.GetSettingVariable(System.String)">
            <summary>
            Gets the setting variables loaded at the initialization time.
            </summary>
            <param name="name">The name of the setting variable</param>
            <returns></returns>
        </member>
        <member name="M:GoblinXNA.State.LoadSettings(System.String)">
            <summary>
            Loads all of the added setting variables.
            </summary>
            <param name="filename">the filename where the setting variables are stored</param>
        </member>
        <member name="M:GoblinXNA.State.WriteSettingTemplate">
            <summary>
            Writes out a template setting file that contains all of the setting variables
            used in Goblin XNA.
            </summary>
        </member>
        <member name="M:GoblinXNA.State.GetNextNodeID">
            <summary>
            A helper function to get the next unique node ID.
            </summary>
            <returns></returns>
        </member>
        <member name="P:GoblinXNA.State.Width">
            <summary>
            Gets the width dimension of the current screen in pixels
            </summary>
        </member>
        <member name="P:GoblinXNA.State.Height">
            <summary>
            Gets the height dimension of the current screen in pixels
            </summary>
        </member>
        <member name="P:GoblinXNA.State.Initialized">
            <summary>
            Gets whether Goblin framework has been initialized through the InitGoblin method call
            </summary>
        </member>
        <member name="P:GoblinXNA.State.BlankTexture">
            <summary>
            Gets a blank texture
            </summary>
        </member>
        <member name="P:GoblinXNA.State.AlphaBlendingEnabled">
            <summary>
            Gets or sets whether to enable alpha-blended transparency
            </summary>
        </member>
        <member name="P:GoblinXNA.State.ThreadOption">
            <summary>
            Gets or sets the threading options by oring the ThreadOptions enum. This property is
            used to control what operations to be threaded. If your CPU is single-core, then there is
            no point to thread any operations.
            </summary>
        </member>
        <member name="P:GoblinXNA.State.BoundingBoxColor">
            <summary>
            Gets or sets the color used to draw the bounding box of each model for debugging.
            </summary>
        </member>
        <member name="P:GoblinXNA.State.EnableNetworking">
            <summary>
            Gets or sets whether to enable networking. The default value is false.
            </summary>
        </member>
        <member name="P:GoblinXNA.State.IsServer">
            <summary>
            Gets or sets whether this machine acts as a server when networking is enabled
            </summary>
        </member>
        <member name="P:GoblinXNA.State.NumberOfClientsToWait">
            <summary>
            Number of clients to wait for connections before starting physics simulation.
            The default value is 0.
            </summary>
        </member>
        <member name="P:GoblinXNA.State.LogPrintLevel">
            <summary>
            Gets or sets the log levels that will be printed out. Default value is LogLevel.Error.
            </summary>
            <example>
            LogLevel.Log means prints out all log levels including Warning and Error messages.
            LogLevel.Warning means prints out only Warning and Error messages.
            LogLevel.Error means prints out only Error messages.
            </example>
        </member>
        <member name="P:GoblinXNA.State.ShowFPS">
            <summary>
            Gets or sets whether to display the Frames-Per-Secound count on the screen.
            </summary>
            <remarks>
            The color of the text can be changed by modifying DebutTextColor property. 
            </remarks>
            <see cref="P:GoblinXNA.State.DebugTextColor"/>
        </member>
        <member name="P:GoblinXNA.State.ShowNotifications">
            <summary>
            Gets or sets whether to display any notification messages on the screen.
            </summary>
        </member>
        <member name="P:GoblinXNA.State.ShowTriangleCount">
            <summary>
            Gets or sets whether to display the triangle count of all of the rendered 
            models in the scene.
            </summary>
            <remarks>
            The color of the text can be changed by modifying DebutTextColor property. 
            </remarks>
            <see cref="P:GoblinXNA.State.DebugTextColor"/>
        </member>
        <member name="P:GoblinXNA.State.DebugTextColor">
            <summary>
            Gets or sets the color of the FPS or triangle count text. The default color 
            is Color.White.
            </summary>
        </member>
        <member name="T:GoblinXNA.UI.FocusGained">
            <summary>
            Invoked when the component is focused
            </summary>
            <param name="source"></param>
        </member>
        <member name="T:GoblinXNA.UI.FocusLost">
            <summary>
            Invoked when the component loses focus
            </summary>
            <param name="source"></param>
        </member>
        <member name="T:GoblinXNA.UI.ComponentAdded">
            <summary>
            Invoked when a component is added to the container
            </summary>
            <param name="source"></param>
            <param name="component"></param>
        </member>
        <member name="T:GoblinXNA.UI.ComponentRemoved">
            <summary>
            Invoked when a component is removed from the container
            </summary>
            <param name="source"></param>
            <param name="component"></param>
        </member>
        <member name="T:GoblinXNA.UI.ActionPerformed">
            <summary>
            Invoked when a certain action is performed
            </summary>
            <param name="source"></param>
        </member>
        <member name="T:GoblinXNA.UI.StateChanged">
            <summary>
            Invoked when the target of the listener has changed its state
            </summary>
            <param name="source"></param>
        </member>
        <member name="T:GoblinXNA.UI.ItemStateChanged">
            <summary>
            Invoked when an item has been selected or deselected by the user
            </summary>
            <param name="source"></param>
            <param name="item"></param>
            <param name="selected"></param>
        </member>
        <member name="T:GoblinXNA.UI.CaretUpdate">
            <summary>
            Invoked when caret position is updated
            </summary>
            <param name="source"></param>
            <param name="caretPosition"></param>
        </member>
        <member name="T:GoblinXNA.UI.KeyPressed">
            <summary>
            Invoked when key is pressed
            </summary>
        </member>
        <member name="T:GoblinXNA.UI.KeyReleased">
            <summary>
            Invoked when key is released
            </summary>
        </member>
        <member name="T:GoblinXNA.UI.KeyTyped">
            <summary>
            Invoked when key is typed
            </summary>
        </member>
        <member name="T:GoblinXNA.UI.ContentsChanged">
            <summary>
            Invoked when the contents of the list has changed.
            </summary>
        </member>
        <member name="T:GoblinXNA.UI.IntervalAdded">
            <summary>
            Invoked when one or more elements are inserted in the indices from index0 to index1 in the data model.
            </summary>
        </member>
        <member name="T:GoblinXNA.UI.IntervalRemoved">
            <summary>
            Invoked when one or more elements are removed from the indices between index0 and index1 in the data model.
            </summary>
        </member>
        <member name="T:GoblinXNA.UI.ValueChanged">
            <summary>
            Invoked when the value of the selection changes.
            </summary>
        </member>
        <member name="T:GoblinXNA.UI.MouseClicked">
            <summary>
            Invoked when mouse is clicked within the bounds.
            </summary>
        </member>
        <member name="T:GoblinXNA.UI.MouseEntered">
            <summary>
            Invoked when mouse enters in the bounds.
            </summary>
        </member>
        <member name="T:GoblinXNA.UI.MouseExited">
            <summary>
            Invoked when mouse exits from the bounds.
            </summary>
        </member>
        <member name="T:GoblinXNA.UI.MousePressed">
            <summary>
            Invoked when mouse is pressed within the bounds.
            </summary>
        </member>
        <member name="T:GoblinXNA.UI.MouseReleased">
            <summary>
            Invoked when mouse is released within the bounds.
            </summary>
        </member>
        <member name="T:GoblinXNA.UI.MouseDragged">
            <summary>
            Invoked when mouse is moved within the bounds.
            </summary>
            <param name="button">The button held down</param>
            <param name="startLocation">The start mouse location of the dragging</param>
            <param name="currentLocation">The current mouse location of the dragging</param>
        </member>
        <member name="T:GoblinXNA.UI.MouseMoved">
            <summary>
            Invoked when mouse is dragged within the bounds.
            </summary>
            <param name="mouseLocation">The location of the mouse in screen coordinate</param>
        </member>
        <member name="T:GoblinXNA.UI.MouseWheelMoved">
            <summary>
            Invoked when mouse wheel is moved if mouse wheel is available
            </summary>
            <param name="delta">The amount moved from previous mouse wheel</param>
            <param name="value">The current mouse wheel value</param>
        </member>
        <member name="T:GoblinXNA.UI.Component">
            <summary>
            An abstract UI component. This class cannot be instantiated.
            </summary>
        </member>
        <member name="F:GoblinXNA.UI.Component.DEFAULT_COLOR">
            <summary>
            Default color of the background
            </summary>
        </member>
        <member name="F:GoblinXNA.UI.Component.DEFAULT_ALPHA">
            <summary>
            Default transparency value for any colors associated with this component
            </summary>
        </member>
        <member name="F:GoblinXNA.UI.Component.parent">
            <summary>
            Parent component of this component for scene-graph-based drawing
            </summary>
        </member>
        <member name="F:GoblinXNA.UI.Component.backgroundColor">
            <summary>
            Background color of this component if enabled
            </summary>
        </member>
        <member name="F:GoblinXNA.UI.Component.disabledColor">
            <summary>
            Background color of this component if not enabled
            </summary>
        </member>
        <member name="F:GoblinXNA.UI.Component.borderColor">
            <summary>
            Border color of this component's background
            </summary>
        </member>
        <member name="F:GoblinXNA.UI.Component.drawBorder">
            <summary>
            Indicator of whether to paint the border
            </summary>
        </member>
        <member name="F:GoblinXNA.UI.Component.borderWidth">
            <summary>
            The width of the border
            </summary>
        </member>
        <member name="F:GoblinXNA.UI.Component.drawBackground">
            <summary>
            Indicator of whether to paint the background
            </summary>
        </member>
        <member name="F:GoblinXNA.UI.Component.alpha">
            <summary>
            Transparency value in the range [0 -- 255]
            </summary>
        </member>
        <member name="F:GoblinXNA.UI.Component.visible">
            <summary>
            Indicator of whether this component is visible
            </summary>
        </member>
        <member name="F:GoblinXNA.UI.Component.enabled">
            <summary>
            Indicator of whether this component is enabled
            </summary>
        </member>
        <member name="F:GoblinXNA.UI.Component.focused">
            <summary>
            Indicator of whether this component is focused . 
            NOTE: This variable is useful only for indicating that the component
            should receive key input
            </summary>
        </member>
        <member name="F:GoblinXNA.UI.Component.name">
            <summary>
            Name of this component. 
            NOTE: Mostly used only for debugging (See ToString() method)
            </summary>
        </member>
        <member name="F:GoblinXNA.UI.Component.label">
            <summary>
            Label/Text associated with this component
            </summary>
        </member>
        <member name="F:GoblinXNA.UI.Component.textureColor">
            <summary>
            Color of the texture (it's always Color.White, but it contains alpha info as well)
            </summary>
        </member>
        <member name="F:GoblinXNA.UI.Component.horizontalAlignment">
            <summary>
            Indicator of how label/text should be aligned horizontally
            </summary>
        </member>
        <member name="F:GoblinXNA.UI.Component.verticalAlignment">
            <summary>
            Indicator of how label/text should be aligned vertically
            </summary>
        </member>
        <member name="F:GoblinXNA.UI.Component.textColor">
            <summary>
            Label/Text color
            </summary>
        </member>
        <member name="F:GoblinXNA.UI.Component.textAlpha">
            <summary>
            Transparency value of the label/text
            </summary>
        </member>
        <member name="F:GoblinXNA.UI.Component.keyDown">
            <summary>
            Indicator of whether a key is held down
            </summary>
        </member>
        <member name="F:GoblinXNA.UI.Component.mouseDown">
            <summary>
            Indicator of whether any mouse button is held down. 
            NOTE: Mainly used for detecting mouse dragging event
            </summary>
        </member>
        <member name="F:GoblinXNA.UI.Component.within">
            <summary>
            Indicator of whether the mouse pointer is hovering on this component
            </summary>
        </member>
        <member name="F:GoblinXNA.UI.Component.entered">
            <summary>
            Indicator of whether the mouse has entered the bound of this component. 
            NOTE: Mainly used for detecting mouse enter and exit event
            </summary>
        </member>
        <member name="F:GoblinXNA.UI.Component.backTexture">
            <summary>
            An XNA class used for loading a texture for the background image
            </summary>
        </member>
        <member name="M:GoblinXNA.UI.Component.#ctor(Microsoft.Xna.Framework.Color,System.Single)">
            <summary>
            Creates a UI component with the specified background color and transparency value.
            </summary>
            <param name="bgColor">Background color of this component</param>
            <param name="alpha">Transparency value of this component [0.0f - 1.0f]. 1.0f meaning
            totally opaque, and 0.0f meaning totally transparent</param>
        </member>
        <member name="M:GoblinXNA.UI.Component.#ctor(Microsoft.Xna.Framework.Color)">
            <summary>
            Creates a UI component with the specified background color and transparency of 1.0f.
            </summary>
            <param name="bgColor">Background color of this component</param>
        </member>
        <member name="M:GoblinXNA.UI.Component.#ctor">
            <summary>
            Creates a UI component with a light gray background color and transparency of 1.0f.
            </summary>
        </member>
        <member name="M:GoblinXNA.UI.Component.InvokeFocusGainedEvent(System.Object)">
            <summary>
            Invokes focus gained event.
            </summary>
            <param name="source">The class that invoked this event.</param>
        </member>
        <member name="M:GoblinXNA.UI.Component.InvokeFocusLostEvent(System.Object)">
            <summary>
            Invokes focus lost event.
            </summary>
            <param name="source">The class that invoked this event.</param>
        </member>
        <member name="E:GoblinXNA.UI.Component.FocusGainedEvent">
            <summary>
            An event triggered whenever a focus is gained on this component.
            </summary>
        </member>
        <member name="E:GoblinXNA.UI.Component.FocusLostEvent">
            <summary>
            An event triggered whenever a focus is lost on this component.
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.Component.BackgroundColor">
            <summary>
            Gets or sets the background color of this component.
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.Component.BorderColor">
            <summary>
            Gets or sets the border color of the background of this component.
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.Component.DisabledColor">
            <summary>
            Gets or sets the background color of this component when disabled.
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.Component.Transparency">
            <summary>
            Gets or sets the transparency value of this component.
            </summary>
            <remarks>
            A transparency value in the range [0.0f -- 1.0f]. 1.0f meaning
            totally opaque, and 0.0f meaning totally transparent
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws ArgumentException if alpha value is outside of the range [0.0f -- 1.0f]
            </exception>
        </member>
        <member name="P:GoblinXNA.UI.Component.Visible">
            <summary>
            Gets or sets whether this component is visible.
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.Component.Enabled">
            <summary>
            Gets or sets whether this component is enabled.
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.Component.Focused">
            <summary>
            Gets whether this component is focused. 
            </summary>
            <remarks>
            Focused variable is mainly used for determining that the component
            should receive key input, since key input should be received by only one
            component at a time
            </remarks>
        </member>
        <member name="P:GoblinXNA.UI.Component.Texture">
            <summary>
            Get or sets the background image with the given image texture.
            </summary>
            <remarks>
            This will automatically disable the border drawing, and enable the background drawing.
            </remarks>
        </member>
        <member name="P:GoblinXNA.UI.Component.TextureColor">
            <summary>
            Gets or sets the color of the background texture if set. The default color is Color.White.
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.Component.DrawBorder">
            <summary>
            Gets or sets whether the border should be painted.
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.Component.BorderWidth">
            <summary>
            Gets or sets the border width.
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.Component.DrawBackground">
            <summary>
            Gets or sets whether the background should be painted.
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.Component.Parent">
            <summary>
            Gets or sets the parent of this component.
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.Component.RootParent">
            <summary>
            Gets the root ancestor of this component.
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.Component.HasParent">
            <summary>
            Gets whether this component has a parent.
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.Component.Name">
            <summary>
            Gets or sets the name of this component. 
            </summary>
            <remarks>
            Name information is mainly used for debugging purpose only.
            </remarks>
        </member>
        <member name="P:GoblinXNA.UI.Component.Text">
            <summary>
            Gets or sets the label/text associated with this component.
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.Component.TextColor">
            <summary>
            Gets or sets the color of the label/text.
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.Component.TextTransparency">
            <summary>
            Gets or sets the transparency of the label/text.
            </summary>
            <remarks>
            A transparency value in the range [0.0f -- 1.0f]
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws ArgumentException if alpha value is outside of the range [0.0f -- 1.0f].
            </exception>
        </member>
        <member name="P:GoblinXNA.UI.Component.HorizontalAlignment">
            <summary>
            Gets or sets how label/text should be aligned horizontally.
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.Component.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment of the label/text.
            </summary>
        </member>
        <member name="T:GoblinXNA.UI.IGUIMapper">
            <summary>
            A GUI mapper class that maps UI texture and events from an external GUI library 
            (e.g., Windows Forms or Java Swing)
            </summary>
        </member>
        <member name="M:GoblinXNA.UI.IGUIMapper.KeyEventHandler(Microsoft.Xna.Framework.Input.Keys,GoblinXNA.Device.Generic.KeyModifier)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="state"></param>
        </member>
        <member name="M:GoblinXNA.UI.IGUIMapper.MouseEventHandler(Microsoft.Xna.Framework.Point,System.Int32)">
            <summary>
            
            </summary>
            <param name="mouseLocation"></param>
            <param name="button"></param>
        </member>
        <member name="P:GoblinXNA.UI.IGUIMapper.GUITexture">
            <summary>
            Gets an array of uint data of this 2D GUI
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.IGUIMapper.GUIWidth">
            <summary>
            Gets the width of this GUI in pixels
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.IGUIMapper.GUIHeight">
            <summary>
            Gets the height of this GUI in pixels
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.IGUIMapper.TextureFormat">
            <summary>
            Gets the texture format of this GUI
            </summary>
            <remarks>The texture format has to match whatever the texture data GUITexture
            method returns</remarks>
            <seealso cref="P:GoblinXNA.UI.IGUIMapper.GUITexture"/>
        </member>
        <member name="P:GoblinXNA.UI.IGUIMapper.DrawingScaleFactor">
            <summary>
            Gets the drawing scale factor (e.g., if you want it to be draw 2 times smaller than the
            original GUI texture, pass new Vector2(0.5f, 0.5f))
            </summary>
            <returns></returns>
        </member>
        <member name="T:GoblinXNA.UI.Notifier">
            <summary>
            A helper class for displaying graphical debugging/notification messages on the HUD.
            </summary>
            <remarks>
            By default, all of the appended messages are displayed on the HUD forever. If you want
            to make them disappear after a specified period of time, set FadeOutTime to force the messages
            to fade out after the specified time.
            </remarks>
        </member>
        <member name="M:GoblinXNA.UI.Notifier.#cctor">
            <summary>
            A static constructor to initialize all of the necessary member fields.
            </summary>
            <remarks>
            You don't need to call this constructor. This constructor is called automatically when
            you access any of its properties or functions.
            </remarks>
        </member>
        <member name="M:GoblinXNA.UI.Notifier.AddMessage(System.String)">
            <summary>
            Appends a new debugging/notification message.
            </summary>
            <param name="msg">A debugging/notification message to be appended</param>
        </member>
        <member name="M:GoblinXNA.UI.Notifier.GetMessages">
            <summary>
            Gets all of the newly appended messages from the last time calling this method.
            All of the newly appended messages are cleared when this method is called.
            </summary>
            <returns></returns>
        </member>
        <member name="P:GoblinXNA.UI.Notifier.Placement">
            <summary>
            Gets or sets the display location of the debugging/notification messages.
            </summary>
            <remarks>
            The default value is NotifierPlacement.TopRight. If defined as Custom, then you need to
            set the CustomStartLocation and CustomAppearDirection properties.
            </remarks>
            <see cref="P:GoblinXNA.UI.Notifier.CustomStartLocation"/>
            <seealso cref="P:GoblinXNA.UI.Notifier.CustomAppearDirection"/>
        </member>
        <member name="P:GoblinXNA.UI.Notifier.CustomStartLocation">
            <summary>
            Gets or sets the custom starting location of the notifier messages to appear when Placement 
            property is set to Custom.
            </summary>
            <see cref="P:GoblinXNA.UI.Notifier.Placement"/>
        </member>
        <member name="P:GoblinXNA.UI.Notifier.CustomAppearDirection">
            <summary>
            Gets or sets the direction in which the text appears when Placement property is set
            to Custom.
            </summary>
            <see cref="P:GoblinXNA.UI.Notifier.Placement"/>
        </member>
        <member name="P:GoblinXNA.UI.Notifier.FadeOutTime">
            <summary>
            Gets or sets how long each message will be displayed on the HUD before they
            start to fade out specified in milliseconds. The newly set values affects
            only the newly added messages.
            </summary>
            <remarks>
            The default value is -1, which means the messages never fade out.
            </remarks>
        </member>
        <member name="P:GoblinXNA.UI.Notifier.Font">
            <summary>
            Gets or sets the sprite font to use to display the messages.
            </summary>
            <remarks>
            The default sprint font is same as the one used for FPS and triangle count.
            </remarks>
        </member>
        <member name="P:GoblinXNA.UI.Notifier.Color">
            <summary>
            Gets or sets the color of the debugging/notification messages.
            </summary>
            <remarks>
            The default color is Color.Red
            </remarks>
        </member>
        <member name="P:GoblinXNA.UI.Notifier.MessageCount">
            <summary>
            Gets the number of currently displayed messages.
            </summary>
        </member>
        <member name="T:GoblinXNA.UI.Notifier.NotifierPlacement">
            <summary>
            An enum for display location of the debugging/notification messages.
            </summary>
        </member>
        <member name="T:GoblinXNA.UI.Notifier.NotifierMessage">
            <summary>
            A helper class to hold the notifier info and states
            </summary>
        </member>
        <member name="T:GoblinXNA.UI.UI2D.AbstractButton">
            <summary>
            An abstract class that defines a button. 
            </summary>
            <remarks>
            Any GoblinXNA 2D GUI button components should extend this class.
            </remarks>
        </member>
        <member name="T:GoblinXNA.UI.UI2D.G2DComponent">
            <summary>
            The top-level class for any Goblin XNA 2D GUI.
            </summary>
            <remarks>
            Any GoblinXNA 2D GUI class should extend this class.
            </remarks>
        </member>
        <member name="F:GoblinXNA.UI.UI2D.G2DComponent.bounds">
            <summary>
            Original background bounds of this component
            </summary>
        </member>
        <member name="F:GoblinXNA.UI.UI2D.G2DComponent.paintBounds">
            <summary>
            Drawing background bounds of this component. 
            NOTE: This is different from 'bounds' in case this component has a parent
            </summary>
        </member>
        <member name="F:GoblinXNA.UI.UI2D.G2DComponent.keyInputRegistered">
            <summary>
            Indicator of whether a key input control is already associated with 
            this component
            </summary>
        </member>
        <member name="F:GoblinXNA.UI.UI2D.G2DComponent.mouseInputRegistered">
            <summary>
            Indicator of whether a mouse input control is already associated with 
            this component
            </summary>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.G2DComponent.#ctor(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Color,System.Single)">
            <summary>
            Creates a 2D GUI component with the specified rectangular bounds, background color,
            and transparency value.
            </summary>
            <param name="bounds">Rectangular background bounds of this component</param>
            <param name="bgColor">Background color of this component</param>
            <param name="alpha">Transparency value of this component [0.0f - 1.0f]. 1.0f
            meaning totally opague, and 0.0f meaning totally transparent</param>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.G2DComponent.#ctor(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Color)">
            <summary>
            Creates a 2D GUI component with the specified rectangular bounds and background color, and
            transparency of 1.0f.
            </summary>
            <param name="bounds">Rectangular background bounds of this component</param>
            <param name="bgColor">Background color of this component</param>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.G2DComponent.#ctor(Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Creates a 2D GUI component with the specified rectangular bounds, light gray background
            color, and transparency of 1.0f.
            </summary>
            <param name="bounds">Rectangular background bounds of this component</param>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.G2DComponent.#ctor">
            <summary>
            Creates a 2D GUI component with 1x1 bounds at position (0, 0), light gray background
            color, and transparency of 1.0f.
            </summary>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.G2DComponent.PaintComponent">
            <summary>
            Implements how the component should be painted. 
            </summary>
            <remarks>
            This base class method paints only the background
            </remarks>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.G2DComponent.PaintBorder">
            <summary>
            Implements how the border of the component should be painted. 
            </summary>
            <remarks>
            This base class method paints only the outer-most border
            </remarks>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.G2DComponent.RenderWidget">
            <summary>
            Implements how this component should be rendered
            </summary>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.G2DComponent.HandleKeyType(Microsoft.Xna.Framework.Input.Keys,GoblinXNA.Device.Generic.KeyModifier)">
            <summary>
            Implements how a key typed event should be handled. 
            </summary>
            <param name="key">The key typed</param>
            <param name="modifier">A struct that indicates whether any of the modifier keys 
            (e.g., Shift, Alt, or Ctrl) are pressed</param>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.G2DComponent.HandleKeyPress(Microsoft.Xna.Framework.Input.Keys,GoblinXNA.Device.Generic.KeyModifier)">
            <summary>
            Implements how a key press event should be handled. 
            </summary>
            <param name="key">The key pressed</param>
            <param name="modifier">A struct that indicates whether any of the modifier keys 
            (e.g., Shift, Alt, or Ctrl) are pressed</param>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.G2DComponent.HandleKeyRelease(Microsoft.Xna.Framework.Input.Keys,GoblinXNA.Device.Generic.KeyModifier)">
            <summary>
            Implements how a key release event should be handled. 
            </summary>
            <param name="key">The key released</param>
            <param name="modifier">A struct that indicates whether any of the modifier keys 
            (e.g., Shift, Alt, or Ctrl) are pressed</param>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.G2DComponent.RegisterMouseInput">
            <summary>
            Registers mouse input events from an existing Control. 
            NOTE: Does not allow registering mouse inputs from more than 2 sources
            </summary>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.G2DComponent.RemoveMouseInput">
            <summary>
            Removes the existing mouse input
            </summary>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.G2DComponent.HandleMouseClick(System.Int32,Microsoft.Xna.Framework.Point)">
            <summary>
            Implements how a mouse click event should be handled 
            </summary>
            <param name="button">MouseInput.LeftButton, MouseInput.MiddleButton, 
            or MouseInput.RightButton</param>
            <param name="mouseLocation">The location in screen coordinates where 
            the mouse is clicked</param>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.G2DComponent.HandleMousePress(System.Int32,Microsoft.Xna.Framework.Point)">
            <summary>
            Implements how a mouse press event should be handled. 
            </summary>
            <param name="button">MouseInput.LeftButton, MouseInput.MiddleButton, 
            or MouseInput.RightButton</param>
            <param name="mouseLocation">The location in screen coordinates where 
            the mouse is pressed</param>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.G2DComponent.HandleMouseRelease(System.Int32,Microsoft.Xna.Framework.Point)">
            <summary>
            Implements how a mouse release event should be handled. 
            </summary>
            <param name="button">MouseInput.LeftButton, MouseInput.MiddleButton, 
            or MouseInput.RightButton</param>
            <param name="mouseLocation">The location in screen coordinates where 
            the mouse is released</param>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.G2DComponent.HandleMouseDrag(System.Int32,Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)">
            <summary>
            Implements how a mouse drag event should be handled.
            </summary>
            <param name="button">MouseInput.LeftButton, MouseInput.MiddleButton, 
            or MouseInput.RightButton</param>
            <param name="startLocation">The start location of the mouse drag in 
            screen coordinates</param>
            <param name="currentLocation">The current location of the mouse drag 
            in screen coordinates</param>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.G2DComponent.HandleMouseMove(Microsoft.Xna.Framework.Point)">
            <summary>
            Implements how a mouse move event should be handled.
            </summary>
            <param name="mouseLocation">The current location of the mouse in 
            screen coordinates</param>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.G2DComponent.HandleMouseWheel(System.Int32,System.Int32)">
            <summary>
            Implements how a mouse drag event should be handled. 
            </summary>
            <param name="delta">The difference of current mouse scroll wheel value from previous
            mouse scroll wheel value</param>
            <param name="value">The cumulative mouse scroll wheel value since the game/application
            was started</param>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.G2DComponent.TestWithin(Microsoft.Xna.Framework.Point)">
            <summary>
            Tests whether the mouse is within the bounds.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.G2DComponent.InvokeKeyPressedEvent(Microsoft.Xna.Framework.Input.Keys,GoblinXNA.Device.Generic.KeyModifier)">
            <summary>
            Invokes the key press event.
            </summary>
            <param name="key">The key pressed.</param>
            <param name="modifier"></param>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.G2DComponent.InvokeKeyReleasedEvent(Microsoft.Xna.Framework.Input.Keys,GoblinXNA.Device.Generic.KeyModifier)">
            <summary>
            Invokes the key release event.
            </summary>
            <param name="key">The key released.</param>
            <param name="modifier"></param>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.G2DComponent.InvokeKeyTypedEvent(Microsoft.Xna.Framework.Input.Keys,GoblinXNA.Device.Generic.KeyModifier)">
            <summary>
            Invokes the key type event.
            </summary>
            <param name="key">The key typed.</param>
            <param name="modifier"></param>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.G2DComponent.InvokeMouseClickedEvent(System.Int32,Microsoft.Xna.Framework.Point)">
            <summary>
            Invokes the mouse click event.
            </summary>
            <param name="button">The button clicked.</param>
            <param name="mouseLocation">The location where mouse is clicked in screen coordinate.</param>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.G2DComponent.InvokeMousePressedEvent(System.Int32,Microsoft.Xna.Framework.Point)">
            <summary>
            Invokes the mouse press event.
            </summary>
            <param name="button">The button pressed.</param>
            <param name="mouseLocation">The location where mouse is pressed in screen coordinate.</param>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.G2DComponent.InvokeMouseReleasedEvent(System.Int32,Microsoft.Xna.Framework.Point)">
            <summary>
            Invokes the mouse release event.
            </summary>
            <param name="button">The button released.</param>
            <param name="mouseLocation">The location where mouse is released in screen coordinate.</param>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.G2DComponent.InvokeMouseEnteredEvent">
            <summary>
            Invokes the mouse enter event.
            </summary>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.G2DComponent.InvokeMouseExitedEvent">
            <summary>
            Invokes the mouse exit event.
            </summary>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.G2DComponent.InvokeMouseMoved(Microsoft.Xna.Framework.Point)">
            <summary>
            Invokes the mouse moved event.
            </summary>
            <param name="curPosition">The current position of the mouse in screen coordinate.</param>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.G2DComponent.InvokeMouseDragged(System.Int32,Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)">
            <summary>
            Invokes the mouse dragged event.
            </summary>
            <param name="button">The button dragged.</param>
            <param name="startPosition">The starting dragging position in screen coordinate.</param>
            <param name="curPosition">The current position of the mouse in screen coordinate.</param>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.G2DComponent.InvokeMouseWheelMovedEvent(System.Int32,System.Int32)">
            <summary>
            Invokes the mouse wheel moved event.
            </summary>
            <param name="delta">The diff value from the previous middle button wheel position.</param>
            <param name="value">The current value of the middle button wheel position.</param>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.G2DComponent.ToString">
            <summary>
            Gets the name of this component
            </summary>
            <returns>Name of this component</returns>
        </member>
        <member name="E:GoblinXNA.UI.UI2D.G2DComponent.KeyPressedEvent">
            <summary>
            An event triggered whenever a key is pressed when this component is focused.
            </summary>
        </member>
        <member name="E:GoblinXNA.UI.UI2D.G2DComponent.KeyReleasedEvent">
            <summary>
            An event triggered whenever a key is released when this component is focused.
            </summary>
        </member>
        <member name="E:GoblinXNA.UI.UI2D.G2DComponent.KeyTypedEvent">
            <summary>
            An event triggered whenever a key is typed when this component is focused.
            </summary>
        </member>
        <member name="E:GoblinXNA.UI.UI2D.G2DComponent.MouseClickedEvent">
            <summary>
            An event triggered whenever a mouse is clicked within the bound of this component.
            </summary>
        </member>
        <member name="E:GoblinXNA.UI.UI2D.G2DComponent.MousePressedEvent">
            <summary>
            An event triggered whenever a mouse is pressed within the bound of this component.
            </summary>
        </member>
        <member name="E:GoblinXNA.UI.UI2D.G2DComponent.MouseReleasedEvent">
            <summary>
            An event triggered whenever a mouse is released within the bound of this component.
            </summary>
        </member>
        <member name="E:GoblinXNA.UI.UI2D.G2DComponent.MouseEnteredEvent">
            <summary>
            An event triggered whenever a mouse enters the bound of this component.
            </summary>
        </member>
        <member name="E:GoblinXNA.UI.UI2D.G2DComponent.MouseExitedEvent">
            <summary>
            An event triggered whenever a mouse exits from the bound of this component.
            </summary>
        </member>
        <member name="E:GoblinXNA.UI.UI2D.G2DComponent.MouseMovedEvent">
            <summary>
            An event triggered whenever a mouse is moved within the bound of this component.
            </summary>
        </member>
        <member name="E:GoblinXNA.UI.UI2D.G2DComponent.MouseDraggedEvent">
            <summary>
            An event triggered whenever a mouse is dragged within the bound of this component.
            </summary>
        </member>
        <member name="E:GoblinXNA.UI.UI2D.G2DComponent.MouseWheelMovedEvent">
            <summary>
            An event triggered whenever the middle mouse button is rotated when the mouse location is
            within the bound of this component.
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.G2DComponent.TextFont">
            <summary>
            Gets or sets the sprite font used to display any text associated with this component.
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.G2DComponent.KeyInputRegistered">
            <summary>
            Indicates whether a key input is already associated with this component
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.G2DComponent.MouseInputRegistered">
            <summary>
            Indicates whether a mouse input is already associated with this component
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.G2DComponent.Bounds">
            <summary>
            Gets or sets the background bounds of this component.
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.G2DComponent.PaintBounds">
            <summary>
            Gets the actual painting bound. This is different from Bounds if this component has a parent.
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.G2DComponent.Parent">
            <summary>
            Gets or sets the parent of this component
            </summary>
            <exception cref="T:GoblinXNA.GoblinException">
            Throws GoblinException if non-G2DComponent is assigned
            </exception>
        </member>
        <!-- Badly formed XML comment ignored for member "F:GoblinXNA.UI.UI2D.AbstractButton.highlightColor" -->
        <member name="M:GoblinXNA.UI.UI2D.AbstractButton.#ctor(System.String)">
            <summary>
            Creates an abstract button with the specified label.
            </summary>
            <param name="label"></param>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.AbstractButton.#ctor">
            <summary>
            Creates an abstract button with no text.
            </summary>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.AbstractButton.DoClick">
            <summary>
            Programmatically click the button
            </summary>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.AbstractButton.InvokeActionPerformedEvent(System.Object)">
            <summary>
            Invokes the action performed event.
            </summary>
            <param name="source">The class that invoked this method.</param>
        </member>
        <member name="E:GoblinXNA.UI.UI2D.AbstractButton.ActionPerformedEvent">
            <summary>
            An event triggered whenever the button is activated.
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.AbstractButton.HighlightColor">
            <summary>
            Gets or sets the color used for highlighting the inner border when the mouse is over it.
            </summary>
        </member>
        <member name="T:GoblinXNA.UI.UI2D.ButtonGroup">
            <summary>
            This class is used to create a multiple-exclusion scope for a set of buttons. Creating a
            set of buttons with the same ButtonGroup object means that turning "on" one of those buttons
            turns "off" all other buttons in the group. Typically, a button group contains G2DRadioButton.
            
            Initially, all buttons in the group are unselected. Once any button is selected, one button is
            always selected in the group.
            </summary>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.ButtonGroup.#ctor">
            <summary>
            Creates a button group.
            </summary>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.ButtonGroup.Add(GoblinXNA.UI.UI2D.ToggleButton)">
            <summary>
            Adds a two-state button to this group.
            </summary>
            <param name="button">The button to be added</param>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.ButtonGroup.Remove(GoblinXNA.UI.UI2D.ToggleButton)">
            <summary>
            Removes a two-state button from this group.
            </summary>
            <param name="button">The button to be removed</param>
            <returns></returns>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.ButtonGroup.Clear">
            <summary>
            Reset all of the toggle buttons to be 'deselected' state.
            </summary>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.ButtonGroup.AddActionPerformedHandler(GoblinXNA.UI.ActionPerformed)">
            <summary>
            Adds a ActionPerformed callback function to all of the group buttons.
            </summary>
            <param name="callback"></param>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.ButtonGroup.Buttons">
            <summary>
            Gets a list of buttons in this group.
            </summary>
        </member>
        <member name="T:GoblinXNA.UI.UI2D.DefaultListCellRenderer">
            <summary>
            A default implementation of ListCellRenderer interface. This default implementation uses G2DLabel component
            to render the cell.
            </summary>
        </member>
        <member name="T:GoblinXNA.UI.UI2D.G2DLabel">
            <summary>
            A display area for a text string. A label does not react to input events such as 
            keyboard or mouse events. You can specify the location of the label with respect to the display
            area by setting the horizontal and vertical alignment.
            
            In order to display the text, G2DLabel.TextFont must be set. Otherwise, the text will not show up.
            </summary>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.G2DLabel.#ctor(System.String)">
            <summary>
            Creates a display area for a short text string with the specified text. 
            </summary>
            <param name="label">A text to be displayed</param>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.G2DLabel.#ctor">
            <summary>
            Creates a display area for a short text string with an empty text.
            </summary>
        </member>
        <member name="T:GoblinXNA.UI.UI2D.ListCellRenderer">
            <summary>
            An interface that defines how a cell in a G2DList should be painted.
            </summary>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.ListCellRenderer.GetListCellRendererComponent(GoblinXNA.UI.UI2D.G2DList,System.Object,System.Int32,System.Boolean)">
            <summary>
            Gets a G2DComponent that has been configured to display the specified value. 
            </summary>
            <param name="list"></param>
            <param name="value"></param>
            <param name="index"></param>
            <param name="isSeleced"></param>
            <returns></returns>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.ListCellRenderer.CellHeight">
            <summary>
            Gets the height of each list cell.
            </summary>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.DefaultListCellRenderer.#ctor">
            <summary>
            Creates a default implementation of ListCellRenderer interface using G2DLabel component.
            </summary>
        </member>
        <member name="T:GoblinXNA.UI.UI2D.DefaultListModel">
            <summary>
            A default implementation of ListModel interface.
            </summary>
        </member>
        <member name="T:GoblinXNA.UI.UI2D.ListModel">
            <summary>
            
            </summary>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.ListModel.Add(System.Object)">
            <summary>
            Adds the specified element to the end of this list.
            </summary>
            <param name="element">The element to be added to the end of this list.</param>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.ListModel.Insert(System.Int32,System.Object)">
            <summary>
            Inserts the specified element at the specified position in this list.
            </summary>
            <param name="index">The position in this list to insert.</param>
            <param name="element">The element to be inserted.</param>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.ListModel.InsertRange(System.Object[],System.Int32)">
            <summary>
            Inserts a list of elements to this list from the specified start position.
            </summary>
            <param name="eles">The list of elements to be inserted.</param>
            <param name="startIndex">The start position in this list to insert a list of elements.</param>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.ListModel.Remove(System.Object)">
            <summary>
            Removes the first (lowest-indexed) occurrence of the element from this list.
            </summary>
            <param name="element">The element to be removed from this list.</param>
            <returns>Whether it successfully removed this element from this list.</returns>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.ListModel.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified position in this list.
            </summary>
            <param name="index">The position to remove an element.</param>
            <returns>Whether it successfully removed this element from this list.</returns>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.ListModel.RemoveAll">
            <summary>
            Removes all elements from this list.
            </summary>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.ListModel.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes the elements at the specified range of indices.
            </summary>
            <param name="startIndex"></param>
            <param name="length"></param>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.ListModel.Replace(System.Int32,System.Object)">
            <summary>
            Replaces the element at the specified position in this list with the specified element.
            </summary>
            <param name="index"></param>
            <param name="element"></param>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.ListModel.ReplaceRange(System.Object[],System.Int32)">
            <summary>
            Replaces the elements at the specified range of indices with the specified elements.
            </summary>
            <param name="eles"></param>
            <param name="startIndex"></param>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.ListModel.InvokeContentsChangedEvent(System.Object,System.Int32,System.Int32)">
            <summary>
            Invokes the content changed event.
            </summary>
            <param name="source">The class that invoked this method.</param>
            <param name="index0">The starting index in the list where content is changed.</param>
            <param name="index1">The ending index in the list where content is changed.</param>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.ListModel.InvokeIntervalAddedEvent(System.Object,System.Int32,System.Int32)">
            <summary>
            Invokes the interval added event.
            </summary>
            <param name="source">The class that invoked this method.</param>
            <param name="index0">The starting index in the list where a list of items is added.</param>
            <param name="index1">The ending index in the list where a list items is added.</param>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.ListModel.InvokeIntervalRemovedEvent(System.Object,System.Int32,System.Int32)">
            <summary>
            Invokes the interval removed event.
            </summary>
            <param name="source">The class that invoked this method.</param>
            <param name="index0">The starting index in the list where a list of items is removed.</param>
            <param name="index1">The ending index in the list where a list of items is removed.</param>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.ListModel.Elements">
            <summary>
            Gets a list of elements in this model.
            </summary>
        </member>
        <member name="E:GoblinXNA.UI.UI2D.ListModel.ContentsChangedEvent">
            <summary>
            An event triggered whenever the content of this model changes.
            </summary>
        </member>
        <member name="E:GoblinXNA.UI.UI2D.ListModel.IntervalAddedEvent">
            <summary>
            An event triggered whenever a list of items is added to this model.
            </summary>
        </member>
        <member name="E:GoblinXNA.UI.UI2D.ListModel.IntervalRemovedEvent">
            <summary>
            An event triggered whenever a list of items is removed from this model.
            </summary>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.DefaultListModel.#ctor(System.Object[])">
            <summary>
            Creates a default implementation of ListModel interface with the specified object array.
            </summary>
            <param name="data">An array of object to contain in this list model.</param>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.DefaultListModel.#ctor">
            <summary>
            Creates a default implementation of ListModel interface with no data.
            </summary>
        </member>
        <member name="T:GoblinXNA.UI.UI2D.DefaultListSelectionModel">
            <summary>
            A default implementation of ListSelectionModel interface.
            </summary>
        </member>
        <member name="T:GoblinXNA.UI.UI2D.ListSelectionModel">
            <summary>
            An interface that defines the selection model of a list component such as G2DList and G2DComboBox.
            </summary>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.ListSelectionModel.AddSelectionInterval(System.Int32,System.Int32)">
            <summary>
            Changes the selection to be the set union of the current selection and the indices between
            startIndex and endIndex inclusive.
            </summary>
            <param name="startIndex"></param>
            <param name="endIndex"></param>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.ListSelectionModel.ClearSelection">
            <summary>
            Changes the selection to the empty set.
            </summary>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.ListSelectionModel.RemoveSelectionInterval(System.Int32,System.Int32)">
            <summary>
            Changes the selection to be the set difference of the current selection and the indices between 
            startIndex and endIndex inclusive.
            </summary>
            <param name="startIndex"></param>
            <param name="endIndex"></param>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.ListSelectionModel.SetSelectionInterval(System.Int32,System.Int32)">
            <summary>
            Changes the selection to be between startIndex and endIndex inclusive.
            </summary>
            <param name="startIndex"></param>
            <param name="endIndex"></param>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.ListSelectionModel.InvokeValueChangedEvent(System.Object,GoblinXNA.UI.SelectionType,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Invokes the value changed event.
            </summary>
            <param name="source">The class that invoked this method.</param>
            <param name="type">The type of selection.</param>
            <param name="index0">The starting index in the list where the selection status changed.</param>
            <param name="index1">The ending index in the list where the selection status changed.</param>
            <param name="isAdjusting">Whether upcoming changes to the value of the model should 
            be considered a single event.</param>
        </member>
        <member name="E:GoblinXNA.UI.UI2D.ListSelectionModel.ValueChangedEvent">
            <summary>
            An event triggered whenever the selection status changes.
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.ListSelectionModel.AnchorSelectionIndex">
            <summary>
            Gets the first index argument from the most recent call to setSelectionInterval(), 
            addSelectionInterval() or removeSelectionInterval().
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.ListSelectionModel.LeadSelectionIndex">
            <summary>
            Gets the second index argument from the most recent call to setSelectionInterval(), 
            addSelectionInterval() or removeSelectionInterval().
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.ListSelectionModel.MaxSelectionIndex">
            <summary>
            Gets the last selected index or -1 if the selection is empty.
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.ListSelectionModel.MinSelectionIndex">
            <summary>
            Gets  the first selected index or -1 if the selection is empty.
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.ListSelectionModel.SelectionMode">
            <summary>
            Gets or sets the current selection mode.
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.ListSelectionModel.ValueIsAdjusting">
            <summary>
            Indicates whether the value is undergoing a series of changes.
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.ListSelectionModel.SelectedIndices">
            <summary>
            Gets a list of indecies in the list that are selected.
            </summary>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.DefaultListSelectionModel.#ctor">
            <summary>
            Creates a default implementation of ListSelectionModel interface.
            </summary>
        </member>
        <member name="T:GoblinXNA.UI.UI2D.Fancy.G2DKeyboard">
            <summary>
            NOT FINISHED YET
            </summary>
        </member>
        <member name="T:GoblinXNA.UI.UI2D.Fancy.G2DMediaControl">
            <summary>
            A 2D UI component that can be used for controlling media such as video or audio.
            </summary>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.Fancy.G2DMediaControl.#ctor">
            <summary>
            Creates a media controller with default play and pause textures.
            </summary>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.Fancy.G2DMediaControl.#ctor(System.Int64)">
            <summary>
            Creates a media controller with the specified media duration.
            </summary>
            <param name="duration">The duration of a media to be controlled.</param>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.Fancy.G2DMediaControl.#ctor(System.Int64,Microsoft.Xna.Framework.Color)">
            <summary>
            Creates a media controller with the specified media duration and the button color
            of play and pause button.
            </summary>
            <param name="duration">The duration of a media to be controlled.</param>
            <param name="buttonColor">The color of the play and pause button with default 
            play and pause textures.</param>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.Fancy.G2DMediaControl.#ctor(System.Int64,Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            Creates a media controller with the specified media duration, play button image,
            and pause button image. 
            </summary>
            <param name="duration">The duration of a media to be controlled.</param>
            <param name="playTexture">The textre image used for the play button.</param>
            <param name="pauseTexture">The texture image used for the pause button.</param>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.Fancy.G2DMediaControl.Reset">
            <summary>
            Resets the position back to the start position and stops the play. 
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.Fancy.G2DMediaControl.Duration">
            <summary>
            Gets or sets the duration of the media to be controlled in milliseconds.
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.Fancy.G2DMediaControl.StartPosition">
            <summary>
            Gets or sets the start position if negative is allowed. This value is effective only if
            AllowNegative is set to true.
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.Fancy.G2DMediaControl.CurrentPosition">
            <summary>
            Gets or sets the current position of the media in milliseconds.
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.Fancy.G2DMediaControl.AllowNegative">
            <summary>
            Gets or sets whether to allow negative position. The default value is false.
            If you set this to true, you should also set StartPosition to specify the
            starting (negative) position.
            </summary>
            <see cref="P:GoblinXNA.UI.UI2D.Fancy.G2DMediaControl.StartPosition"/>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.Fancy.G2DMediaControl.IsPlaying">
            <summary>
            Gets whether the media is in 'play' mode.
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.Fancy.G2DMediaControl.Loop">
            <summary>
            Gets or sets whether to loop the current position when it reaches the end. The default value
            is false.
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.Fancy.G2DMediaControl.ShowPositionTooltip">
            <summary>
            Gets or sets whether to show a tooltip above the play time slider that indicates the current
            position time. The default value is true.
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.Fancy.G2DMediaControl.PlayCallback">
            <summary>
            Sets the callback function to be invoked whenever 'play' button is clicked.
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.Fancy.G2DMediaControl.PauseCallback">
            <summary>
            Sets the callback function to be invoked whenever 'pause' button is clicked.
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.Fancy.G2DMediaControl.PositionUpdateCallback">
            <summary>
            Sets the callback function to be invoked whenever the position of  the media gets updated.
            </summary>
        </member>
        <member name="T:GoblinXNA.UI.UI2D.G2DSlider">
            <summary>
            A slider lets the user graphically select a value by sliding a knob within a bounded interval. 
            The slider can show both major tick marks and minor tick marks between them, as well as labels.
            
            In order to display the value labels, G2DSlider.TextFont must be set. 
            Otherwise, the labels will not show up.
            </summary>
        </member>
        <member name="F:GoblinXNA.UI.UI2D.G2DSlider.valueIsAdjusting">
            <summary>
            Indicator of whether the current changes to the value property are part of 
            a series of changes
            </summary>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.G2DSlider.#ctor(GoblinXNA.GoblinEnums.Orientation,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a slider with specified orientation, and minimum, maximum, and initial values.
            </summary>
            <param name="orientation">The orientation of the slider</param>
            <param name="min">The minimum value the slider can take</param>
            <param name="max">The maximum value the slider can take</param>
            <param name="value">An initial value between the range of min and max values</param>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.G2DSlider.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a horizontal slider with the specified minimum, maximum, and initial values.
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <param name="value"></param>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.G2DSlider.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a horizontal slider with the specified minimum and maximum values. The initial
            value is set to the average value of min and max.
            </summary>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.G2DSlider.#ctor(GoblinXNA.GoblinEnums.Orientation)">
            <summary>
            Creates a slider in the range between 0 and 10 with the specified orientation and initial value
            of 5.
            </summary>
            <param name="orientation"></param>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.G2DSlider.#ctor">
            <summary>
            Craetes a horizontal slider in the range between 0 and 10 with initial value of 5.
            </summary>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.G2DSlider.InvokeStateChangedEvent(System.Object)">
            <summary>
            Invokes the state changed event.
            </summary>
            <param name="source">The class that invoked this method.</param>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.G2DSlider.PaintBorder">
            <summary>
            Paints dashed border when focused.
            </summary>
        </member>
        <member name="E:GoblinXNA.UI.UI2D.G2DSlider.StateChangedEvent">
            <summary>
            An event triggered whenever the slider value changes.
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.G2DSlider.Value">
            <summary>
            Gets or sets the slider's current value
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.G2DSlider.Maximum">
            <summary>
            Gets or sets the slider's maximum value
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.G2DSlider.Minimum">
            <summary>
            Gets or sets the slider's minimum value
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.G2DSlider.Orientation">
            <summary>
            Gets or sets the slider's orientation
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.G2DSlider.KnobLength">
            <summary>
            Gets or sets the length of the knob.
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.G2DSlider.Extent">
            <summary>
            Gets the range of values "covered" by the knob
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.G2DSlider.MajorTickSpacing">
            <summary>
            Gets or sets the slider's major tick spacing. 
            
            For example, for a max value of 10 and min value of 0, major tick spacing of 5 
            will draw major ticks at 0, 5, and 10.
            </summary>
            <exception cref="T:GoblinXNA.GoblinException">If MinorTickSpacing is set and this value is smaller than
            MinorTickSpacing</exception>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.G2DSlider.MinorTickSpacing">
            <summary>
            Gets or sets the slider's minor tick spacing. 
            
            For example, for a max value of 10 and min value of 0, minor tick spacing of 2 
            will draw minor ticks at 0, 2, 4, 6, 8, and 10. 
            NOTE: If there is an overlap between major ticks and minor ticks, only major ticks 
            will be shown
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.G2DSlider.SnapToTicks">
            <summary>
            Gets or sets whether to make the knob resolve to the closest tick mark next to where the 
            user positioned the knob
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.G2DSlider.PaintTicks">
            <summary>
            Gets or sets whether to paint the ticks including both major and minor ticks. 
            </summary>
            <remarks>Major tick spacing has to be defined before the ticks can be painted</remarks>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.G2DSlider.PaintLabels">
            <summary>
            Gets or sets whether to paint the labels. 
            </summary>
            <remarks>
            Labels are only shown below major ticks. Also, major tick spacing has to
            be defined before the labels can be painted
            </remarks>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.G2DSlider.PaintTrack">
            <summary>
            Gets or sets whether to paint the track behind the knob
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.G2DSlider.ValueIsAdjusting">
            <summary>
            Gets whether the current changes to the value property are part 
            of a series of changes
            </summary>
        </member>
        <member name="T:GoblinXNA.UI.UI2D.Fancy.SuggestBoxStateChanged">
            <summary>
            Invoked when an item in the suggestion list is selected. 
            </summary>
            <param name="suggestBox">The G2DList class that invoked this delegate function.</param>
        </member>
        <member name="T:GoblinXNA.UI.UI2D.Fancy.G2DSuggestField">
            <summary>
            A suggestion field is a text field that provides a list of possible text inputs such as search terms 
            in a drop down box every time the user modifies a text in the field. If the user selects one of 
            the texts in the suggestion list, the text in the text field will be replaced with the selected one.
            The suggestion list disappears either if a selection is made or the user presses 'Enter' key. 
            </summary>
        </member>
        <member name="T:GoblinXNA.UI.UI2D.G2DTextField">
            <summary>
            A text field displays a text string based on the user's keyboard input. This component
            needs to be focused in order to receive the keyboard input.
            
            In order to display the text and the caret, G2DTextField.TextFont must be set. 
            Otherwise, the text and caret will not show up.
            </summary>
        </member>
        <member name="T:GoblinXNA.UI.UI2D.TextComponent">
            <summary>
            An abstract class for 2D components that can accept textual input through the keyboard.
            </summary>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.TextComponent.#ctor(System.String,System.Int32)">
            <summary>
            Creates a text component with an initial text and number of columns (width).
            </summary>
            <param name="text">The initial text</param>
            <param name="columns">The number of characters a row can display</param>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.TextComponent.Select(System.Int32,System.Int32)">
            <summary>
            Selects the text from a start index to an end index.
            </summary>
            <param name="selectStart"></param>
            <param name="selectEnd"></param>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.TextComponent.SelectAll">
            <summary>
            Selects all of the text.
            </summary>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.TextComponent.Cut">
            <summary>
            Cuts the selected text.
            </summary>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.TextComponent.Copy">
            <summary>
            Copies the selected text into the clipboard.
            </summary>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.TextComponent.Paste">
            <summary>
            Pastes a text from another source to this component.
            </summary>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.TextComponent.RenderHighlight">
            <summary>
            Renders the highlight color on the background of selected text.
            </summary>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.TextComponent.RenderCaret">
            <summary>
            Renders the caret.
            </summary>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.TextComponent.InvokeCaretUpdate(System.Object)">
            <summary>
            Invokes the caret update event.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.TextComponent.UpdateCaret(Microsoft.Xna.Framework.Input.Keys,GoblinXNA.Device.Generic.KeyModifier)">
            <summary>
            Updates the caret position when there is a keyboard input.
            </summary>
            <param name="key"></param>
            <param name="modifier"></param>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.TextComponent.UpdateText(Microsoft.Xna.Framework.Input.Keys,GoblinXNA.Device.Generic.KeyModifier)">
            <summary>
            Updates the text when there is a keyboard input.
            </summary>
            <param name="key"></param>
            <param name="modifier"></param>
        </member>
        <member name="E:GoblinXNA.UI.UI2D.TextComponent.CaretUpdateEvent">
            <summary>
            An event triggered whenever the caret position is updated.
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.TextComponent.Editable">
            <summary>
            Gets or sets whether this text component is editable. The default value is true.
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.TextComponent.Columns">
            <summary>
            Gets or sets the maximum number of characters per row. If set to less than or equal to 0, the text will be
            bounded by the width of this component. The default value is 0.
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.TextComponent.FocusedColor">
            <summary>
            Gets or sets the color when this text component is focused. The default color is Color.Yellow.
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.TextComponent.HighlightColor">
            <summary>
            Gets or sets the background highlight color when a text string is selected. The default color is
            Color.RoyalBlue.
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.TextComponent.CaretBlinkInterval">
            <summary>
            Gets or sets the blink interval of the caret. The default value is 10.
            </summary>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.G2DTextField.#ctor(System.String,System.Int32)">
            <summary>
            Creates a text field with specified initial text string and the width of the text field.
            </summary>
            <param name="text">An initial text string</param>
            <param name="columns">The width of the text field that is used to determine
            how many characters this text field can display</param>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.G2DTextField.#ctor(System.String)">
            <summary>
            Creates a text field with specified initial text and column width of 30.
            </summary>
            <param name="text">An initial text string</param>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.G2DTextField.#ctor(System.Int32)">
            <summary>
            Creates a text field with specified column width.
            </summary>
            <param name="columns"></param>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.G2DTextField.#ctor">
            <summary>
            Creates a text field with column width of 30.
            </summary>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.Fancy.G2DSuggestField.#ctor">
            <summary>
            Creates a suggestion field without a list of possible text inputs.
            </summary>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.Fancy.G2DSuggestField.#ctor(System.String[])">
            <summary>
            Creates a suggestion field with a list of possible text inputs and maximum of eight
            suggested texts to display in the drop down box.
            </summary>
            <param name="suggestionList">A list of possible text inputs.</param>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.Fancy.G2DSuggestField.#ctor(System.Collections.Generic.List{System.String})">
            <summary>
            Creates a suggestion field with a list of possible text inputs and maximum of eight
            suggested texts to display in the drop down box.
            </summary>
            <param name="suggestionList">A list of possible text inputs.</param>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.Fancy.G2DSuggestField.#ctor(System.Collections.Generic.List{System.String},System.Int32)">
            <summary>
            Creates a suggestion field with a list of possible text inputs and the maximum number of 
            suggested texts to display in the drop down box.
            </summary>
            <param name="suggestionList">A list of possible text inputs.</param>
            <param name="maxSuggestions">The maximum number of suggested texts to display in
            the drop down box.</param>
        </member>
        <member name="E:GoblinXNA.UI.UI2D.Fancy.G2DSuggestField.SuggestBoxStateChangedEvent">
            <summary>
            An event triggered whenever a new item is selected in the suggestion list.
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.Fancy.G2DSuggestField.SuggestionList">
            <summary>
            Gets or sets the list of possible text inputs.
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.Fancy.G2DSuggestField.MaxSuggestions">
            <summary>
            Gets or sets the maximum number of suggested texts to display.
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.Fancy.G2DSuggestField.Criteria">
            <summary>
            Gets or sets the criteria for matching the entered text with the list of possible text inputs
            in order to suggest a possible input. The default value is MatchCriteria.Contains.
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.Fancy.G2DSuggestField.MatchFunction">
            <summary>
            Gets or sets a matching function used to identify which texts from the list of possible text
            inputs should be displayed based on the current text typed in the text field. This matching
            function is used only if Criteria property is set to MatchCriteria.Custom.
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.Fancy.G2DSuggestField.KeepSuggestionBoxOpaque">
            <summary>
            Gets or sets whether to keep the suggestion box to render in opaque background. If set to false,
            then the suggestion box will have the same transparency value as this component. If true, the
            suggestion box will remain opaque even if this component's transparency value is modified. The 
            default value is true.
            </summary>
            <remarks>
            If there are other UI components positioned below this component, then it's better to set this 
            property to true.
            </remarks>
        </member>
        <member name="T:GoblinXNA.UI.UI2D.Fancy.G2DSuggestField.MatchCriteria">
            <summary>
            An enum that specifies a text matching criteria.
            </summary>
        </member>
        <member name="T:GoblinXNA.UI.UI2D.Fancy.G2DSuggestField.IsPartOf">
            <summary>
            A delegate function that tests whether a text 'b' is part of text 'a'.
            </summary>
            <param name="textToMatch"></param>
            <param name="textToBeMatched"></param>
            <returns></returns>
        </member>
        <member name="T:GoblinXNA.UI.UI2D.Fancy.G2DWaitBar">
            <summary>
            An animated cycling bar that can be used to indicate busy wait. An optional 
            text message can be displayed with the wait animation. 
            </summary>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.Fancy.G2DWaitBar.#ctor">
            <summary>
            Creates an animated cycling bar without any text messages.
            </summary>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.Fancy.G2DWaitBar.#ctor(System.String)">
            <summary>
            Creates an animated cycling bar to indicate busy wait with a text message.
            </summary>
            <param name="label">A text message to be displayed with the wait animation.</param>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.Fancy.G2DWaitBar.AnimationBarColor">
            <summary>
            Gets or sets the color of the circling animation bars.
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.Fancy.G2DWaitBar.UpdateInterval">
            <summary>
            Gets or sets the update interval (speed) of the circling animation. The smaller the value is,
            the faster the update will be. The default update interval is 6.
            </summary>
        </member>
        <member name="T:GoblinXNA.UI.UI2D.G2DButton">
            <summary>
            An implementation of a "push" button. 
            
            In order to display the text on the button, G2DButton.TextFont must be set. 
            Otherwise, the text will not show up.
            </summary>
        </member>
        <member name="F:GoblinXNA.UI.UI2D.G2DButton.focusedColor">
            <summary>
            Color used for highlighting the inner border when focused
            </summary>
        </member>
        <member name="F:GoblinXNA.UI.UI2D.G2DButton.clickKeyPressed">
            <summary>
            Indicator of whether the 'click' key is held down
            </summary>
        </member>
        <member name="F:GoblinXNA.UI.UI2D.G2DButton.clickKey">
            <summary>
            Key used to perform mouse click action when focused
            </summary>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.G2DButton.#ctor(System.String)">
            <summary>
            Creates a "push" button with the specified text.
            </summary>
            <param name="label">The text displayed on the button</param>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.G2DButton.#ctor">
            <summary>
            Creates a "push" button with no text.
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.G2DButton.ClickKey">
            <summary>
            Gets or sets the key used to perform mouse click action when focused
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.G2DButton.ClickKeyPressed">
            <summary>
            Gets whether the 'click' key is held down
            </summary>
        </member>
        <member name="T:GoblinXNA.UI.UI2D.G2DCheckBox">
            <summary>
            An implementation of a check box, which is a box that can be selected or deselected.
            
            In order to display the text next to the check box, G2DButton.TextFont must be set. 
            Otherwise, the text will not show up. Note that the size of the radio button icon depends on the
            font size. The larger the font size, the larger the radio button icon.
            </summary>
        </member>
        <member name="T:GoblinXNA.UI.UI2D.ToggleButton">
            <summary>
            An implementation of a two-state button that can be toggled.
            </summary>
            <remarks>
            Any GoblinXNA 2D GUI button component with toggling should extend this class
            </remarks>
        </member>
        <member name="F:GoblinXNA.UI.UI2D.ToggleButton.selected">
            <summary>
            Indicator of whether this toggle button is selected
            </summary>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.ToggleButton.#ctor(System.String)">
            <summary>
            Creates a two-state button that can be toggled with a specified label.
            </summary>
            <param name="label"></param>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.ToggleButton.#ctor">
            <summary>
            Creates a two-state button that can be toggled.
            </summary>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.ToggleButton.DoClick">
            <summary>
            Programmatically click the toggle button
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.ToggleButton.Selected">
            <summary>
            Gets whether this toggle button is selected. Call the DoClick() method in order to 
            set Selected to true.
            </summary>
        </member>
        <member name="F:GoblinXNA.UI.UI2D.G2DCheckBox.size">
            <summary>
            Size of the check box
            </summary>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.G2DCheckBox.#ctor(System.String)">
            <summary>
            Creates an initially unselected check box button with the specified label.
            </summary>
            <param name="label">The text displayed on the right of the check box icon</param>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.G2DCheckBox.#ctor">
            <summary>
            Creates an initially unselected check box button with no text.
            </summary>
        </member>
        <member name="T:GoblinXNA.UI.UI2D.G2DComboBox">
            <summary>
            IMPLEMENTATION NOT FINISHED YET.
            </summary>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.G2DComboBox.ShowPopup">
            <summary>
            Causes the combo box to display its popup window.
            </summary>
        </member>
        <member name="E:GoblinXNA.UI.UI2D.G2DComboBox.ItemStateChangedEvent">
            <summary>
            An event triggered whenever an item state changes.
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.G2DComboBox.MaximumRowCount">
            <summary>
            Gets or sets the maximum number of rows this combo box displays.
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.G2DComboBox.SelectedIndex">
            <summary>
            Gets or sets the selected index in the combo box list.
            </summary>
        </member>
        <member name="T:GoblinXNA.UI.UI2D.G2DList">
            <summary>
            A display area that renders a list of objects. This allows the user to select one or more objects from the
            list. A separate model, ListModel, represents the contens of the list. The rendering of each list element
            is handled by a ListCellRenderer implementation.
            </summary>
        </member>
        <member name="T:GoblinXNA.UI.UI2D.Scrollable">
            <summary>
            An interface that provides information to a scrolling container like G2DScrollPane.
            </summary>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.Scrollable.GetScrollableBlockIncrement(Microsoft.Xna.Framework.Rectangle,GoblinXNA.GoblinEnums.Orientation,System.Int32)">
            <summary>
            Gets the scroll increment that will completely expose one block of rows or columns, depending on
            the orientation.
            </summary>
            <param name="visibleRect">The view area visible within the viewport</param>
            <param name="orientation">Horizontal indicates columns, and Vertical indicates rows</param>
            <param name="direction">Scroll up/left if less than 0; otherwise, scroll down/right</param>
            <returns></returns>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.Scrollable.GetScrollableUnitIncrement(Microsoft.Xna.Framework.Rectangle,GoblinXNA.GoblinEnums.Orientation,System.Int32)">
            <summary>
            Gets the scroll increment that will completely expose one new row or column depending on the
            orientation.
            </summary>
            <param name="visibleRect">The view area visible within the viewport</param>
            <param name="orientation">Horizontal indicates columns, and Vertical indicates rows</param>
            <param name="direction">Scroll up/left if less than 0; otherwise, scroll down/right</param>
            <returns></returns>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.Scrollable.PreferredScrollableViewportSize">
            <summary>
            Gets the preferred size of the viewport.
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.Scrollable.ScrollableTracksViewportHeight">
            <summary>
            Indicates whether a viewport should always force the height of this Scrollable to
            match the height of the viewport.
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.Scrollable.ScrollableTracksViewportWidth">
            <summary>
            Indicates whether a viewport should always force the width of this Scrollable to 
            match the width of the viewport.
            </summary>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.G2DList.#ctor(GoblinXNA.UI.UI2D.ListModel)">
            <summary>
            Creates a list that displays the elements in the specified model.
            </summary>
            <param name="listModel"></param>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.G2DList.#ctor(System.Object[])">
            <summary>
            Creates a list that displays the elements in the specified array.
            </summary>
            <param name="listData"></param>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.G2DList.#ctor">
            <summary>
            Creates a list with an empty model.
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.G2DList.Model">
            <summary>
            Gets or sets the list data model. The default model is DefaultListModel.
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.G2DList.SelectionModel">
            <summary>
            Gets or sets the selection model for this list. The default model is DefaultListSelectionModel.
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.G2DList.CellRenderer">
            <summary>
            Gets or sets the renderer that handles the painting of each cell. The default renderer is
            DefaultListCellRenderer.
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.G2DList.SelectionBackgroundColor">
            <summary>
            Gets or sets the background color of the cell that contains the selected element.
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.G2DList.SelectionForegroundColor">
            <summary>
            Gets or sets the foreground color of the cell that contains the selected element.
            </summary>
        </member>
        <member name="T:GoblinXNA.UI.UI2D.G2DPanel">
            <summary>
            A panel that can hold other 2D UI components. Each added component is drawn relative to
            its parent panel.
            </summary>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.G2DPanel.#ctor">
            <summary>
            Creates a panel to hold other 2D UI components.
            </summary>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.G2DPanel.AddChild(GoblinXNA.UI.UI2D.G2DComponent)">
            <summary>
            Adds a child component to this panel.
            </summary>
            <remarks>
            Note that when you add a child component, the child component will automatically inherit the following
            properties from this panel: Transparency, TextTransparency, Visible, and Enabled. If you want to have
            a different value for these properties, then you should set these property values of the child component 
            after adding to this panel. 
            </remarks>
            <param name="comp">A 2D component to be added</param>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.G2DPanel.RemoveChild(GoblinXNA.UI.UI2D.G2DComponent)">
            <summary>
            Removes a child component from this panel if already added.
            </summary>
            <param name="comp">A 2D component to be removed</param>
            <returns>Whether removal succeeded</returns>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.G2DPanel.RemoveChildAt(System.Int32)">
            <summary>
            Removes a child component from this panel at a specific index.
            </summary>
            <param name="i">The index where a child component will be removed</param>
            <returns>Whether removal succeeded</returns>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.G2DPanel.RemoveChildren">
            <summary>
            Removes all the child components added to this panel.
            </summary>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.G2DPanel.GetPreRootParent(GoblinXNA.UI.UI2D.G2DComponent)">
            <summary>
            Gets the parent right before reaching the root
            </summary>
            <param name="comp"></param>
            <returns></returns>
        </member>
        <member name="E:GoblinXNA.UI.UI2D.G2DPanel.ComponentAddedEvent">
            <summary>
            An event triggered whenever a component is added to this panel.
            </summary>
        </member>
        <member name="E:GoblinXNA.UI.UI2D.G2DPanel.ComponentRemovedEvent">
            <summary>
            An event triggered whenever a component is removed from this panel.
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.G2DPanel.Border">
            <summary>
            Gets or sets the border type.
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.G2DPanel.HasChildren">
            <summary>
            Gets whether this panel has any child components added.
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.G2DPanel.Children">
            <summary>
            Gets the child components added to this panel.
            </summary>
        </member>
        <member name="T:GoblinXNA.UI.UI2D.G2DProgressBar">
            <summary>
            A G2D component that displays an integer value within a bounded interval. This component is 
            typically used to express the progress of some task by displaying the percentage completed
            and optionally, a textual display of the percentage.
            
            In order to display the percentage completed text, G2DProgressBar.TextFont must be set. 
            Otherwise, the text will not show up.
            </summary>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.G2DProgressBar.#ctor(GoblinXNA.GoblinEnums.Orientation,System.Int32,System.Int32)">
            <summary>
            Creates a progress bar with the specified orientation, and minimum and maximum values.
            </summary>
            <param name="orientation">The orientation of the progress bar</param>
            <param name="min">The minimum value of the progress bar</param>
            <param name="max">The maximum value of the progress bar</param>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.G2DProgressBar.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a horizontal progress bar with minimum value of 0 and maximum value of 100.
            </summary>
            <param name="min">The minimum value of the progress bar</param>
            <param name="max">The maximum value of the progress bar</param>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.G2DProgressBar.#ctor(GoblinXNA.GoblinEnums.Orientation)">
            <summary>
            Creates a progress bar with the specified orientation, and minimum value of 0 and 
            maximum value of 100.
            </summary>
            <param name="orientation">The orientation of the progress bar</param>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.G2DProgressBar.#ctor">
            <summary>
            Creates a horizontal progress bar with minimum value of 0 and maximum value of 100.
            </summary>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.G2DProgressBar.InvokeStateChangedEvent(System.Object)">
            <summary>
            Invokes the state changed event.
            </summary>
            <param name="source">The class that invoked this method.</param>
        </member>
        <member name="E:GoblinXNA.UI.UI2D.G2DProgressBar.StateChangedEvent">
            <summary>
            An event triggered whenever the state of the progress bar changes.
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.G2DProgressBar.Indeterminate">
            <summary>
            Gets or sets whether to use indeterminate mode. Indeterminate mode is used to indicate
            that a task of unknown length is running. While the bar is in indeterminate mode, it 
            animates constantly to show that some tasks are being executed.
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.G2DProgressBar.Orientation">
            <summary>
            Gets or sets the desired orientation of the progress bar
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.G2DProgressBar.Minimum">
            <summary>
            Gets or sets the minimum value of the progress bar
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.G2DProgressBar.Maximum">
            <summary>
            Gets or sets the maximum value of the progress bar
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.G2DProgressBar.Value">
            <summary>
            Gets or sets the progress bar's current value
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.G2DProgressBar.PaintString">
            <summary>
            Gets or sets whether to paint the percentage complete text message in the middle of 
            the progress bar if the progress bar is not indeterminate
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.G2DProgressBar.BarColor">
            <summary>
            Gets or sets the color of the progress bar
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.G2DProgressBar.StringColor">
            <summary>
            Gets or sets the color of the text message that shows percentage completed
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.G2DProgressBar.PercentComplete">
            <summary>
            Gets the percentage completed. If indeterminate, this will return -1.
            </summary>
        </member>
        <member name="T:GoblinXNA.UI.UI2D.G2DRadioButton">
            <summary>
            An implementation of a radio button, which is a button that can be selected or deselected.
            
            If you want to have at most one radio button selected at any time within a group of radio buttons,
            create a ButtonGroup instance, and add those radio buttons to the ButtonGroup instance. For
            multiple groups, you should use multiple ButtonGroup instances.
            
            In order to display the text next to the radio button, G2DButton.TextFont must be set. 
            Otherwise, the text will not show up. Note that the size of the radio button icon depends on the
            font size. The larger the font size, the larger the radio button icon.
            </summary>
        </member>
        <member name="F:GoblinXNA.UI.UI2D.G2DRadioButton.radius">
            <summary>
            Radius of the radio button
            </summary>
        </member>
        <member name="F:GoblinXNA.UI.UI2D.G2DRadioButton.center">
            <summary>
            Center position of the radio button
            </summary>
        </member>
        <member name="F:GoblinXNA.UI.UI2D.G2DRadioButton.buttonColor">
            <summary>
            Color used to draw the inside of the radio button
            </summary>
        </member>
        <member name="F:GoblinXNA.UI.UI2D.G2DRadioButton.selectedColor">
            <summary>
            Color used to highlight the inner border of the radio button when selected
            </summary>
        </member>
        <member name="F:GoblinXNA.UI.UI2D.G2DRadioButton.color">
            <summary>
            Color used to draw the border of the radio button
            </summary>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.G2DRadioButton.#ctor(System.String)">
            <summary>
            Creates an initially unselected radio button with the specified label.
            </summary>
            <param name="label">The text displayed on the right of the radio button icon</param>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.G2DRadioButton.#ctor">
            <summary>
            Creates an initially unselected radio button with an empty label.
            </summary>
        </member>
        <member name="T:GoblinXNA.UI.UI2D.G2DScrollBar">
            <summary>
            This class can be used to control the viewing area of a scrollable object.
            </summary>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.G2DScrollBar.#ctor(GoblinXNA.GoblinEnums.Orientation,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a scroll bar with the specified orientation, value, extent, and maximum.
            </summary>
            <param name="orientation"></param>
            <param name="value"></param>
            <param name="extent">The size of the viewable area (a.k.a visible amount)</param>
            <param name="max"></param>
        </member>
        <member name="E:GoblinXNA.UI.UI2D.G2DScrollBar.StateChangedEvent">
            <summary>
            An event triggered whenever the state of the scroll bar changes.
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.G2DScrollBar.Orientation">
            <summary>
            Gets the orientation of this scroll bar.
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.G2DScrollBar.Extent">
            <summary>
            Gets or sets the size of the viewable area (Note that this is different from the Extent property
            of G2DSlider).
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.G2DScrollBar.UnitIncrement">
            <summary>
            Gets or sets the amount of increment/decrement when the up/left or down/right button is pressed.
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.G2DScrollBar.BlockIncrement">
            <summary>
            Gets or sets the amount of increment/decrement when the scrollbar is clicked (not on the scrollbar knob)
            </summary>
        </member>
        <member name="T:GoblinXNA.UI.UI2D.G2DScrollPane">
            <summary>
            IMPLEMENTATION NOT FINISHED YET.
            </summary>
        </member>
        <member name="T:GoblinXNA.UI.UI2D.G2DSeparator">
            <summary>
            A separator is a divider line that, typically used to separate regions on a panel by drawing
            a line.
            </summary>
        </member>
        <member name="F:GoblinXNA.UI.UI2D.G2DSeparator.orientation">
            <summary>
            Orietation of the separator
            </summary>
        </member>
        <member name="F:GoblinXNA.UI.UI2D.G2DSeparator.thickness">
            <summary>
            Thickness of the separator (This variable replaces bounds.Height if drawn horizontally
            or bounds.Width if drawn vertically)
            </summary>
        </member>
        <member name="F:GoblinXNA.UI.UI2D.G2DSeparator.adjustLength">
            <summary>
            Indicator of whether to adjust the length of this separator to either its parent's width
            or height depending on the orientation if it has a parent
            </summary>
        </member>
        <member name="F:GoblinXNA.UI.UI2D.G2DSeparator.p1">
            <summary>
            Upper-left corner of the separator
            </summary>
        </member>
        <member name="F:GoblinXNA.UI.UI2D.G2DSeparator.p2">
            <summary>
            Lower-right corner of the separator
            </summary>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.G2DSeparator.#ctor(System.Int32,System.Boolean,GoblinXNA.GoblinEnums.Orientation)">
            <summary>
            Creates a divider line with the specified thickness and orientation.
            </summary>
            <param name="thickness">The thickness of the line</param>
            <param name="adjustLength">Indicates whether to adjust the length of this divider line to 
            either its parent's width or height depending on the orientation. If false, its own Bounds
            information is used to decide the length</param>
            <param name="orientation">The orientation of the line</param>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.G2DSeparator.#ctor(System.Boolean,GoblinXNA.GoblinEnums.Orientation)">
            <summary>
            Creates a divider line with thickness of 3 pixels and specified orientation.
            </summary>
            <param name="adjustLength">Indicates whether to adjust the length of this divider line to 
            either its parent's width or height depending on the orientation. If false, its own Bounds
            information is used to decide the length</param>
            <param name="orientation">The orientation of the line</param>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.G2DSeparator.#ctor(System.Boolean)">
            <summary>
            Creates a horizontal divider line with thickness of 3 pixels. 
            </summary>
            <param name="adjustLength">Indicates whether to adjust the length of this divider line to 
            either its parent's width or height depending on the orientation. If false, its own Bounds
            information is used to decide the length</param>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.G2DSeparator.#ctor">
            <summary>
            Creaes a horizontal divider line with thickness of 3 pixels.
            The length of the line is not adjusted to its parent.
            </summary>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.G2DSeparator.SetDrawingPoints">
            <summary>
            Set the drawing points of the separator
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.G2DSeparator.Orientation">
            <summary>
            Gets or sets the drawing orientation.
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.G2DSeparator.SeparatorThickness">
            <summary>
            Gets or sets the thickness of the divider line (This variable replaces bounds.Height 
            if drawn horizontally or bounds.Width if drawn vertically)
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.G2DSeparator.AdjustLength">
            <summary>
            Gets or sets whether to adjust the length of this divider line to either its parent's width or height
            depending on the orientation if it has a parent.
            </summary>
        </member>
        <member name="T:GoblinXNA.UI.UI2D.G2DSpinner">
            <summary>
            A single line input field that lets the user select a number or an object from an ordered sequence. It provides
            a pair of tiny arrow buttons for stepping through the elements of the sequence. The keyboard up/down arrow keys
            also cycle through the elements. The value in the spinner is not directly editable.
            </summary>
        </member>
        <member name="F:GoblinXNA.UI.UI2D.G2DSpinner.initialPressInterval">
            <summary>
            When the mouse is held down on either the up or down arrow, it should increment or
            decrement the value. But before taking the action, wait for some press intervals
            for avoiding unintended multiple increments or decrements
            </summary>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.G2DSpinner.#ctor">
            <summary>
            Creates a spinner with a SpinnerIntegerModel with initial value of 0 and no minimum or maximum limits.
            </summary>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.G2DSpinner.#ctor(GoblinXNA.UI.UI2D.SpinnerModel)">
            <summary>
            Creates a custom spinner with a given SpinnerModel.
            </summary>
            <param name="model"></param>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.G2DSpinner.DoNextClick">
            <summary>
            Programmatically perform 'up arrow' click.
            </summary>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.G2DSpinner.DoPreviousClick">
            <summary>
            Programmatically perform 'down arrow' click.
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.G2DSpinner.Model">
            <summary>
            Gets or sets the SpinnerModel for this spinner.
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.G2DSpinner.ButtonColor">
            <summary>
            Gets or sets the color of the buttons that hold up and down arrows.
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.G2DSpinner.ArrowColor">
            <summary>
            Gets or sets the color of the up and down arrows.
            </summary>
        </member>
        <member name="T:GoblinXNA.UI.UI2D.G2DTextArea">
            <summary>
            IMPLEMENTATION NOT FINISHED YET.
            </summary>
        </member>
        <member name="T:GoblinXNA.UI.UI2D.SelectionMode">
            <summary>
            An enum that specifies the selection mode of the items in a list.
            </summary>
        </member>
        <member name="F:GoblinXNA.UI.UI2D.SelectionMode.MultipleInterval">
            <summary>
            A mode of being able to select one or more contiguous ranges of indices at a time.
            </summary>
        </member>
        <member name="F:GoblinXNA.UI.UI2D.SelectionMode.SingleInterval">
            <summary>
            A mode of being able to select one contiguous range of indices at a time.
            </summary>
        </member>
        <member name="F:GoblinXNA.UI.UI2D.SelectionMode.Single">
            <summary>
            A mode of being able to select one list index at a time.
            </summary>
        </member>
        <member name="T:GoblinXNA.UI.UI2D.SpinnerIntegerModel">
            <summary>
            A SpinnerModel for sequence of integer numbers. If both Minimum and Maximum properties are defined, the return value
            is always limited between these two bounds. Otherwise, the value is unlimited.
            </summary>
        </member>
        <member name="T:GoblinXNA.UI.UI2D.SpinnerModel">
            <summary>
            A data model interface to be used with G2DSpinner class.
            </summary>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.SpinnerModel.InvokeStateChangedEvent(System.Object)">
            <summary>
            Invokes the state changed event.
            </summary>
            <param name="source">The class that invoked this method.</param>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.SpinnerModel.Value">
            <summary>
            Gets or sets the current value of the model.
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.SpinnerModel.NextValue">
            <summary>
            Gets the object in the sequence that comes after the object returned by Value property.
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.SpinnerModel.PreviousValue">
            <summary>
            Gets the object in the sequence that comes before the object returned by Value property.
            </summary>
        </member>
        <member name="E:GoblinXNA.UI.UI2D.SpinnerModel.StateChangedEvent">
            <summary>
            An event triggered whenever the state of the spinner changes.
            </summary>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.SpinnerIntegerModel.#ctor">
            <summary>
            Creates a number model with no upper nor lower limit, step size of 1, and an initial value of 0.
            </summary>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.SpinnerIntegerModel.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a number model with upper limit 'maximum', lower limit 'minimum', incremental/decremental size
            'stepSize', and an initial 'value'.
            </summary>
            <param name="value">The initial value of the sequence.</param>
            <param name="minimum">The minimum value in the sequence.</param>
            <param name="maximum">The maximum value in the sequence.</param>
            <param name="stepSize">The incremental or decremental size.</param>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.SpinnerIntegerModel.Maximum">
            <summary>
            Gets or sets the upper limit of this number sequence.
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.SpinnerIntegerModel.Minimum">
            <summary>
            Gets or sets the lower limit of this number sequence.
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.UI2D.SpinnerIntegerModel.StepSize">
            <summary>
            Gets or sets the incremental/decremental size.
            </summary>
        </member>
        <member name="T:GoblinXNA.UI.UI2D.UI2DHelper">
            <summary>
            A helper class that implements various helper functions for 2D UI component classes.
            </summary>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.UI2DHelper.IsWithin(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Tests whether a point 'p' is within the bounds of a rectangle 'rect'.
            </summary>
            <param name="p"></param>
            <param name="rect"></param>
            <returns>Whether 'p' is within 'rect'</returns>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.UI2DHelper.IsWithin(System.Int32,System.Int32,Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Tests whether a point (x, y) is within the bounds of a rectangle 'rect'.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="rect"></param>
            <returns>Whether a point (x, y) is within 'rect'</returns>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.UI2DHelper.IsWithin(Microsoft.Xna.Framework.Vector2,System.Collections.Generic.List{Microsoft.Xna.Framework.Vector2})">
            <summary>
            Tests whether a point 'p' is within a non-self-crossing polygon. The result can be inaccurate if
            the point 'p' is really close to the edge of the polygon.
            </summary>
            <param name="p"></param>
            <param name="points"></param>
            <returns></returns>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.UI2DHelper.IsWithin(System.Single,System.Single,System.Collections.Generic.List{Microsoft.Xna.Framework.Vector2})">
            <summary>
            Tests whether a point (x, y) is within a non-self-crossing polygon. The result can be inaccurate if
            the point (x, y) is really close to the edge of the polygon.
            </summary>
            <remarks>
            This code was referenced from http://alienryderflex.com/polygon/ . 
            </remarks>
            <param name="x"></param>
            <param name="y"></param>
            <param name="points"></param>
            <returns></returns>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.UI2DHelper.OnEdge(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Tests whether a point 'p' is on an edge of the rectangle 'rect'.
            </summary>
            <param name="p"></param>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.UI2DHelper.OnEdge(System.Int32,System.Int32,Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Tests whether a point (x, y) is on an edge of the rectangle 'rect'.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.UI2DHelper.OnCorner(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Tests whether a point 'p' is on a corner of the rectangle 'rect'.
            </summary>
            <param name="p"></param>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.UI2DHelper.OnCorner(System.Int32,System.Int32,Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Tests whether a point (x, y) is on a corner of the rectangle 'rect'.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.UI2DHelper.GetDistance(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Gets the distance between point 'p1' and 'p2'.
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.UI2DHelper.Convert3DPointTo2D(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Converts a 3D point to a projected 2D screen point.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="T:GoblinXNA.UI.UI2D.UI2DRenderer">
            <summary>
            A helper class for performing 2D drawing, such as drawing lines, filling or drawing 
            rectangular, circular, or polygonal shapes.
            </summary>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.UI2DRenderer.FillRectangle(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Color)">
            <summary>
            Fills a rectangle portion of the screen with given texture and color. If just want to fill
            it with a color, then set 'texture' to null.
            </summary>
            <param name="rect">A rectangle region to fill</param>
            <param name="texture">A texture to use for filling</param>
            <param name="color">A color to use for filling</param>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.UI2DRenderer.DrawRectangle(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Color,System.Int32)">
            <summary>
            Draws a rectangle with the given color and pixel width.
            </summary>
            <param name="rect">A rectangle to draw</param>
            <param name="color">The color of the line</param>
            <param name="pixelWidth">The width of the line</param>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.UI2DRenderer.DrawLine(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Color,System.Int32)">
            <summary>
            Draws a line between two given points with the given color and pixel width
            </summary>
            <param name="p1">The starting point of the line</param>
            <param name="p2">The endint point of the line</param>
            <param name="color">The color of the line</param>
            <param name="pixelWidth">The width of the line</param>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.UI2DRenderer.DrawLine(System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.Xna.Framework.Color,System.Int32)">
            <summary>
            Draws a line between two given points with the given color and pixel width
            </summary>
            <param name="x1">The x-coordinate of the starting point of the line</param>
            <param name="y1">The y-coordinate of the starting point of the line</param>
            <param name="x2">The x-coordinate of the ending point of the line</param>
            <param name="y2">The y-coordinate of the ending point of the line</param>
            <param name="color">The color of the line</param>
            <param name="pixelWidth">The width of the line</param>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.UI2DRenderer.DrawCircle(System.Int32,System.Int32,System.Int32,Microsoft.Xna.Framework.Color)">
            <summary>
            Draws a circle centered at (x, y) with specified radius and a color.
            </summary>
            <param name="x">The x-coordinate of the center</param>
            <param name="y">The y-coordinate of the center</param>
            <param name="radius">The radius of this circle</param>
            <param name="color">The color of the circle</param>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.UI2DRenderer.DrawCircle(Microsoft.Xna.Framework.Point,System.Int32,Microsoft.Xna.Framework.Color)">
            <summary>
            Draws a circle centered at the 'center' point with the specified 'radius' and a 'color'.
            </summary>
            <param name="center">The center point of the circle</param>
            <param name="radius">The radius of this circle</param>
            <param name="color">The color of the circle</param>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.UI2DRenderer.FillCircle(System.Int32,System.Int32,System.Int32,Microsoft.Xna.Framework.Color)">
            <summary>
            Fills a circlular region centered at (x, y) with the specified radius and a color.
            </summary>
            <param name="x">The x-coordinate of the center</param>
            <param name="y">The y-coordinate of the center</param>
            <param name="radius">The radius of this circle</param>
            <param name="color">The color of the circle</param>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.UI2DRenderer.FillCircle(Microsoft.Xna.Framework.Point,System.Int32,Microsoft.Xna.Framework.Color)">
            <summary>
            Fills a circlular region centered at the 'center' point with the specified 'radius' and a 'color'.
            </summary>
            <param name="center">The center point of the circle</param>
            <param name="radius">The radius of this circle</param>
            <param name="color">The color of the circle</param>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.UI2DRenderer.FillPolygon(System.Collections.Generic.List{Microsoft.Xna.Framework.Point},Microsoft.Xna.Framework.Color)">
            <summary>
            Fills a polygonal region defined by the given 'points' with the specified 'color'.
            </summary>
            <param name="points">A list of points that define the polygonal region.</param>
            <param name="color">The color used to fill the polygon.</param>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.UI2DRenderer.FillPolygon(System.Collections.Generic.List{Microsoft.Xna.Framework.Point},Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Point)">
            <summary>
            Fills a polygonal region defined by the given 'points' shifted by 'offset' with the 
            specified 'color'.
            </summary>
            <param name="points">A list of points that define the polygonal region.</param>
            <param name="color">The color used to fill the polygon.</param>
            <param name="offset">An offset to each point defined in 'points'.</param>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.UI2DRenderer.FillPolygon(System.Collections.Generic.List{Microsoft.Xna.Framework.Point},Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Point,GoblinXNA.UI.UI2D.UI2DRenderer.PolygonShape)">
            <summary>
            Fills a polygon with the given point set, color, and offset. The 'shape' parameter is
            used for choosing an appropriate polygon filling algorithm.
            </summary>
            <remarks>
            This function still does not work for concave shapes.
            </remarks>
            <param name="points">A list of points that define the polygonal region.</param>
            <param name="color">The color used to fill the polygon.</param>
            <param name="offset">An offset to each point defined in 'points'.</param>
            <param name="shape">A parameter used for choosing an appropriate polygon filling algorithm.</param>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.UI2DRenderer.WriteText(Microsoft.Xna.Framework.Vector2,System.String,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Graphics.SpriteFont)">
            <summary>
            Draws a 2D text string on the screen
            </summary>
            <param name="pos">Position, in screen coordinates, of the upper left corner of 
            the first character</param>
            <param name="text">Text to be rendered on the screen</param>
            <param name="color">Color of the text</param>
            <param name="font">SpriteFont that defines the font family, style, size, etc</param>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.UI2DRenderer.WriteText(Microsoft.Xna.Framework.Vector2,System.String,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Graphics.SpriteFont,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Draws a 2D text string on the screen
            </summary>
            <param name="pos">Position, in screen coordinates, of the upper left corner of 
            the first character</param>
            <param name="text">Text to be rendered on the screen</param>
            <param name="color">Color of the text</param>
            <param name="font">SpriteFont that defines the font family, style, size, etc</param>
            <param name="scale">Scale to apply to the font</param>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.UI2DRenderer.WriteText(Microsoft.Xna.Framework.Vector2,System.String,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Graphics.SpriteFont,GoblinXNA.GoblinEnums.HorizontalAlignment,GoblinXNA.GoblinEnums.VerticalAlignment)">
            <summary>
            Draws a 2D text string on the screen
            </summary>
            <param name="pos">Position, in screen coordinates, of the upper-left corner of 
            the first character</param>
            <param name="text">Text to be rendered on the screen</param>
            <param name="color">Color of the text</param>
            <param name="font">SpriteFont that defines the font family, style, size, etc</param>
            <param name="xAlign">Horizontal axis alignment of the text string (If set to other than None,
            then the X coordinate information of the 'pos' parameter will be ignored)</param>
            <param name="yAlign">Vertical axis alignment of the text string (If set to other than None,
            then the Y coordinate information of the 'pos' parameter will be ignored)</param>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.UI2DRenderer.WriteText(Microsoft.Xna.Framework.Vector2,System.String,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Graphics.SpriteFont,Microsoft.Xna.Framework.Vector2,GoblinXNA.GoblinEnums.HorizontalAlignment,GoblinXNA.GoblinEnums.VerticalAlignment)">
            <summary>
            Draws a 2D text string on the screen
            </summary>
            <param name="pos">Position, in screen coordinates, of the upper-left corner of 
            the first character</param>
            <param name="text">Text to be rendered on the screen</param>
            <param name="color">Color of the text</param>
            <param name="font">SpriteFont that defines the font family, style, size, etc</param>
            <param name="scale">Scale to apply to the font</param>
            <param name="xAlign">Horizontal axis alignment of the text string (If set to other than None,
            then the X coordinate information of the 'pos' parameter will be ignored)</param>
            <param name="yAlign">Vertical axis alignment of the text string (If set to other than None,
            then the Y coordinate information of the 'pos' parameter will be ignored)</param>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.UI2DRenderer.WriteText(Microsoft.Xna.Framework.Vector2,System.String,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Graphics.SpriteFont,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteEffects,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,GoblinXNA.GoblinEnums.HorizontalAlignment,GoblinXNA.GoblinEnums.VerticalAlignment)">
            <summary>
            Draws a 2D text string on the screen
            </summary>
            <param name="pos">Position, in screen coordinates, of the left upper corner of 
            the first character</param>
            <param name="text">Text to be rendered on the screen</param>
            <param name="color">Color of the text</param>
            <param name="font">SpriteFont that defines the font family, style, size, etc</param>
            <param name="scale">Scale to apply to the font</param>
            <param name="effect">Rotations to apply prior to rendering</param>
            <param name="origin">Origin of the text. Specify (0, 0) for the upper-left corner</param>
            <param name="rotation">Angle, in radians, to rotate the text around origin</param>
            <param name="depth">Sorting depth of the sprite text, between 0(front) and 1(back)</param>
            <param name="xAlign">Horizontal axis alignment of the text string (If set to other than None,
            then the X coordinate information of the 'pos' parameter will be ignored)</param>
            <param name="yAlign">Vertical axis alignment of the text string (If set to other than None,
            then the Y coordinate information of the 'pos' parameter will be ignored)</param>
        </member>
        <member name="M:GoblinXNA.UI.UI2D.UI2DRenderer.Flush(System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Flushes all of the accumulated 2D drawings including texts and shapes. The texts and shapes are not
            drawn until this function is called.
            </summary>
        </member>
        <member name="T:GoblinXNA.UI.UI3D.G3DComponent">
            <summary>
            NOT FINISHED YET.
            </summary>
        </member>
        <member name="F:GoblinXNA.UI.UI3D.G3DComponent.center">
            <summary>
            Original center of the widget
            </summary>
        </member>
        <member name="F:GoblinXNA.UI.UI3D.G3DComponent.paintCenter">
            <summary>
            
            </summary>
        </member>
        <member name="F:GoblinXNA.UI.UI3D.G3DComponent.widgetComponent">
            <summary>
            TVMesh objects that are used to render the 3D widget
            </summary>
        </member>
        <member name="F:GoblinXNA.UI.UI3D.G3DComponent.showShadow">
            <summary>
            Indicates whether to show shadow volume for this widget
            </summary>
        </member>
        <member name="F:GoblinXNA.UI.UI3D.G3DComponent.widgetEffect">
            <summary>
            
            </summary>
        </member>
        <member name="M:GoblinXNA.UI.UI3D.G3DComponent.#ctor(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Graphics.Model,Microsoft.Xna.Framework.Graphics.Effect,System.Single)">
            <summary>
            Constructs a GoblinXNA 3D GUI component
            </summary>
            <param name="center">A Matrix that defines the center location and orientation
            of the entire widget components</param>
            <param name="alpha">Transparency value of this component [0.0f - 1.0f]</param>
        </member>
        <member name="M:GoblinXNA.UI.UI3D.G3DComponent.#ctor(Microsoft.Xna.Framework.Matrix,System.Single)">
            <summary>
            Constructs a GoblinXNA 3D GUI component
            </summary>
            <param name="center">A Matrix that defines the center location and orientation
            of the entire widget components</param>
        </member>
        <member name="M:GoblinXNA.UI.UI3D.G3DComponent.#ctor">
            <summary>
            Constructs a default GoblinXNA 3D GUI component
            </summary>
        </member>
        <member name="M:GoblinXNA.UI.UI3D.G3DComponent.PaintComponent">
            <summary>
            Implement how the component should be painted. 
            NOTE: This base class method only paints the background
            </summary>
            <param name="Scr2D"></param>
            <param name="ScrText"></param>
        </member>
        <member name="M:GoblinXNA.UI.UI3D.G3DComponent.RenderWidget">
            <summary>
            Implements how this component should be rendered
            </summary>
            <param name="Scr2D"></param>
            <param name="ScrText"></param>
        </member>
        <member name="M:GoblinXNA.UI.UI3D.G3DComponent.ToString">
            <summary>
            Get the name of this component
            </summary>
            <returns>Name of this component</returns>
        </member>
        <member name="P:GoblinXNA.UI.UI3D.G3DComponent.Transform">
            <summary>
            Gets or Sets the Matrix that defines the center location and orientation of the entire
            widget components
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.UI3D.G3DComponent.Parent">
            <summary>
            Gets or Sets the parent of this component
            </summary>
        </member>
        <member name="T:GoblinXNA.UI.UI3D.UI3DHelper">
            <summary>
            NOT FINISHED YET.
            </summary>
        </member>
        <member name="T:GoblinXNA.UI.UI3D.UI3DRenderer">
            <summary>
            A helper class for performing 3D drawing, such as drawing 3D lines and 3D texts.
            </summary>
        </member>
        <member name="M:GoblinXNA.UI.UI3D.UI3DRenderer.Write3DText(System.String,Nuclex.Fonts.VectorFont,GoblinXNA.UI.UI3D.UI3DRenderer.Text3DStyle,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Matrix)">
            <summary>
            Draws a 3D text with the given font, style, color, and transformation.
            </summary>
            <remarks>
            This 3D text won't be actually drawn until Flush() method is called. If this method is called before
            base.Draw(...) in your main Game class's Draw(...) function, then it's automatically flushed when
            base.Draw(...) is called. If this method is called after base.Draw(...) function, then you need to
            call Flush() function after calling one or more of this function. Otherwise, the 3D texts drawing will
            be deferred until the next base.Draw(...) or Flush() call.
            </remarks>
            <param name="text">Text string to be displayed in 3D.</param>
            <param name="font">Font to use for the 3D text.</param>
            <param name="style">3D text style (Outline, Fill, or Extrude).</param>
            <param name="color">Color of the 3D text.</param>
            <param name="transform">Transformation of the left-bottom corner of the 3D text.</param>
        </member>
        <member name="M:GoblinXNA.UI.UI3D.UI3DRenderer.Write3DText(System.String,Nuclex.Fonts.VectorFont,GoblinXNA.UI.UI3D.UI3DRenderer.Text3DStyle,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Matrix,GoblinXNA.GoblinEnums.HorizontalAlignment,GoblinXNA.GoblinEnums.VerticalAlignment)">
            <summary>
            Draws a 3D text with the given font, style, color, transformation, horizontal align, and vertical
            align.
            </summary>
            <remarks>
            This 3D text won't be actually drawn until Flush() method is called. If this method is called before
            base.Draw(...) in your main Game class's Draw(...) function, then it's automatically flushed when
            base.Draw(...) is called. If this method is called after base.Draw(...) function, then you need to
            call Flush() function after calling one or more of this function. Otherwise, the 3D texts drawing will
            be deferred until the next base.Draw(...) or Flush() call.
            </remarks>
            <param name="text">Text string to be displayed in 3D.</param>
            <param name="font">Font to use for the 3D text.</param>
            <param name="style">3D text style (Outline, Fill, or Extrude).</param>
            <param name="color">Color of the 3D text.</param>
            <param name="transform">Transformation of the 3D text.</param>
            <param name="hAlign">The horizontal (x-axis) shifting</param>
            <param name="vAlign"></param>
        </member>
        <member name="M:GoblinXNA.UI.UI3D.UI3DRenderer.Dispose">
            <summary>
            Disposes
            </summary>
        </member>
        <member name="M:GoblinXNA.UI.UI3D.UI3DRenderer.Flush(System.Boolean)">
            <summary>
            Performs batch drawing of the queued 3D texts and lines.
            </summary>
        </member>
        <member name="T:GoblinXNA.UI.UI3D.UI3DRenderer.Text3DStyle">
            <summary>
            An enum that specifies the display style of the 3D text.
            </summary>
            <remarks>
            This is different from the font style (e.g., Plain, Italic) which is defined in the .spritefont file.
            </remarks>
        </member>
        <member name="F:GoblinXNA.UI.UI3D.UI3DRenderer.Text3DStyle.Outline">
            <summary>
            A style that outlines the text string.
            </summary>
        </member>
        <member name="F:GoblinXNA.UI.UI3D.UI3DRenderer.Text3DStyle.Fill">
            <summary>
            A style that fills the front face of the text string.
            </summary>
        </member>
        <member name="F:GoblinXNA.UI.UI3D.UI3DRenderer.Text3DStyle.Extrude">
            <summary>
            A style that extrudes the text string.
            </summary>
        </member>
        <member name="T:GoblinXNA.UI.UIRenderer">
            <summary>
            The renderer for all 2D and 3D UI components, including FPS, triangle count, and
            debugging/notification messages.
            
            An UI component needs to be added to this renderer through Scene.UIRender before it
            can be rendered in 3D scene.
            </summary>
        </member>
        <member name="M:GoblinXNA.UI.UIRenderer.#ctor">
            <summary>
            Creates a renderer class for taking care of the UI rendering.
            </summary>
            <remarks>
            Do not instantiate this class since this class is already instantiated in the 
            GoblinXNA.SceneGraph.Scene class.
            </remarks>
        </member>
        <member name="M:GoblinXNA.UI.UIRenderer.Add2DComponent(GoblinXNA.UI.UI2D.G2DComponent)">
            <summary>
            Adds a 2D UI component to be rendered on the screen.
            </summary>
            <remarks>You should only add top-level components that do not have a parent component.</remarks>
            <param name="comp2d">A top-level G2DComponent object</param>
        </member>
        <member name="M:GoblinXNA.UI.UIRenderer.Remove2DComponent(GoblinXNA.UI.UI2D.G2DComponent)">
            <summary>
            Removes a 2D UI component from the rendering process.
            </summary>
            <param name="comp2d"></param>
        </member>
        <member name="M:GoblinXNA.UI.UIRenderer.Add3DComponent(GoblinXNA.UI.UI3D.G3DComponent)">
            <summary>
            Adds a 3D UI component to be rendered in the scene.
            </summary>
            <remarks>You should only add top-level components that do not have a parent component.</remarks>
            <param name="comp3d">A top-level G3DComponent object</param>
        </member>
        <member name="M:GoblinXNA.UI.UIRenderer.Remove3DComponent(GoblinXNA.UI.UI3D.G3DComponent)">
            <summary>
            Removes a 3D UI component from the rendering process.
            </summary>
            <param name="comp3d"></param>
        </member>
        <member name="M:GoblinXNA.UI.UIRenderer.Draw(System.Single,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Draws all of the user interface components.
            </summary>
            <remarks>Do not call this method. This method will be called automatically</remarks>
            <param name="elapsedTime"></param>
            <param name="clear"></param>
            <param name="renderRightEye"></param>
        </member>
        <member name="P:GoblinXNA.UI.UIRenderer.TriangleCount">
            <summary>
            Gets or sets the triangle count of currently drawn polygons.
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.UIRenderer.FPS">
            <summary>
            Gets the frames per second count.
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.UIRenderer.GlobalUIShift">
            <summary>
            Gets or sets the X shift amount applied to all 2D HUD drawings including the text. 
            </summary>
        </member>
        <member name="P:GoblinXNA.UI.UIRenderer.Enabled">
            <summary>
            Gets or sets if UI should be rendered
            </summary>
            <remarks>The default value is true</remarks>
        </member>
    </members>
</doc>
